<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Shell程序设计</title>
      <link href="/2024/05/11/shell-cheng-xu-she-ji/"/>
      <url>/2024/05/11/shell-cheng-xu-she-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell程序设计"><a href="#Shell程序设计" class="headerlink" title="Shell程序设计"></a>Shell程序设计</h1><h3 id="1-什么是Shell编程"><a href="#1-什么是Shell编程" class="headerlink" title="1.什么是Shell编程"></a>1.什么是Shell编程</h3><p>​<strong>shell是一个作为用户与Linux系统间接口的程序，它允许用户向操作系统输入需要执行的命令。</strong>Shell类似Windows的命令提示符，可以通过它执行命令，调用Linux工具，还可以自己编写程序，Shell执行的Shell程序通常被称为脚本，是在运行时解释执行的。可以逐行地执行指令，而且节省了重新编译的时间。然而，这也使得shell不适合用来完成时间紧迫型和处理器忙碌型的任务。</p><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240421135629085.png" alt="Linux层次"></p><p>在乌班图中，使用以下命令可以查看bash版本：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash --version</span><br></pre></td></tr></tbody></table></figure><h3 id="2-管道和重定向"><a href="#2-管道和重定向" class="headerlink" title="2.管道和重定向"></a>2.管道和重定向</h3><h4 id="2-1重定向输出"><a href="#2-1重定向输出" class="headerlink" title="2.1重定向输出"></a>2.1重定向输出</h4><p>​以下命令可以把<code>ls</code>命令的输出保存到文件<code>lsoutput.txt</code>中</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l &gt; lsoutput.txt</span><br></pre></td></tr></tbody></table></figure><p>​文件描述符0代表一个程序的标准输入，文件描述符1代表标准输出，而文件描述符2代表标准错误输出。</p><p>​使用<code>&gt;&gt;</code>操作符可以将输出<strong>附加</strong>到一个文件中</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps &gt;&gt; lsoutput.txt</span><br></pre></td></tr></tbody></table></figure><p>​这条命令会将ps命令的输出附加到指定文件的尾部。</p><p>​对不同的输出或者输入进行重定向，需要在需要重定向的文件描述符编号加载<code>&gt;</code>操作符前面。下面的命令将把标准输出和标准错误输出分别重定向到不同的文件中：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -HUP 1234 &gt;killout.txt 2&gt;killerr.txt</span><br></pre></td></tr></tbody></table></figure><p>​如果你想把两组输出都重定向到一个文件中，你可以用&gt;&amp;操作符来结合两个输出。如下所示：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -l 1234 &gt;killouterr.txt 2&gt;&amp;1</span><br></pre></td></tr></tbody></table></figure><p>​可以用Linux的通用“回收站”/dev/null来有效地丢弃所有的输出信息，如下所示：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -l 1234 &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></tbody></table></figure><h4 id="2-2重定向输入"><a href="#2-2重定向输入" class="headerlink" title="2.2重定向输入"></a>2.2重定向输入</h4><p>​以重定向标准输入。例如：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more &lt; killout.txt</span><br></pre></td></tr></tbody></table></figure><h4 id="2-3管道"><a href="#2-3管道" class="headerlink" title="2.3管道"></a>2.3管道</h4><p>​可以用管道操作符<code>|</code>来连接进程。在Linux下通过管道连接的进程可以同时运行，并且随着数据流在它们之间的传递可以自动地进行协调。</p><p>​使用sort命令对ps命令的输出进行排序。</p><p>​如果不使用管道，步骤如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps &gt; psout.txt</span><br><span class="line">sort psout.txt &gt; pssort.out</span><br></pre></td></tr></tbody></table></figure><p>​如果使用管道，如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps | sort &gt; pssort.out</span><br></pre></td></tr></tbody></table></figure><p>​如果想在屏幕上分页显示输出结果，你可以再连接第三个进程more</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps | sort | more</span><br></pre></td></tr></tbody></table></figure><p>​允许连接的进程数目是没有限制的，使用以下命令可以查看除了Shell程序外运行的所有进程名字：</p><p>ps -xo comm | sort | uniq | grep -v sh | more</p><p>​<strong>注意：</strong>如果你有一系列的命令需要执行，相应的输出文件是在这一组命令被创建的同时立刻被创建或写入的，所以一定不要在命令流中重复使用相同的文件名。</p><h3 id="3-shell的使用方式"><a href="#3-shell的使用方式" class="headerlink" title="3.shell的使用方式"></a>3.shell的使用方式</h3><p>​可以输入一系列命令让shell交互地执行它们，也可以把这些命令保存到一个文件中，然后将该文件作为一个程序来调用。</p><h4 id="3-1交互程序"><a href="#3-1交互程序" class="headerlink" title="3.1交互程序"></a>3.1交互程序</h4><p>​命令行上直接输入shell脚本</p><p>​shell提供了通配符扩展，可以用通配符*来匹配一个字符串。[set]允许匹配方括号中任何一个单个字符，[^set]对方括号中的内容取反，即匹配任何没有出现在给出的字符集中的字符，set表示字符集合。扩展的花括号{}（只能用在部分shell中，其中包括bash）允许你将任意的字符串组放在一个集合中，以供shell进行扩展。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls my_{finger,toe}s</span><br></pre></td></tr></tbody></table></figure><p>这个命令将列出文件my_fingers和my_toes</p><h4 id="3-2创建脚本"><a href="#3-2创建脚本" class="headerlink" title="3.2创建脚本"></a>3.2创建脚本</h4><p>​shell程序可以允许将几个现有的命令结合在一起，以构成一个新的功能强大的命令。如果将这些命令保存在一个文件中，这就是shell脚本，这样就可以在需要的时候随时执行它们。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">first</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This file looks through all the files <span class="keyword">in</span> the current</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">directory <span class="keyword">for</span> the string POSIX, and the prints the names of</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">those files to the standard output.</span></span><br><span class="line"></span><br><span class="line">for file in *</span><br><span class="line">do</span><br><span class="line">  if grep -q POSIX $file</span><br><span class="line">  then</span><br><span class="line">    echo $file</span><br><span class="line">  fi  </span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">exit 0 </span><br></pre></td></tr></tbody></table></figure><p>​创建一个文本文件<code>first</code>，程序注释以#符号开始，一直持续到该行的结束。第一行的<code>#!/bin/sh</code>是特殊的注释，<code>#!</code>字符告诉系统同一行上紧跟在它后面的那个参数是用来执行本文件的程序。</p><p>​脚本程序本质上被看作是shell的标准输入，所以它可以包含任何能够通过你的PATH环境变量引用到的Linux命令。</p><p>​exit命令的作用是确保脚本程序能够返回一个有意义的退出码，在shell程序设计里，0表示成功。</p><h4 id="3-3执行脚本"><a href="#3-3执行脚本" class="headerlink" title="3.3执行脚本"></a>3.3执行脚本</h4><p>​两种方法运行脚本文件</p><p>​第一种：调用shell，把脚本文件名当成一个参数</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh first</span><br></pre></td></tr></tbody></table></figure><p>​第二种：使用<code>chmod</code>命令来改变换个文件的模式，使得这个文件可以被所有用户执行</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x first</span><br></pre></td></tr></tbody></table></figure><p>​然后执行</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./first</span><br></pre></td></tr></tbody></table></figure><p>​可以将脚本文件移动到特定的文件目录中，然后将该目录添加到PATH变量中，这样就可以直接执行脚本</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first</span><br></pre></td></tr></tbody></table></figure><h3 id="4-Shell语法"><a href="#4-Shell语法" class="headerlink" title="4.Shell语法"></a>4.Shell语法</h3><h4 id="4-1变量"><a href="#4-1变量" class="headerlink" title="4.1变量"></a>4.1变量</h4><p>​Shell中变量使用之前通常不需要事先做出声明，通过使用他们来进行创建。默认情况所有的变量都被看做字符串，在Shell中可以通过在变量名前加一个$符号来访问它的内容，当为变量赋值时，你只需要使用变量名，该变量会根据需要被自动创建。<strong>注意，如果字符串里包含空格，就必须用引号把它们括起来。此外，等号两边不能有空格。</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">salutation=Hello</span><br><span class="line">echo $salutation</span><br></pre></td></tr></tbody></table></figure><p>​read命令将用户的输入赋值给一个变量。他会等待用户输入数据。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read salutation</span><br></pre></td></tr></tbody></table></figure><p>​(1)引号的作用</p><p>​脚本文件中的参数以空白字符间隔，如果要在一个参数中包含多个空白字符，就必须给参数加上引号。</p><p>​$变量表达式放在双引号中，程序执行到这一行时就会把变量替换为它的值；如果放在单引号中，就不会发生替换现象；在$字符前加上一个\字符可以取消它的特殊含义。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">myvar="Hi there"</span><br><span class="line"></span><br><span class="line">echo $myvar</span><br><span class="line">echo "$myvar"</span><br><span class="line">echo '$myvar'</span><br><span class="line">echo \$myvar</span><br><span class="line"></span><br><span class="line">echo Enter some text</span><br><span class="line">read myvar</span><br><span class="line"></span><br><span class="line">echo '$myvar' now equals $myvar</span><br><span class="line">exit 0</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240421211159233.png" alt="image-20240421211159233"></p><p>​解析：在变量名前加一个$符号就能看见变量的内容。使用双引号时如果变量名前有$符号，也会看到变量的内容。使用单引号和反斜线就看不到变量内容。</p><p>​(2)环境变量</p><p>​当一个shell脚本程序开始执行时，一些变量会根据环境设置中的值进行初始化。这些变量通常用大写字符做名字，以便把他们和用户在脚本程序里定义的变量区分开来。可以理解就是所有的脚本天生就有这些变量，这些变量在脚本程序执行时自动初始化的。</p><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240421213011938.png" alt="环境变量"></p><p>​(3)<a href="#%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0"><span id="参数变量">参数变量</span></a></p><p>​如果脚本程序在调用时带有参数，一些额外的变量就会被创建。即使没有传递任何参</p><p>数，环境变量$#也依然存在，只不过它的值是0罢了。</p><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240421213212279.png" alt="参数变量"></p><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240421213743945.png" alt="image-20240421213743945"></p><p>​除了使用echo命令查看变量的内容外，你还可以使用read命令来读取变量。</p><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240421215248918.png" alt="image-20240421215248918"></p><h4 id="4-2条件"><a href="#4-2条件" class="headerlink" title="4.2条件"></a>4.2条件</h4><p>​Shell的布尔判断命令<code>[</code>或<code>test</code>。</p><p>​简单介绍<code>test</code>或<code>[</code>用法：检查一个文件是否存在</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if test -f fred.c</span><br><span class="line">then</span><br><span class="line">...</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure><p>​或</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ -f fred.c ]</span><br><span class="line">then</span><br><span class="line">...</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure><p>​test命令可以使用的条件类型可以归为3类：字符串比较、算术比较和与文件有关的条件测试。</p><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240421220942488.png" alt="image-20240421220942488"></p><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240421221043037.png" alt="image-20240421221043037"></p><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240421221051915.png" alt="image-20240421221051915"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">if [ -f /bin/bash ]</span><br><span class="line">then</span><br><span class="line">  echo "file /bin/bash exists"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -d /bin/bash ]</span><br><span class="line">then</span><br><span class="line">  echo "/bin/bash is a directory"</span><br><span class="line">else</span><br><span class="line">  echo "/bin/bash is NOT a directory"</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240421221754120.png" alt="image-20240421221754120"></p><h4 id="4-3控制结构"><a href="#4-3控制结构" class="headerlink" title="4.3控制结构"></a>4.3控制结构</h4><p>​<strong>(1)<code>if</code>语句</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">  statements</span><br><span class="line">else</span><br><span class="line">  statements</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure><p>​实验</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">echo "Is it morning? Please answer yes or no"</span><br><span class="line">read timeofday</span><br><span class="line"></span><br><span class="line">if [ $timeofday = "yes" ]; then</span><br><span class="line">  echo "Good morning"</span><br><span class="line">else</span><br><span class="line">  echo "Good afternoon"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240421222553276.png" alt="image-20240421222553276"></p><p>​<strong>(2)使用elif结构进一步检查</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">echo "Is it morning? Please answer yes or no"</span><br><span class="line">read timeofday</span><br><span class="line"></span><br><span class="line">if [ $timeofday = "yes" ]</span><br><span class="line">then</span><br><span class="line">  echo "Good morning"</span><br><span class="line"></span><br><span class="line">elif [ $timeofday = "no" ]; then</span><br><span class="line">  echo "Good afternoon"</span><br><span class="line">else</span><br><span class="line">  echo "Sorry, $timeofday not recognized. Enter yes or no"</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exit 0  </span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240421223713293.png" alt="image-20240421223713293"></p><p>​这里存在一个漏洞，如果用户什么都不输入，会导致报错，因为空输入会导致语句<code>if [ $timeofday = "yes"]</code>变成<code>if [ = "yes"]</code>，这不是一个合法的输入，为了避免这种情况，需要在变量timeofday上加上双引号，即变成<code>if [ "$timeofday " = "yes"]</code>，这样空输入就变成<code>if ["" = "yes"]</code>，这样空字符也是合法输入。</p><p>​<strong>(3)for语句</strong></p><p>​使用for循环结构处理一组值。将一组values值依次赋给变量variable</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for variable in values</span><br><span class="line">do</span><br><span class="line">  statements</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">for foo in bar fud 43</span><br><span class="line">do</span><br><span class="line">  echo $foo</span><br><span class="line">done</span><br><span class="line">exit 0      </span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240421230708364.png" alt="image-20240421230708364"></p><p>​<strong>(4)while语句</strong></p><p>​使用while循环处理事先并不知道循环要执行的次数的情况。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while condition do</span><br><span class="line">  statement</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure><p>​测试</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">echo "Enter password"</span><br><span class="line">read trythis</span><br><span class="line"></span><br><span class="line">while [ "$trythis" != "secret" ]; do</span><br><span class="line">  echo "Sorry, try again"</span><br><span class="line">  read trythis</span><br><span class="line">done</span><br><span class="line">exit 0    </span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240422160527340.png" alt="image-20240422160527340"></p><p>​<strong>(5)until语句</strong></p><p>​循环将反复执行直到条件为真，而不是在条件为真时反复执行。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">  statement</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure><p>​示例，设置一个警报，当某个特定的用户登录时，该警报就会启动，通过命令行将用户名传递给脚本程序。如果用户已经登录，那么循环就不需要执行。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">until who | grep "$1" &gt; /dev/null</span><br><span class="line">do</span><br><span class="line">  sleep 60</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">now ring the bell and announce the expected user.</span></span><br><span class="line"></span><br><span class="line">echo -e 'notice!!!'</span><br><span class="line">echo "**** $1 has just logged in ****"</span><br><span class="line"></span><br><span class="line">exit 0  </span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240422161759510.png" alt="image-20240422161759510"></p><p>​<strong>(6)case语句</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case variable in</span><br><span class="line">  pattern [ | pattern] ...) statements;;</span><br><span class="line">  pattern [ | pattern] ...) statements;;</span><br><span class="line">  ...</span><br><span class="line">esac</span><br></pre></td></tr></tbody></table></figure><p>​示例1：用户输入</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">echo "Is it morning? Please answer yes or no"</span><br><span class="line">read timeofday</span><br><span class="line"></span><br><span class="line">case "$timeofday" in</span><br><span class="line">    yes) echo "Good Morning";;</span><br><span class="line">    no ) echo "Good Afternoon";;</span><br><span class="line">    y  ) echo "Good Morning";;</span><br><span class="line">    n  ) echo "Good Afternoon";;</span><br><span class="line">    *  ) echo "Sorry, answer not recognized";;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">exit 0   </span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240422164017376.png" alt="image-20240422164017376"></p><p>使用一个单独的*表示匹配任何可能的字符串，所以总是在其他匹配字符串之后再加上一个*以确保如果没有字符串得到匹配</p><p>​示例2：合并匹配模式</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">echo "Is it morning? Please answer yes or no" </span><br><span class="line">read timeofday</span><br><span class="line"></span><br><span class="line">case "$timeofday" in</span><br><span class="line">    yes | y | Yes | YES )      echo "Good Morning";;</span><br><span class="line">    n* | N* )                  echo "Good Afternoon";;</span><br><span class="line">    * )                        echo "Sorry, answer not recognized";;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">exit 0 </span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240422170414893.png" alt="image-20240422170414893"></p><p>​示例3：执行多条语句</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">echo "Is it morning? Please answer yes or no"</span><br><span class="line">read timeofday</span><br><span class="line"></span><br><span class="line">case "$timeofday" in</span><br><span class="line">    yes | y | Yes | YES )</span><br><span class="line">           echo "Good Morning"</span><br><span class="line">           echo "Up bright and early this moring"</span><br><span class="line">           ;;  </span><br><span class="line">    [nN]*)</span><br><span class="line">           echo "Good Afternoon"</span><br><span class="line">           ;;  </span><br><span class="line">    *)  </span><br><span class="line">           echo "Sorry, answer not recognized"</span><br><span class="line">           echo "Please answer yes or no"</span><br><span class="line">           exit 1</span><br><span class="line">           ;;  </span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">exit 0     </span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240422171105211.png" alt="image-20240422171105211"></p><p>​必须很小心地把最精确的匹配放在最开始，而把最一般化的匹配放在最后。这样做很重要，因为case将执行它找到的第一个匹配而不是最佳匹配。如果你把*)放在开头，那不管用户输入的是什么，都会匹配这个模式。</p><p>​<strong>(7)命令列表</strong></p><p>​想要将几条命令连接成一个序列。可以使用特殊结构专门用于处理命令列表，它们就是AND列表和OR列表。</p><p>​<strong>AND列表：</strong>只有在前面所有的命令都执行成功的情况下才执行后一条命令。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">statement1 &amp;&amp; statement2 &amp;&amp; statement3 &amp;&amp; ...</span><br></pre></td></tr></tbody></table></figure><p>​示例：执行touch file_one命令（检查文件是否存在，如果不存在就创建它）并删除file_two文件。然后用AND列表检查每个文件是否存在并通过echo命令给出相应的指示。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">touch file_one</span><br><span class="line">rm -f file_two</span><br><span class="line"></span><br><span class="line">if [ -f file_one] &amp;&amp; echo "hello" &amp;&amp; [ -f file_two ] &amp;&amp; echo " there"</span><br><span class="line">then</span><br><span class="line">    echo "in if"</span><br><span class="line">else</span><br><span class="line">    echo "in else"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exit 0  </span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240422173447572.png" alt="image-20240422173447572"></p><p>​<strong>OR列表：</strong>OR列表结构允许持续执行一系列命令直到有一条命令成功为止，其后的命令将不再被执行。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">statement1 || statement2 || statement3 || ...</span><br></pre></td></tr></tbody></table></figure><p>​示例：上一个示例的修改</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">rm -f file_one</span><br><span class="line"></span><br><span class="line">if [ -f file_one ] || echo "hello" || echo " there"</span><br><span class="line">then</span><br><span class="line">    echo "in if"</span><br><span class="line">else</span><br><span class="line">    echo "in else"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exit 0                                                                 </span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240422174327654.png" alt="image-20240422174327654"></p><p>​<strong>(8)语句块</strong></p><p>​如果你想在某些只允许使用单个语句的地方（比如在AND或OR列表中）使用多条语句，你可以把它们括在花括号{}中来构造一个语句块。</p><h4 id="4-4函数"><a href="#4-4函数" class="headerlink" title="4.4函数"></a>4.4函数</h4><p>​函数的执行速度比将大型脚本程序分解成许多小脚本程序来执行快得多，shell函数的</p><p>定义和C语言函数差不多</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function_name () {</span><br><span class="line">statements</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​函数的调用写出函数名字即可</p><p>​简单示例</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">foo() {</span><br><span class="line">    echo <span class="string">"Function foo is executing"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">echo <span class="string">"script starting"</span></span><br><span class="line">foo</span><br><span class="line">echo <span class="string">"script ended"</span></span><br><span class="line"></span><br><span class="line">exit 0      </span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240427155049223.png" alt="image-20240427155049223"></p><p>​所有函数在调用前必须定义，shell中不存在前向声明。</p><p>​<strong>函数返回值</strong></p><p>​以下函数演示了函数的参数是如何传递的，以及函数如何返回一个true或false值</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">yes_or_no() {</span><br><span class="line">    echo "Is your name $* ?"</span><br><span class="line">    while true</span><br><span class="line">    do  </span><br><span class="line">      echo -n "Enter yes or no: "</span><br><span class="line">      read x</span><br><span class="line">      case "$x" in</span><br><span class="line">        y | yes ) return 0;; </span><br><span class="line">        n | no  ) return 1;; </span><br><span class="line">        * )       echo "Answer yes or no"</span><br><span class="line">      esac</span><br><span class="line">    done</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">echo "Original parameters are $*"</span><br><span class="line"></span><br><span class="line">if yes_or_no "$1"</span><br><span class="line">then</span><br><span class="line">    echo "Hi $1, nice name"</span><br><span class="line">else</span><br><span class="line">    echo "Never mind"</span><br><span class="line">fi</span><br><span class="line">exit 0 </span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240428122852881.png" alt="image-20240428122852881"></p><p>​当一个函数被调用时，脚本程序的<a id="位置参数"></a><a href="#%E5%8F%82%E6%95%B0%E5%8F%98%E9%87%8F">位置参数</a>（$*、$@、$#、$1、$2等）会被替换为函数的参数。这也是读取传递给函数的参数的办法。当函数执行完毕后，这些参数会恢复为它们先前的值。</p><p>​上面的传入函数<code>yes_or_no</code>中的参数为<code>$1</code>，也就是传入脚本程序第一个参数，在<code>yes_or_no</code>函数中使用<code>$*</code>访问的是传入函数的全部参数(这里只有<code>$1</code>)，而不是传入脚本的全部参数<code>$1,$2,$3...</code></p><h4 id="4-4命令"><a href="#4-4命令" class="headerlink" title="4.4命令"></a>4.4命令</h4><p>​外部命令：可以在命令提示符中执行的“普通”命令</p><p>​内部命令：在shell内部实现的，它们不能作为外部程序被调用</p><p>​常用主要命令（不区分内部外部）</p><p>​(1) <code>break</code>命令</p><p>​跳出for、while或until循环，后面可以跟数字来跳出循环层数，默认是1层。</p><p>​(2) <code>:</code>命令</p><p>​命令是一个空命令。它偶尔会被用于简化条件逻辑，相当于true的一个别名。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while:   #相当于while true</span><br></pre></td></tr></tbody></table></figure><p>​(3) <code>continue</code>命令</p><p>​使for、while或until循环跳到下一次循环继续执行，循环变量取循环列表中的下一个值。</p><p>​(4) <code>.</code>命令</p><p>​通常，当一个脚本执行一条外部命令或脚本程序时，它会创建一个新的环境（一个子shell），命令将在这个新环境中执行，在命令执行完毕后，这个环境被丢弃，留下退出码返回给父shell。但外部的source命令和点命令（这两个命令差不多是同义词）在执行脚本程序中列出的命令时，使用的是调用该脚本程序的同一个shell。</p><p>​(5) <strong><code>echo</code>命令</strong></p><p>​使用echo命令来输出结尾带有换行符的字符串。可以增加附加信息去掉换行符。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -n "string to output"</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e "string to output\c"</span><br></pre></td></tr></tbody></table></figure><p>​第一种是去掉默认换行符，第二种是去掉反斜杠的转义字符(如\c代表去掉换行符，\t代表制表符，\n代表回车)</p><p>​(6) <code>eval</code>命令</p><p>​eval命令允许对参数进行求值。</p><p>​(7) <code>exec</code>命令</p><p>​典型用法是将当前shell替换为一个不同的程序。</p><p>​(8) <strong><code>exit n</code>命令</strong></p><p>​exit命令使脚本程序以退出码n结束运行。</p><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240428130650350.png" alt="image-20240428130650350"></p><p>​(9) <code>export</code>命令</p><p>​export命令将作为它参数的变量导出到子shell中，并使之在子shell中有效。在默认情况下，在一个shell中被创建的变量在这个shell调用的下级（子）shell中是不可用的。</p><p>​(10) <code>expr</code>命令</p><p>​expr命令将它的参数当作一个表达式来求值。惯用法：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x=$(expr $x + 1)</span><br></pre></td></tr></tbody></table></figure><p>​(11) <code>printf</code>命令</p><p>​代替echo命令，以产生格式化的输出</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf "format string" parameter1 parameter2 ...</span><br></pre></td></tr></tbody></table></figure><p>​和C/C++很相似，有自己的限制，不支持浮点数，格式字符串中除了%和\之外的所有字符都将按原样输出。</p><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240428131716072.png" alt="image-20240428131716072"></p><p>​(12) <code>return</code>命令</p><p>​return命令的作用是使函数返回。</p><p>​(13) <code>set</code>命令</p><p>​set命令的作用是为shell设置参数变量。许多命令的输出结果是以空格分隔的值，如果需要使用输出结果中的某个域，这个命令就非常有用。</p><p>​(14) <code>shift</code>命令</p><p>​shift命令把所有参数变量左移一个位置，使$2变成$1，$3变成$2，以此类推。原来$1的值将被丢弃，而$0仍将保持不变。如</p><p>​(15) <code>trap</code>命令</p><p>​trap命令用于指定在接收到信号后将要釆取的行动.</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trap command signal</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240428132646222.png" alt="image-20240428132646222"></p><p>​(16) <code>unset</code>命令</p><p>​unset命令的作用是从环境中删除变量或函数。</p><p>​(17) 搜索命令</p><p>​<strong><code>find</code>命令</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [path] [options] [tests] [actions]</span><br></pre></td></tr></tbody></table></figure><p>​options:</p><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240428133717907.png" alt="image-20240428133717907"></p><p>​tests:</p><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240428133737158.png" alt="image-20240428133737158"></p><p>以下操作符和tests合用</p><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240428133816810.png" alt="image-20240428133816810"></p><p>​actions：</p><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240428134044963.png" alt="image-20240428134044963"></p><p>​<strong><code>grep</code>命令</strong></p><p>​是通用正则表达式解析器（General Regular Expression Parser，简写为grep）。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [options] PATTERN [FILES]</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240428142211744.png" alt="image-20240428142211744"></p><p>​正则表达式，在匹配模式<code>PATTERN</code>那里使用</p><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240428143326411.png" alt="image-20240428143326411"></p><p>​想将上述字符用作普通字符，就需要在它们前面加上\字符。</p><p>​方括号中有特殊匹配模式：</p><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240428143358928.png" alt="image-20240428143358928"></p><p>​如果指定了用于扩展匹配的-E选项，那些用于控制匹配完成的其他字符可能会遵循正则表达式的规则</p><p><img src="/2024/05/11/shell-cheng-xu-she-ji/image-20240428143534752.png" alt="image-20240428143534752"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于文本的屏幕——curses函数库</title>
      <link href="/2024/05/11/ji-yu-wen-ben-de-ping-mu-curses-han-shu-ku/"/>
      <url>/2024/05/11/ji-yu-wen-ben-de-ping-mu-curses-han-shu-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="基于文本的屏幕——curses函数库"><a href="#基于文本的屏幕——curses函数库" class="headerlink" title="基于文本的屏幕——curses函数库"></a>基于文本的屏幕——curses函数库</h1><h2 id="1-curses函数库"><a href="#1-curses函数库" class="headerlink" title="1 curses函数库"></a>1 curses函数库</h2><p>​curses函数库可以简单绘制屏幕，并用一组函数自动处理和终端相关的问题。curses标准作为一个重要的过渡，位于简单的文本行程序和完全图形化界面（一般也更难于编程）的X视窗系统程序（如GTK+/GNOME和Qt/KDE）之间。</p><p>​使用curses函数库必须包含头文件<code>curses.h</code>，该头文件通常位于<code>/usr/include</code>，并在编译命令行中用<code>-1ncurses</code>选项来链接curses函数库。</p><p><img src="/2024/05/11/ji-yu-wen-ben-de-ping-mu-curses-han-shu-ku/image-20240509173356872.png" alt="image-20240509173356872"></p><p>​如果没有发现该头文件，可以使用以下命令进行安装<code>ncurses</code>标准软件包，兼容<code>cueses</code>函数库</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libncurses5-dev</span><br></pre></td></tr></tbody></table></figure><h2 id="2-基本术语stdscr和curscr"><a href="#2-基本术语stdscr和curscr" class="headerlink" title="2 基本术语stdscr和curscr"></a>2 基本术语stdscr和curscr</h2><p>​<code>curses</code>例程工作在屏幕、窗口和子窗口之上。所谓屏幕就是你正在写的设备（通常是终端屏幕，也可能是<code>xterm</code>屏幕）。无论何时，至少存在一个<code>curses</code>窗口，我们称之为<code>stdscr</code>，它与物理屏幕的尺寸完全一样。</p><p>​<code>curses</code>函数库用两个数据结构来映射终端屏幕，它们是<code>stdscr</code>和<code>curscr</code>，<code>stdscr</code>重要程度更高。</p><p>​<code>stdscr</code>数据结构对应的是“标准屏幕”，它的工作方式与<code>stdio</code>函数库中的标准输出<code>stdout</code>非常相似。它是<code>curses</code>程序中的默认输出窗口，<code>curscr</code>数据结构和<code>stdscr</code>相似，但它对应的是当前屏幕的样子。</p><p>​在程序调用<code>refresh</code>函数之前，输出到<code>stdscr</code>上的内容不会显示在屏幕上。<code>curses</code>函数库会在refresh函数被调用时比较<code>stdscr</code>（屏幕将会是什么样子）与第二个数据结构<code>curscr</code>（屏幕当前的样子）之间的不同之处，然后用这两个数据结构之间的差异来刷新屏幕。</p><p>​总结<code>curses</code>输出字符的过程就是：</p><ul><li>先curses刷新逻辑屏幕，也就是<code>stdscr</code>数据结构</li><li>然后使用refresh函数刷新物理屏幕（当前屏幕），也就是<code>curscr</code></li></ul><p>​逻辑屏幕的布局通过一个字符数组来实现，它以屏幕的左上角——坐标（0,0）为起</p><p>点，通过行号和列号来组织。所有的<code>curses</code>函数使用的坐标都是y值（行号）在前、x值（列号）在后。每个位置不仅包含该屏幕位置处的字符，还包含它的属性。</p><h2 id="3-接口函数使用"><a href="#3-接口函数使用" class="headerlink" title="3 接口函数使用"></a>3 接口函数使用</h2><h3 id="3-1-初始化函数initscr和endwin"><a href="#3-1-初始化函数initscr和endwin" class="headerlink" title="3.1 初始化函数initscr和endwin"></a>3.1 初始化函数initscr和endwin</h3><p>​所有的curses程序必须在开始使用curses函数库之前对其进行初始化，并在结束使用后允许curses恢复原先设置。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//initscr函数在一个程序中只能调用一次。如果成功，它返回一个指向stdscr结构的指针；如果失败，它就输出一条诊断错误信息并使程序退出。</span></span><br><span class="line">WINDOW *<span class="title function_">initscr</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//endwin函数在成功时返回OK，失败时返回ERR。你可以先调用endwin函数退出curses，然后通过调用clearok（stdscr,1）和refresh函数继续curses操作。这实际上是首先让curses忘记物理屏幕的样子，然后强迫它执行一次完整的屏幕原文重现。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">endwin</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-输出到屏幕的函数"><a href="#3-2-输出到屏幕的函数" class="headerlink" title="3.2 输出到屏幕的函数"></a>3.2 输出到屏幕的函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//chtype类型比标准的char类型包含更多的二进制位，在ncurses中，chtype是unsigned long型</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addch</span><span class="params">(<span class="type">const</span> chtype char_to_add)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">addchstr</span><span class="params">(chtype *<span class="type">const</span> string_to_add)</span>;</span><br><span class="line"><span class="comment">//add系列函数在光标的当前位置添加指定的字符或字符串。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">printw</span><span class="params">(<span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="comment">//printw函数采用与printf函数相同的方法对字符串进行格式化，然后将其添加到光标的当前位置。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">refresh</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//refresh函数的作用是刷新物理屏幕，成功时返回OK，发生错误时返回ERR。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">box</span><span class="params">(WINDOW *win_ptr, chtype vertical_char, chtype horizontal_char)</span>;</span><br><span class="line"><span class="comment">//box函数用来围绕一个窗口绘制方框。在标准curses函数库中，垂直和水平线字符可能只能使用普通字符。在扩展的curses函数库中，可以使用两个定义ACS_VLINE和ACS_HLINE来分别提供垂直和水平线字符</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insch</span><span class="params">(chtype char_to_insert)</span>;</span><br><span class="line"><span class="comment">//insch函数插入一个字符，将已有字符向右移.</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertln</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//insertln函数的作用是插入一个空白行，将现有行依次向下移一行。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delch</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//delch删除一个字符，已有字符左移</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteln</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//deleteln函数的作用是删除一个行，将现有行依次向上移一行。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">beep</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//beep让程序发出声音，或者屏幕闪烁，优先发出声音。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">flash</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//flash让屏幕闪烁，或者发出声音，优先屏幕闪烁。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-3-读取屏幕"><a href="#3-3-读取屏幕" class="headerlink" title="3.3 读取屏幕"></a>3.3 读取屏幕</h3><p>​可以从屏幕上读取字符。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span></span></span><br><span class="line"><span class="comment">//inch函数总是可用的，但instr和innstr函数并不总被支持。</span></span><br><span class="line"></span><br><span class="line">chtype <span class="title function_">inch</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//inch函数返回光标当前位置的字符及其属性信息。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">instr</span><span class="params">(<span class="type">char</span> *<span class="built_in">string</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">innstr</span><span class="params">(<span class="type">char</span> *<span class="built_in">string</span>, <span class="type">int</span> number_of_charachters)</span>;</span><br><span class="line"><span class="comment">//inch函数返回的并不是一个字符，而是一个chtype类型的变量，而instr和innstr函数则将返回内容写到字符数组中。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-4-清除屏幕"><a href="#3-4-清除屏幕" class="headerlink" title="3.4 清除屏幕"></a>3.4 清除屏幕</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">erase</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//erase函数在每个屏幕位置写上空白字符。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">clear</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//clear函数的功能类似erase函数，它也是用于清屏，但它还通过在内部调用一个底层函数clearok来强制重现屏幕原文。clearok函数会强制执行清屏操作，并在下次调用refresh函数时重现屏幕原文。clear函数是一种可以彻底清除屏幕的可靠方法。</span></span><br><span class="line"><span class="comment">//clear函数和refresh函数的结合提供了一种有效的重新绘制屏幕的手段。</span></span><br><span class="line"><span class="comment">//clear清除的是逻辑屏幕，如果只进行clear，不进行refresh那么屏幕不会刷新</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">clrtobot</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//clrtobot函数清除当前光标位置直到屏幕结尾的所有内容。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">clrtoeol</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//clrtoeol函数清除当前光标位置直到光标所处行行尾的所有内容。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-5-移动光标"><a href="#3-5-移动光标" class="headerlink" title="3.5 移动光标"></a>3.5 移动光标</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> new_y, <span class="type">int</span> new_x)</span>;</span><br><span class="line"><span class="comment">//move函数用来将逻辑光标的位置移到指定地点。记住，屏幕坐标以左上角（0,0）为起点。有两个包含物理屏幕尺寸大小的外部整数LINES和COLUMNS，它们可用于决定参数new_y和new_x的最大可取值。</span></span><br><span class="line"><span class="comment">//调用move函数本身并不会使物理光标移动，它仅改变逻辑屏幕上的光标位置，下次的输出内容就将出现在该位置上。如果希望物理屏幕上的光标位置在调用move函数之后立刻有变化，就需在它之后立刻调用refresh函数。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">leaveok</span><span class="params">(WINDOW *window_ptr, <span class="type">bool</span> leave_flag)</span>;</span><br><span class="line"><span class="comment">//leaveok函数设置了一个标志，该标志用于控制在屏幕刷新后curses将物理光标放置的位置。</span></span><br><span class="line"><span class="comment">//该标志为false，这意味着屏幕刷新后，硬件光标将停留在屏幕上逻辑光标所处的位置。如果该标志被设置为true，则硬件光标会被随机地放置在屏幕上的任意位置。一般来说，默认选项更符合用户的需求，这能确保光标停留在一个有意义的位置。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-6-字符属性"><a href="#3-6-字符属性" class="headerlink" title="3.6 字符属性"></a>3.6 字符属性</h3><p>​每个curses字符都可以有一些属性用于控制该字符在屏幕上的显示方式，前提是用于显示的硬件设备能够支持要求的属性。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//预定义属性有A_BLINK、A_BOLD、A_DIM、A_REVERSE、A_STANDOUT和A_UNDERLINE</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">attron</span><span class="params">(chtype attribute)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">attroff</span><span class="params">(chtype attribute)</span>;</span><br><span class="line"><span class="comment">//attron和attroff函数在不影响其他属性的前提下启用或关闭指定的属性。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">attrset</span><span class="params">(chtype, attribute)</span>;</span><br><span class="line"><span class="comment">//attrset函数设置curses属性。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">standout</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">standend</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//standout和standend函数提供了一种更加通用的强调或“突出”模式，在大多数终端上，它通常被映射为反白显示。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-7-实例程序"><a href="#3-7-实例程序" class="headerlink" title="3.7 实例程序"></a>3.7 实例程序</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nofish_header.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">//对curses初始化</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> witch_one[] = <span class="string">" First Witch  "</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> witch_two[] = <span class="string">" Second Withc "</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *scan_ptr;</span><br><span class="line"></span><br><span class="line">    initscr();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最初要显示的3组文本，它们会以1秒为间隔依次显示在屏幕上。请注意对文本属性标志的开关：</span></span><br><span class="line">    move(<span class="number">5</span>, <span class="number">15</span>);</span><br><span class="line">    attron(A_BOLD);</span><br><span class="line">    printw(<span class="string">"%s"</span>, <span class="string">"Macbeth"</span>);</span><br><span class="line">    attroff(A_BOLD);</span><br><span class="line">    refresh();</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    move(<span class="number">8</span>, <span class="number">15</span>);</span><br><span class="line">    attron(A_STANDOUT);</span><br><span class="line">    printw(<span class="string">"%s"</span>, <span class="string">"Thunder and Lightning"</span>);</span><br><span class="line">    attroff(A_STANDOUT);</span><br><span class="line">    refresh();</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    move(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    printw(<span class="string">"%s"</span>, <span class="string">"When shall we three meet again"</span>);</span><br><span class="line">    move(<span class="number">11</span>, <span class="number">23</span>);</span><br><span class="line">    printw(<span class="string">"%s"</span>, <span class="string">"In thunder, lightning, or in rain ?"</span>);</span><br><span class="line">    move(<span class="number">13</span>, <span class="number">10</span>);</span><br><span class="line">    printw(<span class="string">"%s"</span>, <span class="string">"When the hurlyburly's done,"</span>);</span><br><span class="line">    move(<span class="number">14</span>, <span class="number">23</span>);</span><br><span class="line">    printw(<span class="string">"%s"</span>, <span class="string">"When the battle's lost and win."</span>);</span><br><span class="line">    refresh();</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//确定演员并将他们的名字以一次一个字符的方式插入到指定的位置</span></span><br><span class="line">    attron(A_DIM);</span><br><span class="line">    scan_ptr = witch_one + <span class="built_in">strlen</span>(witch_one) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(scan_ptr != witch_one) {</span><br><span class="line">        move(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        insch(*scan_ptr--);</span><br><span class="line">    }</span><br><span class="line">    scan_ptr = witch_two + <span class="built_in">strlen</span>(witch_two) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(scan_ptr != witch_two) {</span><br><span class="line">        move(<span class="number">13</span>, <span class="number">10</span>);</span><br><span class="line">        insch(*scan_ptr--);</span><br><span class="line">    }</span><br><span class="line">    attroff(A_DIM);</span><br><span class="line">    refresh();</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将光标移动到屏幕的右下角，然后结束程序</span></span><br><span class="line">    move(LINES - <span class="number">1</span>, COLS - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    refresh();</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    endwin();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/ji-yu-wen-ben-de-ping-mu-curses-han-shu-ku/image-20240510105843582.png" alt="image-20240510105843582"></p><h2 id="4-键盘控制接口函数"><a href="#4-键盘控制接口函数" class="headerlink" title="4 键盘控制接口函数"></a>4 键盘控制接口函数</h2><p>​curses函数库不仅提供了控制屏幕显示的易用接口，还提供了控制键盘的简单方法。</p><h3 id="4-1-键盘模式接口"><a href="#4-1-键盘模式接口" class="headerlink" title="4.1 键盘模式接口"></a>4.1 键盘模式接口</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">echo</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">noecho</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//两个echo函数用于开启或关闭输入字符的回显功能。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cbreak</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">nocbreak</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//cbreak关闭默认的行缓冲处理模式，使得字符一经键入就被立刻传递给程序，但是特殊字符产生的信号还是会保留，但在这种模式下，退格键也会被直接传递，失去原有功能</span></span><br><span class="line"><span class="comment">//nocbreak函数调用将输入模式重新设置为cooked模式，但特殊字符的处理方式保持不变。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">raw</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">noraw</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//raw函数调用的作用是关闭特殊字符的处理，所以执行该函数调用后，再想通过输入特殊字符序列来产生信号或进行流控就不可能了。</span></span><br><span class="line"><span class="comment">//noraw函数调用同时恢复cooked模式和特殊字符处理功能</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-2-键盘输入"><a href="#4-2-键盘输入" class="headerlink" title="4.2 键盘输入"></a>4.2 键盘输入</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getch</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getstr</span><span class="params">(<span class="type">char</span> *<span class="built_in">string</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getnstr</span><span class="params">(<span class="type">char</span> *sting, <span class="type">int</span> number_of_characters)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">scanw</span><span class="params">(<span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="comment">//和头文件&lt;stdio.h&gt;里面的输入函数getchar、gets和scanf非常相似行为基本一致</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-3-实例程序"><a href="#4-3-实例程序" class="headerlink" title="4.3 实例程序"></a>4.3 实例程序</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nofish_header.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PW_LEN 256</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAME_LEN 256</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">//设置程序并执行初始化curses函数库的调用</span></span><br><span class="line">    <span class="type">char</span> name[NAME_LEN];</span><br><span class="line">    <span class="type">char</span> password[PW_LEN];</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *real_password = <span class="string">"xyzzy"</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    initscr();</span><br><span class="line"></span><br><span class="line">    move(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">    printw(<span class="string">"%s"</span>, <span class="string">"Please login:"</span>);</span><br><span class="line"></span><br><span class="line">    move(<span class="number">7</span>, <span class="number">10</span>);</span><br><span class="line">    printw(<span class="string">"%s"</span>, <span class="string">"User name: "</span>);</span><br><span class="line">    getstr(name);</span><br><span class="line"></span><br><span class="line">    move(<span class="number">8</span>, <span class="number">10</span>);</span><br><span class="line">    printw(<span class="string">"%s"</span>, <span class="string">"Password: "</span>);</span><br><span class="line">    refresh();</span><br><span class="line">    <span class="comment">//用户输入密码时，你不能让密码回显在屏幕上。然后，检查用户输入的密码是否等于xyzzy</span></span><br><span class="line">    cbreak();</span><br><span class="line">    noecho();</span><br><span class="line">    <span class="built_in">memset</span>(password, <span class="number">0</span>, <span class="keyword">sizeof</span>(password));</span><br><span class="line">    <span class="keyword">while</span>(i &lt; PW_LEN) {</span><br><span class="line">        password[i] = getch();</span><br><span class="line">        <span class="keyword">if</span> (password[i] == <span class="string">'\n'</span>) <span class="keyword">break</span>;</span><br><span class="line">        move(<span class="number">8</span>, <span class="number">20</span> + i);</span><br><span class="line">        addch(<span class="string">'*'</span>);</span><br><span class="line">        refresh();</span><br><span class="line">        i++;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//最后，重新启用键盘回显，并给出密码验证成功或失败的信息</span></span><br><span class="line">    echo();</span><br><span class="line">    nocbreak();</span><br><span class="line"></span><br><span class="line">    move(<span class="number">11</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strncmp</span>(real_password, password, <span class="built_in">strlen</span>(real_password)) == <span class="number">0</span>) {</span><br><span class="line">        printw(<span class="string">"%s"</span>, <span class="string">"Correct"</span>);</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        printw(<span class="string">"%s"</span>, <span class="string">" Wrong"</span>);</span><br><span class="line">    }</span><br><span class="line">    printw(<span class="string">"%s"</span>, <span class="string">" password"</span>);</span><br><span class="line">    refresh();</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    endwin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/ji-yu-wen-ben-de-ping-mu-curses-han-shu-ku/image-20240510114427026.png" alt="image-20240510114427026"></p><h2 id="5-窗口控制"><a href="#5-窗口控制" class="headerlink" title="5 窗口控制"></a>5 窗口控制</h2><p>​可以用curses函数库在物理屏幕上同时显示多个不同尺寸的窗口。</p><h3 id="5-1-初始化窗口"><a href="#5-1-初始化窗口" class="headerlink" title="5.1 初始化窗口"></a>5.1 初始化窗口</h3><p>​标准屏幕stdscr只是WINDOW结构的一个特例，就像标准输出stdout是文件流的一个特例一样。WINDOW结构通常定义在头文件curses.h中，虽然研究该结构是有意义的，但程序应该永远都不要直接访问它，因为该结构在不同的curses版本中的实现方式不同。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">WINDOW *<span class="title function_">newwin</span><span class="params">(<span class="type">int</span> num_of_lines, <span class="type">int</span> num_of_cols, <span class="type">int</span> start_y, <span class="type">int</span> start_x)</span>;</span><br><span class="line"><span class="comment">//newwin函数的作用是创建一个新窗口，该窗口从屏幕位置（start_y, start_x）开始，行数和列数分别由参数num_of_lines和num_of_cols指定。它返回一个指向新窗口的指针，如果新窗口创建失败则返回null。</span></span><br><span class="line"><span class="comment">//该函数的行、列参数设为0，那么新窗口的右下角就正好落在屏幕的右下角</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delwin</span> <span class="params">(WINDOW *window_to_delete)</span>;</span><br><span class="line"><span class="comment">//delwin函数的作用是删除一个先前通过newwin函数创建的窗口。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-通用函数进行窗口设置"><a href="#5-2-通用函数进行窗口设置" class="headerlink" title="5.2 通用函数进行窗口设置"></a>5.2 通用函数进行窗口设置</h3><p>​前面的所有接口函数，都可以通过加上一些前缀变为通用函数，前缀w用于窗口、mv用于光标移动、mvw用于在窗口中移动光标。</p><ul><li>w前缀：在该函数的参数表的最前面增加一个WINDOW指针参数。</li><li>mv前缀：在函数的参数表的最前面增加两个参数，分别是纵坐标y和横坐标x。坐标值y和x是相对于窗口而不是相对于屏幕的，坐标（0,0）代表窗口的左上角。</li><li>mvw前缀：多传递3个参数，它们分别是一个WINDOW指针、y和x坐标值，WINDOWS指针参数总是出现在屏幕坐标值之前。</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">addch</span><span class="params">(<span class="type">const</span> chtype <span class="type">char</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">waddch</span><span class="params">(WINDOW *window_pointer, <span class="type">const</span> chtype <span class="type">char</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">mvaddch</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> x, <span class="type">const</span> chtype <span class="type">char</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">mvwaddch</span><span class="params">(WINDOW *window_pointer, <span class="type">int</span> y, <span class="type">int</span> x, <span class="type">const</span> chtype <span class="type">char</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">printw</span><span class="params">(<span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">wprintw</span><span class="params">(WINDOW *window_pointer, <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">mvprintw</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> x, <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">mvwprintw</span><span class="params">(WINDOW *window_pointer, <span class="type">int</span> y, <span class="type">int</span> x, <span class="type">char</span> *format, ...)</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="5-3-移动和更新窗口"><a href="#5-3-移动和更新窗口" class="headerlink" title="5.3 移动和更新窗口"></a>5.3 移动和更新窗口</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mvwin</span><span class="params">(WINDOW *window_to_move, <span class="type">int</span> new_y, <span class="type">int</span> new_x)</span>;</span><br><span class="line"><span class="comment">//mvwin函数的作用是在屏幕上移动一个窗口。因为不允许窗口的任何部分超出屏幕范围，所以如果在调用mvwin函数时，将窗口的某个部分移动到屏幕区域之外，mvwin函数调用将会失败。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">wrefresh</span><span class="params">(WINDOW *window_ptr)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">wclear</span><span class="params">(WINDOW *window_ptr)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">werase</span><span class="params">(WINDOW *window_ptr)</span>;</span><br><span class="line"><span class="comment">//wrefresh、wclear和werases函数分别是前面介绍的refresh、clear和erases函数的通用版本。可针对特定的窗口进行操作.</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">touchwin</span><span class="params">(WINDOW *window_ptr)</span>;</span><br><span class="line"><span class="comment">//配合wrefresh使用，重新绘制窗口。当屏幕上重叠着多个窗口时，你可以通过该函数来安排要显示的窗口。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">scrollok</span><span class="params">(WINDOW *window_ptr, <span class="type">bool</span> scroll_flag)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">scroll</span><span class="params">(WINDOW *window_ptr)</span>;</span><br><span class="line"><span class="comment">//两个scroll函数控制窗口的卷屏。如果传递给scrollok函数的是布尔值true（通常是非零值），则允许窗口卷屏。默认情况下，窗口是不能卷屏的。scroll函数的作用只是把窗口内容上卷一行。</span></span><br><span class="line"><span class="comment">//如果不允许卷屏，一旦输出超出屏幕末尾，多余输出就看不见了</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-4-实例程序：多窗口管理"><a href="#5-4-实例程序：多窗口管理" class="headerlink" title="5.4 实例程序：多窗口管理"></a>5.4 实例程序：多窗口管理</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nofish_header.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">//窗口初始化定义</span></span><br><span class="line">    WINDOW *new_window_ptr;</span><br><span class="line">    WINDOW *popup_window_ptr;</span><br><span class="line">    <span class="type">int</span> x_loop;</span><br><span class="line">    <span class="type">int</span> y_loop;</span><br><span class="line">    <span class="type">char</span> a_letter = <span class="string">'a'</span>;</span><br><span class="line">    initscr();</span><br><span class="line">    <span class="comment">//字符填充基本窗口</span></span><br><span class="line">    move(<span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">    printw(<span class="string">"%s"</span>, <span class="string">"Testing multiple windows"</span>);</span><br><span class="line">    refresh();</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(y_loop = <span class="number">0</span>; y_loop &lt; LINES; y_loop++) {</span><br><span class="line">        <span class="keyword">for</span>(x_loop = <span class="number">0</span>; x_loop &lt; COLS; x_loop++) {</span><br><span class="line">            mvwaddch(stdscr, y_loop, x_loop, a_letter);</span><br><span class="line">            a_letter++;</span><br><span class="line">            <span class="keyword">if</span> (a_letter &gt; <span class="string">'z'</span>) a_letter = <span class="string">'a'</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新屏幕</span></span><br><span class="line">    refresh();</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个尺寸为10×20的新窗口，为它添加一些文本，然后将该窗口绘制到屏幕上</span></span><br><span class="line">    new_window_ptr = newwin(<span class="number">10</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">    mvwprintw(new_window_ptr, <span class="number">2</span>, <span class="number">2</span>, <span class="string">"%s"</span>, <span class="string">"Hello World"</span>);</span><br><span class="line">    mvwprintw(new_window_ptr, <span class="number">5</span>, <span class="number">2</span>, <span class="string">"%s"</span>,</span><br><span class="line">              <span class="string">"Notice how very long lines wrap inside the window"</span>);</span><br><span class="line">    wrefresh(new_window_ptr);</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//对背景窗口中的内容做些修改。当再次刷新屏幕时，new_window_ptr指向的窗口将被遮盖住：</span></span><br><span class="line">    a_letter = <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">for</span> (y_loop = <span class="number">0</span>; y_loop &lt; LINES; y_loop++) {</span><br><span class="line">        <span class="keyword">for</span> (x_loop = <span class="number">0</span>; x_loop &lt; COLS; x_loop++) {</span><br><span class="line">            mvwaddch(stdscr, y_loop, x_loop, a_letter);</span><br><span class="line">            a_letter++;</span><br><span class="line">            <span class="keyword">if</span> (a_letter &gt; <span class="string">'9'</span>){</span><br><span class="line">                a_letter = <span class="string">'0'</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    refresh();</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//如果调用wrefresh来刷新新窗口，则什么也不会发生，因为你并未对新窗口做过改动：</span></span><br><span class="line">    wrefresh(new_window_ptr);</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//但如果先对新窗口调用一次touchwin函数，让curses误以为新窗口中的内容已发</span></span><br><span class="line">    <span class="comment">//生变化，则下一个wrefresh函数调用将再次把新窗口调到屏幕的最前面：</span></span><br><span class="line">    touchwin(new_window_ptr);</span><br><span class="line">    wrefresh(new_window_ptr);</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//接下来，再增加另一个加框的重叠窗口：</span></span><br><span class="line">    popup_window_ptr = newwin(<span class="number">10</span>, <span class="number">20</span>, <span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">    box(popup_window_ptr, ACS_VLINE, ACS_HLINE);</span><br><span class="line">    mvwprintw(popup_window_ptr, <span class="number">5</span>, <span class="number">2</span>, <span class="string">"%s"</span>, <span class="string">"Pop Up Window!"</span>);</span><br><span class="line">    wrefresh(popup_window_ptr);</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//然后，在清屏和删除这两个新窗口之前在屏幕上轮流显示它们：</span></span><br><span class="line">    touchwin(new_window_ptr);</span><br><span class="line">    wrefresh(new_window_ptr);</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    wclear(new_window_ptr);</span><br><span class="line">    wrefresh(new_window_ptr);</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    delwin(new_window_ptr);</span><br><span class="line">    touchwin(popup_window_ptr);</span><br><span class="line">    wrefresh(popup_window_ptr);</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    delwin(popup_window_ptr);</span><br><span class="line">    touchwin(stdscr);</span><br><span class="line">    refresh();</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    endwin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/ji-yu-wen-ben-de-ping-mu-curses-han-shu-ku/image-20240510204217747.png" alt="image-20240510204217747"></p><p><img src="/2024/05/11/ji-yu-wen-ben-de-ping-mu-curses-han-shu-ku/image-20240510204258277.png" alt="image-20240510204258277"></p><p>​注意：这里出现了一个bug，那就是多窗口绘制在有字符的窗口上，会出现奇怪的乱码字符，目前未找到解决办法。</p><h3 id="5-5-优化屏幕刷新"><a href="#5-5-优化屏幕刷新" class="headerlink" title="5.5 优化屏幕刷新"></a>5.5 优化屏幕刷新</h3><p>​curses函数库提供了一种特殊手段，可以尽量减少需要在屏幕上绘制的字符数目。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">wnoutrefresh</span><span class="params">(WINDOW *window_ptr)</span>;</span><br><span class="line"><span class="comment">//wnoutrefresh函数用于决定把哪些字符发送到屏幕上，但它并不真正地发送这些字符，真正将更新发送到终端的工作由doupdate函数来完成。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">doupdate</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//只是调用wnoutrefresh函数，然后立刻调用doupdate函数，则它的效果与直接调用wrefresh完全一样。</span></span><br><span class="line"><span class="comment">//重新绘制多个窗口，可以为每个窗口分别调用wnoutrefresh函数（当然要按正确的顺序来操作），然后只需在调用最后一个wnoutrefresh之后调用一次doupdate函数即可。</span></span><br><span class="line"><span class="comment">//curses仅把最终的更新结果输出到屏幕上。这种做法可以最大限度地减少curses需要发送的字符数目。</span></span><br></pre></td></tr></tbody></table></figure><h2 id="6-子窗口"><a href="#6-子窗口" class="headerlink" title="6 子窗口"></a>6 子窗口</h2><h3 id="6-1-子窗口初始化"><a href="#6-1-子窗口初始化" class="headerlink" title="6.1 子窗口初始化"></a>6.1 子窗口初始化</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">WINDOW *<span class="title function_">subwin</span><span class="params">(</span></span><br><span class="line"><span class="params">    WINDOW *parent, </span></span><br><span class="line"><span class="params">    <span class="type">int</span> num_of_lines, </span></span><br><span class="line"><span class="params">    <span class="type">int</span> num_of_cols, </span></span><br><span class="line"><span class="params">    <span class="type">int</span> start_y, </span></span><br><span class="line"><span class="params">    <span class="type">int</span> start_x</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"><span class="comment">//创建一个子窗口，和创建多窗口没有区别，子窗口没有自己独立的屏幕字符存储空间，它们与其父窗口（在创建子窗口时指定）共享同一字符存储空间。这意味着，对子窗口中内容的任何修改都会反映到其父窗口中，所以删除子窗口时，屏幕显示不会发生任何变化。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delwin</span><span class="params">(WINDOW *window_to_delete)</span>;</span><br><span class="line"><span class="comment">//删除一个子窗口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//子窗口最主要的用途是，提供了一种简洁的方式来卷动另一窗口里的部分内容。在编写curses程序时，我们经常会需要卷动屏幕的某个小区域。通过将这个小区域定义为一个子窗口，然后对其进行卷动，就能达到我们想要的效果。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6-2-实例程序：子窗口"><a href="#6-2-实例程序：子窗口" class="headerlink" title="6.2 实例程序：子窗口"></a>6.2 实例程序：子窗口</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nofish_header.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">//初始化基本窗口</span></span><br><span class="line">    WINDOW *sub_window_ptr;</span><br><span class="line">    <span class="type">int</span> x_loop;</span><br><span class="line">    <span class="type">int</span> y_loop;</span><br><span class="line">    <span class="type">int</span> counter;</span><br><span class="line">    <span class="type">char</span> a_letter = <span class="string">'1'</span>;</span><br><span class="line"></span><br><span class="line">    initscr();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (y_loop = <span class="number">0</span>; y_loop &lt; LINES; y_loop++) {</span><br><span class="line">        <span class="keyword">for</span> (x_loop = <span class="number">0</span>; x_loop &lt; COLS; x_loop++) {</span><br><span class="line">            mvwaddch(stdscr, y_loop, x_loop, a_letter);</span><br><span class="line">            a_letter++;</span><br><span class="line">            <span class="keyword">if</span> (a_letter &gt; <span class="string">'9'</span>) {</span><br><span class="line">                a_letter = <span class="string">'1'</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//创建一个新的卷动的子窗口。必须在刷新屏幕之前对父窗口调用touchwin函数</span></span><br><span class="line">    sub_window_ptr = subwin(stdscr, <span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    scrollok(sub_window_ptr, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    touchwin(stdscr);</span><br><span class="line">    refresh();</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除子窗口中的内容，重新输出一些文字，然后刷新它。滚动文本是通过loop循环来实现的</span></span><br><span class="line">    werase(sub_window_ptr);</span><br><span class="line">    mvwprintw(sub_window_ptr, <span class="number">2</span>, <span class="number">0</span>, <span class="string">"%s"</span>, <span class="string">"This window will now scroll"</span>);</span><br><span class="line">    wrefresh(sub_window_ptr);</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(counter = <span class="number">1</span>; counter &lt; <span class="number">10</span>; counter++) {</span><br><span class="line">        wprintw(sub_window_ptr, <span class="string">"%s"</span>, <span class="string">"This text is both wrapping and scrolling."</span>);</span><br><span class="line">        wrefresh(sub_window_ptr);</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//循环结束后，删除子窗口，然后再次刷新基本屏幕</span></span><br><span class="line">    delwin(sub_window_ptr);</span><br><span class="line">    touchwin(stdscr);</span><br><span class="line">    refresh();</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    endwin();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/ji-yu-wen-ben-de-ping-mu-curses-han-shu-ku/image-20240510211039549.png" alt="image-20240510211039549"></p><h2 id="7-keypad模式"><a href="#7-keypad模式" class="headerlink" title="7 keypad模式"></a>7 keypad模式</h2><h3 id="7-1-keypad用途"><a href="#7-1-keypad用途" class="headerlink" title="7.1 keypad用途"></a>7.1 keypad用途</h3><p>​用于处理特殊逻辑按键诸如数字小键盘、Insert、Home等，因为curses在启动时会关闭转义序列与逻辑键之间的转换功能，该功能需要通过调用keypad函数来启用。该函数调用成功时，返回OK，否则就返回ERR。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">keypad</span><span class="params">(WINDOW *window_ptr, <span class="type">bool</span> keypad_on)</span>;</span><br><span class="line"><span class="comment">//将keypad_on参数设置为true，然后调用keypad函数来启用keypad模式。在该模式中，curses将接管按键转义序列的处理工作，读键盘操作不仅能够返回用户按下的键，还将返回与逻辑按键对应的KEY_定义。</span></span><br></pre></td></tr></tbody></table></figure><ul><li>识别escape转义序列的过程是与时间相关的。</li><li>为了让curses能够区分“单独按下Escape键”和“一个以Escape字符开头的键盘转义序列”，它必须等待一小段时间。有时候，在启用了keypad模式后，处理Escape按键所造成的非常细微的延时都可能会被注意到。</li><li>curses不能处理二义性的escape转义序列。如果终端上两个不同的按键会产生完全相同的转义序列，curses将不会处理这个转义序列，因为它不知道该返回哪个逻辑按键。</li></ul><h3 id="7-2-实例程序：使用keypad模式"><a href="#7-2-实例程序：使用keypad模式" class="headerlink" title="7.2 实例程序：使用keypad模式"></a>7.2 实例程序：使用keypad模式</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nofish_header.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOCAL_ESCAPE_KEY 27</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">//首先对程序和curses函数库进行初始化，然后启用keypad模式</span></span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    initscr();</span><br><span class="line">    crmode();</span><br><span class="line">    keypad(stdscr, TRUE);</span><br><span class="line">    <span class="comment">//关闭回显功能以防止光标在你按下方向键时发生移动。</span></span><br><span class="line">    <span class="comment">//然后清屏并显示一些文本。程序将等待用户的击键动作，</span></span><br><span class="line">    <span class="comment">//除非用户的按键是字母Q或发生了错误，否则按键所对应的字符将显示在屏幕上。</span></span><br><span class="line">    <span class="comment">//如果按键匹配终端上的某个转义序列，就把这个转义序列显示在屏幕上：</span></span><br><span class="line">    noecho();</span><br><span class="line">    clear();</span><br><span class="line">    mvprintw(<span class="number">5</span>, <span class="number">5</span>, <span class="string">"Key pad demonstration. Press 'q' to quit"</span>);</span><br><span class="line">    move(<span class="number">7</span>, <span class="number">5</span>);</span><br><span class="line">    refresh();</span><br><span class="line">    key = getch();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(key != ERR &amp;&amp; key != <span class="string">'q'</span>) {</span><br><span class="line">        move(<span class="number">7</span>, <span class="number">5</span>);</span><br><span class="line">        clrtoeol();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((key &gt;= <span class="string">'A'</span> &amp;&amp; key &lt;= <span class="string">'Z'</span>) || </span><br><span class="line">            (key &gt;= <span class="string">'a'</span> &amp;&amp; key &lt;= <span class="string">'z'</span>)) {</span><br><span class="line">            printw(<span class="string">"Key was %c"</span>, (<span class="type">char</span>) key);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">switch</span>(key) {</span><br><span class="line">            <span class="keyword">case</span> LOCAL_ESCAPE_KEY: printw(<span class="string">"%s"</span>, <span class="string">"Escape key"</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KEY_END: printw(<span class="string">"%s"</span>, <span class="string">"END key"</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KEY_BEG: printw(<span class="string">"%s"</span>, <span class="string">"BEGINNING key"</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KEY_RIGHT: printw(<span class="string">"%s"</span>, <span class="string">"RUGHT key"</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KEY_LEFT: printw(<span class="string">"%s"</span>, <span class="string">"LEFT key"</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KEY_UP: printw(<span class="string">"%s"</span>, <span class="string">"UP key"</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KEY_DOWN: printw(<span class="string">"DOWN key"</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: printw(<span class="string">"Unmatched - %d"</span>, key); <span class="keyword">break</span>;</span><br><span class="line">            }<span class="comment">//switch</span></span><br><span class="line">        }<span class="comment">//else</span></span><br><span class="line">        refresh();</span><br><span class="line">        key = getch();</span><br><span class="line">    }<span class="comment">//while</span></span><br><span class="line">    endwin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/ji-yu-wen-ben-de-ping-mu-curses-han-shu-ku/image-20240510214900551.png" alt="image-20240510214900551"></p><p>​在启用keypad模式之后，可以看到该模式是如何识别键盘上的各种其他按键的，这些按键都将生成escape转义序列。注意到Escape键的检测要略慢于其他按键。</p><h2 id="8-彩色显示"><a href="#8-彩色显示" class="headerlink" title="8 彩色显示"></a>8 彩色显示</h2><p>​屏幕上的每个字符位置都可以从多种颜色中选择一种作为它的前景色或背景色。例如，你可以在红色背景上写绿色的文本。</p><p>​curses函数库对颜色的支持有些与众不同，即字符颜色的定义及其背景色的定义并不完全独立。你必须同时定义一个字符的前景色和背景色，我们将它称之为颜色组合（color pair）。</p><h3 id="8-1-初始化颜色例程"><a href="#8-1-初始化颜色例程" class="headerlink" title="8.1 初始化颜色例程"></a>8.1 初始化颜色例程</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">has_colors</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//如果终端支持彩色显示，has_colors函数将返回true。然后，你需要调用start_color函数，如果该函数成功初始化了颜色显示功能，它将返回OK。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">start_color</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//一旦start_color函数被成功调用</span></span><br><span class="line"><span class="comment">//COLOR_PAIRS：被设置为终端所能支持的颜色组合数目的最大值，一般常见的最大值为64。</span></span><br><span class="line"><span class="comment">//COLORS： 定义可用颜色数目的最大值，一般只有8种。</span></span><br><span class="line"><span class="comment">//在内部实现中，每种可用的颜色以一个从0到63的数字作为其唯一的ID号。</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">init_pair</span><span class="params">(<span class="type">short</span> pair_number, <span class="type">short</span> foreground, <span class="type">short</span> background)</span>;</span><br><span class="line"><span class="comment">//在把颜色作为属性使用之前，必须首先调用init_pair函数对准备使用的颜色组合进行初始化。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">COLOR_PAIR</span><span class="params">(<span class="type">int</span> pair_number)</span>;</span><br><span class="line"><span class="comment">//对颜色属性的访问是通过COLOR_PAIR函数来完成的</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pair_content</span><span class="params">(<span class="type">short</span> pair_number, <span class="type">short</span> *foreground, <span class="type">short</span> *background)</span>;</span><br><span class="line"><span class="comment">//pair_content，它的作用是获取已定义的颜色组合的信息。</span></span><br><span class="line"><span class="comment">//头文件curses.h通常会定义一些基本颜色，它们的名字以COLOR_为前缀。</span></span><br></pre></td></tr></tbody></table></figure><p>​示例语句：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">init_pair(<span class="number">1</span>, COLOR_RED, COLOR_GREEN);</span><br><span class="line"><span class="comment">//将红色前景绿色背景定义为一号颜色组合</span></span><br><span class="line">wattron(window_ptr, COLOR_PAIR(<span class="number">1</span>));</span><br><span class="line"><span class="comment">//通过调用COLOR_PAIR函数，将该颜色组合作为属性来访问，把屏幕上后续添加的内容设置为绿色背景上的红色内容。可以搭配wattroff进行组合，将某个区域的屏幕内容进行颜色设置</span></span><br><span class="line">wattron(window_ptr, COLOR_PAIR(<span class="number">1</span>) | A_BOLD);</span><br><span class="line"><span class="comment">//COLOR_PAIR就是一个属性，所以可以把它与其他属性结合起来。在个人电脑上，你通常通过“按位或”将COLOR_PAIR属性和附加属性A_BOLD相结合来实现高浓度的颜色</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-2-实例程序：彩色"><a href="#8-2-实例程序：彩色" class="headerlink" title="8.2 实例程序：彩色"></a>8.2 实例程序：彩色</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nofish_header.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">//首先检查这个程序的显示终端是否支持彩色显示，如果支持，就启用彩色显示</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    initscr();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!has_colors()) {</span><br><span class="line">        endwin();</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error - no color support on this terminal\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (start_color() != OK) {</span><br><span class="line">        endwin();</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error - could not initialize colors\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印出终端可用颜色数目的最大值及支持的颜色组合的最大值。</span></span><br><span class="line">    <span class="comment">//然后，程序创建7个颜色组合并一次显示一个</span></span><br><span class="line">    clear();</span><br><span class="line">    mvprintw(<span class="number">5</span>, <span class="number">5</span>, <span class="string">"There are %d COLORS, and %d COLOR_PAIRS available"</span>,</span><br><span class="line">             COLORS, COLOR_PAIRS);</span><br><span class="line">    refresh();</span><br><span class="line"></span><br><span class="line">    init_pair(<span class="number">1</span>, COLOR_RED, COLOR_BLACK);</span><br><span class="line">    init_pair(<span class="number">2</span>, COLOR_RED, COLOR_GREEN);</span><br><span class="line">    init_pair(<span class="number">3</span>, COLOR_GREEN, COLOR_RED);</span><br><span class="line">    init_pair(<span class="number">4</span>, COLOR_YELLOW, COLOR_BLUE);</span><br><span class="line">    init_pair(<span class="number">5</span>, COLOR_BLACK, COLOR_WHITE);</span><br><span class="line">    init_pair(<span class="number">6</span>, COLOR_MAGENTA, COLOR_BLUE);</span><br><span class="line">    init_pair(<span class="number">7</span>, COLOR_CYAN, COLOR_WHITE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; ++i) {</span><br><span class="line">        attroff(A_BOLD);</span><br><span class="line">        attron(COLOR_PAIR(i));</span><br><span class="line">        mvprintw(<span class="number">5</span> + i, <span class="number">5</span>, <span class="string">"Color pair %d"</span>, i);</span><br><span class="line">        attrset(COLOR_PAIR(i) | A_BOLD);</span><br><span class="line">        mvprintw(<span class="number">5</span> + i, <span class="number">25</span>, <span class="string">"Bold color pair %d"</span>, i);</span><br><span class="line">        refresh();</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    endwin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/ji-yu-wen-ben-de-ping-mu-curses-han-shu-ku/image-20240510223132090.png" alt="image-20240510223132090"></p><p>​注意：每次设置的颜色可以被后面的颜色设置覆盖，如果不是直接回归默认颜色设定，不需要再使用<code>attroff</code>和<code>attron</code>配合使用，直接使用新的颜色属性覆盖即可。</p><h2 id="9-pad：逻辑屏幕大于物理屏幕"><a href="#9-pad：逻辑屏幕大于物理屏幕" class="headerlink" title="9 pad：逻辑屏幕大于物理屏幕"></a>9 pad：逻辑屏幕大于物理屏幕</h2><p>​数据结构pad可以控制尺寸大于正常窗口的逻辑屏幕，一次只显示该逻辑屏幕的某个部分。</p><p>​pad结构非常类似WINDOW结构，所有执行写窗口操作的curses函数同样可用于pad。pad还有其自己的创建函数和刷新函数。</p><h3 id="9-1-pad的创建"><a href="#9-1-pad的创建" class="headerlink" title="9.1 pad的创建"></a>9.1 pad的创建</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">WINDOW *<span class="title function_">newpad</span><span class="params">(<span class="type">int</span> number_of_lines, <span class="type">int</span> number_of_colums)</span>;</span><br><span class="line"><span class="comment">//创建一个指定 行x列 的pad虚拟屏幕。</span></span><br><span class="line"><span class="comment">//个函数的返回值是一个指向WINDOW结构的指针，这一点与newwin函数相同。pad用delwin函数来删除，这与正常窗口的删除一样。</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pad使用不同的函数执行刷新操作。因为一个pad并不局限于某个特定的屏幕位置，所以必须指定希望放到屏幕上的pad范围及其放置在屏幕上的位置。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curses.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">prefresh</span><span class="params">(WINDOW *pad_ptr, <span class="type">int</span> pad_row, int_pad_colum,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> screen_row_min, <span class="type">int</span> screen_col_min,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> screen_row_max, <span class="type">int</span> screen_col_max)</span>;</span><br><span class="line"><span class="comment">//将pad从坐标（pad_row, pad_column）开始的区域写到屏幕上指定的显示区域，该显示区域的范围从坐标（screen_row_min, screen_col_min）到（screen_row_max,screen_col_max）。</span></span><br><span class="line"><span class="comment">//curses还提供了函数pnoutrefresh，它的作用与函数wnoutrefresh一样，都是为了更有效地更新屏幕。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="9-2-实例程序：pad使用"><a href="#9-2-实例程序：pad使用" class="headerlink" title="9.2 实例程序：pad使用"></a>9.2 实例程序：pad使用</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nofish_header.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">//在程序的开始首先初始化pad结构，然后创建一个pad，</span></span><br><span class="line">    <span class="comment">//创建pad的函数将返回一个指向该pad的指针。</span></span><br><span class="line">    <span class="comment">//用字符填充这个pad结构（它比终端显示区域的长度及宽度各多出50个字符）</span></span><br><span class="line">    WINDOW *pad_ptr;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="type">int</span> pad_lines;</span><br><span class="line">    <span class="type">int</span> pad_cols;</span><br><span class="line">    <span class="type">char</span> disp_char;</span><br><span class="line"></span><br><span class="line">    initscr();</span><br><span class="line">    pad_lines = LINES + <span class="number">50</span>;</span><br><span class="line">    pad_cols = COLS + <span class="number">50</span>;</span><br><span class="line">    pad_ptr = newpad(pad_lines, pad_cols);</span><br><span class="line">    disp_char = <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; pad_lines; ++x) {</span><br><span class="line">        <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; pad_cols; ++y) {</span><br><span class="line">            mvwaddch(pad_ptr, x, y, disp_char);</span><br><span class="line">            <span class="keyword">if</span>(disp_char == <span class="string">'z'</span>) {</span><br><span class="line">                disp_char = <span class="string">'a'</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                disp_char++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//现在将pad的不同区域绘制到屏幕的不同位置上，然后结束程序</span></span><br><span class="line">    prefresh(pad_ptr, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">9</span>);</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    prefresh(pad_ptr, LINES + <span class="number">5</span>, COLS + <span class="number">7</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">19</span>);</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    delwin(pad_ptr);</span><br><span class="line">    endwin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/ji-yu-wen-ben-de-ping-mu-curses-han-shu-ku/image-20240511100338150.png" alt="image-20240511100338150"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux线程以及相关接口</title>
      <link href="/2024/05/11/xian-cheng/"/>
      <url>/2024/05/11/xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux线程以及相关接口"><a href="#Linux线程以及相关接口" class="headerlink" title="Linux线程以及相关接口"></a>Linux线程以及相关接口</h1><h2 id="1-线程定义"><a href="#1-线程定义" class="headerlink" title="1 线程定义"></a>1 线程定义</h2><p>​线程是一个进程内部的一个控制序列。当在进程中创建一个新线程时，新的执行线程将拥有自己的栈（因此也有自己的局部变量），但与它的创建者共享全局变量、文件描述符、信号处理函数和当前目录状态。</p><h2 id="2-线程有点和缺点"><a href="#2-线程有点和缺点" class="headerlink" title="2 线程有点和缺点"></a>2 线程有点和缺点</h2><h3 id="2-1-线程优点"><a href="#2-1-线程优点" class="headerlink" title="2.1 线程优点"></a>2.1 线程优点</h3><ul><li>可以高效的完成多任务工作。</li><li>一个应用程序可以使用线程来分配不同部分的工作。</li><li>线程的切换要比进程切换的开销小得多。</li></ul><h3 id="2-2-线程缺点"><a href="#2-2-线程缺点" class="headerlink" title="2.2 线程缺点"></a>2.2 线程缺点</h3><ul><li>多线程程序编写复杂，细节很多容易出错。</li><li>多线程调试困难，线程交互难以控制。</li><li>线程分部计算不一定加速程序运行。</li></ul><h2 id="3-线程接口"><a href="#3-线程接口" class="headerlink" title="3 线程接口"></a>3 线程接口</h2><p>​线程函数调用多数都是以<code>pthread_</code>开头，使用这些函数调用需要定义宏<code>_REENTRSNT</code>（开启可重入功能，多线程环境下，某些函数使用全局变量，会导致线程不安全，为了线程安全，需要使用部分函数的可重入版本），使用头文件<code>pthread.h</code>，添加编译选项<code>-lpthread</code>。</p><h3 id="3-1-线程的创建pthread-create"><a href="#3-1-线程的创建pthread-create" class="headerlink" title="3.1 线程的创建pthread_create"></a>3.1 线程的创建pthread_create</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_create</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="type">pthread_t</span> *thread, <span class="comment">//不同线程的独立唯一的线程id，标识引用新线程</span></span></span><br><span class="line"><span class="params">    <span class="type">const</span> <span class="type">pthread_attr_t</span> *attr,<span class="comment">//设置线程属性，通常为NULL</span></span></span><br><span class="line"><span class="params">    <span class="type">void</span> *(*start_routine) (<span class="type">void</span> *), <span class="comment">//函数地址，线程需要执行的函数，该函数传入任意类型的指针，返回一个任意类型指针。必须明确提供一个函数指针来创建新线程</span></span></span><br><span class="line"><span class="params">    <span class="type">void</span> *arg <span class="comment">//传给线程的任意类型参数</span></span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"><span class="comment">//函数调用成功时返回值是0，如果失败则返回错误代码，错误代码不一定是-1，依据系统行为而定。</span></span><br></pre></td></tr></tbody></table></figure><p>​线程属性相关，查看[线程属性](#5 线程属性pthread_attr_t)</p><h3 id="3-2-线程退出pthread-exit"><a href="#3-2-线程退出pthread-exit" class="headerlink" title="3.2 线程退出pthread_exit"></a>3.2 线程退出pthread_exit</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">pthread_exit</span><span class="params">(<span class="type">void</span> *retval)</span>;<span class="comment">//任意类型对象指针</span></span><br><span class="line"><span class="comment">//终止调用它的线程并返回一个指向某个对象的指针。</span></span><br></pre></td></tr></tbody></table></figure><p>​绝不能用它来返回一个指向局部变量的指针，因为线程调用该函数后，这个局部变量就不再存在了，这将引起严重的程序漏洞。</p><h3 id="3-3-等待线程pthread-join"><a href="#3-3-等待线程pthread-join" class="headerlink" title="3.3 等待线程pthread_join"></a>3.3 等待线程pthread_join</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_join</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="type">pthread_t</span> thread, <span class="comment">//指定了将要等待的线程，线程通过pthread_create返回的标识符来指定。</span></span></span><br><span class="line"><span class="params">    <span class="type">void</span> **retval<span class="comment">//是一个指针，它指向另一个指针，而后者指向线程的返回值。通过这个返回值可以获取线程的所有执行信息</span></span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"><span class="comment">//这个函数在成功时返回0，失败时返回错误代码。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-4-实例程序"><a href="#3-4-实例程序" class="headerlink" title="3.4 实例程序"></a>3.4 实例程序</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//thread1.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _TEENTRSNT</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nofish_header.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *arg)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> message[] = <span class="string">"Hello World\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="type">pthread_t</span> a_thread;</span><br><span class="line">    <span class="type">void</span> *thread_result;</span><br><span class="line"></span><br><span class="line">    res = pthread_create(&amp;a_thread, <span class="literal">NULL</span>, thread_function, (<span class="type">void</span> *)message);</span><br><span class="line">    <span class="keyword">if</span>(res != <span class="number">0</span>) {</span><br><span class="line">        perror(<span class="string">"Thread creation failed"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Waiting for thread to finish...\n"</span>);</span><br><span class="line">    res = pthread_join(a_thread, &amp;thread_result);</span><br><span class="line">    <span class="keyword">if</span>(res != <span class="number">0</span>) {</span><br><span class="line">        perror(<span class="string">"Thread join failed"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Thread joined, it returned %s\n"</span>, (<span class="type">char</span> *)thread_result);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Message is now %s\n"</span>, message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *arg)</span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"thread_function is running. Argument was %s\n"</span>, (<span class="type">char</span> *)arg);</span><br><span class="line">    sleep(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(message, <span class="string">"Bye!\n"</span>);</span><br><span class="line">    pthread_exit((<span class="type">void</span> *)<span class="string">"Thank you for the CPU time"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/xian-cheng/image-20240507152526639.png" alt="image-20240507152526639"></p><h3 id="3-5-线程被动取消pthread-cancel"><a href="#3-5-线程被动取消pthread-cancel" class="headerlink" title="3.5 线程被动取消pthread_cancel"></a>3.5 线程被动取消pthread_cancel</h3><p>​多线程程序中，一个线程可以借助 <code>pthread_cancel</code> 函数向另一个线程发送终止执行的信息,   从而实现在一个线程中去终止另一个线程的操作, 从而使被通知的线程被动退出。</p><p>​被取消的进程并不是立即取消，而是要运行到一个<code>取消点</code>的位置才终止线程。会导致已取消未终止的线程终止的函数称为取消点。</p><p>​取消点函数：</p><p>​a 几乎所有会引发阻塞的函数： sleep()，select()，wait()，……</p><p>​b I/O操作：open()，close()， read()，……</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// send a cancellation request to a thread</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cancel</span><span class="params">( </span></span><br><span class="line"><span class="params"> <span class="type">pthread_t</span> thread, <span class="comment">// 不同线程的线程id </span></span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"><span class="comment">// 返回值int标识捕获状态:  0代表成功， ESRCH代表参数错误(没找到这个线程id)</span></span><br></pre></td></tr></tbody></table></figure><p>​当线程被动取消， 通过pthread_join捕获的结束状态： PTHREAD_CANCELED </p><p>​当线程没有取消点时，线程会正常运行，不会被取消，但是可以使用函数<code>pthread_testcancel</code>手动给线程打上取消点。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// request delivery of any pending cancellation request </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pthread_testcancel</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">// 无参数和返回值</span></span><br></pre></td></tr></tbody></table></figure><p><strong>扩展：</strong></p><p>​以上的取消行为执行的是默认行为，实际上是可以设置被取消线程的行为</p><p>​接受取消请求的一端可以使用函数<code>pthread_setcancelstate</code>来设置自己的取消状态</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个参数的取值可以是PTHREAD_CANCEL_ENABLE，这个值允许线程接收取消请求；或者是PTHREAD_CANCEL_DISABLE，它的作用是忽略取消请求。oldstate指针用于获取先前的取消状态。如果你对它没有兴趣，只需传递NULL给它。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_setcancelstate</span><span class="params">(<span class="type">int</span> state, <span class="type">int</span> *oldstate)</span>;</span><br><span class="line"><span class="comment">//如果上面的函数设置接受取消请求，那么可以使用下面的函数设置取消类型</span></span><br><span class="line"><span class="comment">//type参数可以有两种取值：一个是PTHREAD_CANCEL_ASYNCHRONOUS，它将使得在接收到取消请求后立即采取行动；另一个是PTHREAD_CANCEL_DEFERRED，它将使得在接收到取消请求后，一直等待直到线程执行了下述函数之一后才采取行动。具体是函数pthread_join、pthread_cond_wait、pthread_cond_timedwait、pthread_testcancel、sem_wait或sigwait。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_setcanceltype</span><span class="params">(<span class="type">int</span> type, <span class="type">int</span> *oldtype)</span>;</span><br></pre></td></tr></tbody></table></figure><p>默认情况下，线程在启动时的取消状态为PTHREAD_CANCEL_ENABLE，取消类型是PTHREAD_ CANCEL_DEFERRED。也就是扩展前面的内容。</p><p><strong>取消流程</strong></p><ul><li>首先在某个线程中调用<code>pthread_cancel</code>, 并传入要取消的目标线程ID。系统根据线程ID找到要取消的目标线程， 给这个线程的内部取消标记设置为真。</li><li>被取消线程在程序的执行的时候， 当执行到取消点函数， 则去检测标志位。</li><li>取消点函数一旦检测到线程为取消状态时，在终止线程之前， 将执行清理函数： <code>pthread_cleanup_push</code>, 用于释放占用资源、解锁互斥锁等。。。 </li><li>完成数据清理后， 线程执行退出操作。而操作系统和线程库负责销毁<code>thread local</code>数据， 比如栈空间</li><li><code>pthread_join</code>被返回， 接受线程取消状态， eg：<code>PTHREAD_CANCELED</code>。</li></ul><h3 id="3-6-资源清理pthread-cleanup"><a href="#3-6-资源清理pthread-cleanup" class="headerlink" title="3.6 资源清理pthread_cleanup"></a>3.6 资源清理pthread_cleanup</h3><p>​如果被取消的线程进行了资源分配（如：内存分配），且在线程取消前也没有进行资源回收，就会造成资源的浪费。线程库引入了 <code>pthread_cleanup_push</code> 和<code>pthread_cleanup_pop </code>函数来管理线程主动或者被动终止时所申请资源（比如文件、堆空间、锁等等）。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// push thread cancellation clean-up handlers</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pthread_cleanup_push</span><span class="params">( </span></span><br><span class="line"><span class="params"><span class="type">void</span> (*routine)(<span class="type">void</span> *),<span class="comment">// 指向清理函数的指针，该函数将在线程取消时被调用</span></span></span><br><span class="line"><span class="params"><span class="type">void</span> *arg <span class="comment">// 传递给清理函数的参数</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// pop thread cancellation clean-up handlers</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pthread_cleanup_pop</span><span class="params">( </span></span><br><span class="line"><span class="params"><span class="type">int</span> execute <span class="comment">// 设置参数0代表弹出栈顶函数并且'不执行'这个函数， 非0代表代表弹出栈顶函数并且'执行'这个函数</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></tbody></table></figure><p>​注意：</p><ul><li><code>pthread_cleanup_push</code>和<code>pthread_cleanup_pop</code>必须在同一个作用域中要成对出现 。如果pthread_cleanup_push()和pthread_cleanup_pop()不成对出现，可能会导致以下问题：<ol><li>清理处理程序无法被正确调用，从而无法执行所需的清理操作。</li><li>清理处理程序的注册顺序会混乱，可能会导致无法按照预期的方式进行清理。</li></ol></li><li>线程中资源分配的地方就需要在后面跟上进行资源清理函数的注册。</li><li>当线程执行过程中发生以下情况时，清理处理程序会被调用：<ol><li>线程调用pthread_exit()函数终止自身。</li><li>线程以非零参数调用pthread_cleanup_pop()函数。</li><li>线程被其他线程使用pthread_cancel()函数取消。</li></ol></li></ul><h2 id="4-互斥和同步"><a href="#4-互斥和同步" class="headerlink" title="4 互斥和同步"></a>4 互斥和同步</h2><p>​使用信号量和互斥量可以更好的控制线程的执行和访问代码临界区域。如果想控制任一时刻只能有一个线程可以访问一些共享内存，使用互斥量就要自然得多。但在控制对一组相同对象的访问时——比如从5条可用的电话线中分配1条给某个线程的情况，就更适合使用计数信号量。</p><h3 id="4-1-信号量同步接口"><a href="#4-1-信号量同步接口" class="headerlink" title="4.1 信号量同步接口"></a>4.1 信号量同步接口</h3><p>​两组信号量接口函数，一组取自POSIX的实时扩展，用于线程。另一组被称为系统V信号量，常用于进程的同步。以下是POSIX接口函数</p><p>​信号量是特殊类型变量，可以增加或者减少，但是访问时必须是原子操作。如果不是原子操作，那么多进程访问信号量时将导致信号量结果的不确定。</p><p>​二进制信号量是只有0和1取值的信号量，计数信号量是有更大范围取值的信号量。二进制信号量常用于保护一段代码一次只能被一个执行线程执行。</p><p>​信号量函数的名字都以<code>sem_</code>开头，线程中使用的基本信号量函数有4个。使用信号量，需要包含头文件<code>semaphore.h</code></p><h4 id="4-1-1-信号量创建sem-init"><a href="#4-1-1-信号量创建sem-init" class="headerlink" title="4.1.1 信号量创建sem_init"></a>4.1.1 信号量创建sem_init</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个函数初始化由sem指向的信号量对象，设置它的共享选项，并给它一个初始的整数值。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_init</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="type">sem_t</span> *sem, <span class="comment">//待初始化的信号量对象指针。</span></span></span><br><span class="line"><span class="params">    <span class="type">int</span> pshared, <span class="comment">//控制信号量的类型，如果其值为0，就表示这个信号量是当前进程的局部信号量，否则，这个信号量就可以在多个进程之间共享。这里有点问题，目前只能给0，可以将信号量设置为全局变量，这样就能多线程共享</span></span></span><br><span class="line"><span class="params">    <span class="type">unsigned</span> <span class="type">int</span> value <span class="comment">//信号量初始值</span></span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"><span class="comment">//成功时返回0。</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4-1-2-信号量控制sem-post和sem-wait"><a href="#4-1-2-信号量控制sem-post和sem-wait" class="headerlink" title="4.1.2 信号量控制sem_post和sem_wait"></a>4.1.2 信号量控制sem_post和sem_wait</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以原子操作的方式给信号量的值加1</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_post</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;</span><br><span class="line"><span class="comment">//成功时返回0。</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以原子操作的方式将信号量的值减1，但它会等待直到信号量有个非零值才会开始减法操作</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_wait</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;</span><br><span class="line"><span class="comment">//成功时返回0。</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4-1-3-信号量销毁sem-destroy"><a href="#4-1-3-信号量销毁sem-destroy" class="headerlink" title="4.1.3 信号量销毁sem_destroy"></a>4.1.3 信号量销毁sem_destroy</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用完信号量后对它进行清理，如果企图清理的信号量正被一些线程等待，就会收到一个错误。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_destroy</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;</span><br><span class="line"><span class="comment">//成功时返回0。</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4-1-4-实例程序"><a href="#4-1-4-实例程序" class="headerlink" title="4.1.4 实例程序"></a>4.1.4 实例程序</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//thread3.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _REENTRANT</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nofish_header.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *arg)</span>;</span><br><span class="line"><span class="type">sem_t</span> bin_sem;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WORK_SIZE 1024</span></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> work_area[WORK_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="type">pthread_t</span> a_thread;</span><br><span class="line">    <span class="type">void</span> *thread_result;</span><br><span class="line"></span><br><span class="line">    res = sem_init(&amp;bin_sem, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (res != <span class="number">0</span>) {</span><br><span class="line">        perror(<span class="string">"Semaphore initialization error\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    }</span><br><span class="line">    res = pthread_create(&amp;a_thread, <span class="literal">NULL</span>, thread_function, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (res != <span class="number">0</span>) {</span><br><span class="line">        perror(<span class="string">"Thread creation error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Input some text. Enter 'end' to finish\n"</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">strncmp</span>(<span class="string">"end"</span>, work_area, <span class="number">3</span>) != <span class="number">0</span>) {</span><br><span class="line">        fgets(work_area, WORK_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">        sem_post(&amp;bin_sem);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nWaiting for thread to finish...\n"</span>);</span><br><span class="line">    res = pthread_join(a_thread, &amp;thread_result);</span><br><span class="line">    <span class="keyword">if</span> (res != <span class="number">0</span>) {</span><br><span class="line">        perror(<span class="string">"Thread join failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Thread joined\n"</span>);</span><br><span class="line">    sem_destroy(&amp;bin_sem);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *arg)</span> {</span><br><span class="line">    sem_wait(&amp;bin_sem);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">strncmp</span>(<span class="string">"end"</span>, work_area, <span class="number">3</span>) != <span class="number">0</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You input %d characters\n"</span>, (<span class="type">int</span>)(<span class="built_in">strlen</span>(work_area) - <span class="number">1</span>));</span><br><span class="line">        sem_wait(&amp;bin_sem);</span><br><span class="line">    }</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/xian-cheng/image-20240507171150555.png" alt="image-20240507171150555"></p><h3 id="4-2-互斥变量同步接口"><a href="#4-2-互斥变量同步接口" class="headerlink" title="4.2 互斥变量同步接口"></a>4.2 互斥变量同步接口</h3><p>​互斥变量允许程序员锁住某个对象，使得每次只能有一个线程访问它。为了控制对关键代码的访问，必须在进入这段代码之前锁住一个互斥量，然后在完成操作之后解锁它。使用互斥变量需要包含头文件<code>pthread.h</code></p><h4 id="4-2-1-初始化互斥变量pthread-mutex-init"><a href="#4-2-1-初始化互斥变量pthread-mutex-init" class="headerlink" title="4.2.1 初始化互斥变量pthread_mutex_init"></a>4.2.1 初始化互斥变量pthread_mutex_init</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对锁的初始化,有两种方式: (man pthread_mutex_destroy)</span></span><br><span class="line"><span class="comment">// 1, 一种是调用pthread_mutex_init函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_init</span><span class="params">(</span></span><br><span class="line"><span class="params">       <span class="type">pthread_mutex_t</span> *mutex, <span class="comment">// 要初始化的锁</span></span></span><br><span class="line"><span class="params">   <span class="type">const</span> <span class="type">pthread_mutexattr_t</span> *attr <span class="comment">// 锁的属性类型，一般是NULL</span></span></span><br><span class="line"><span class="params">   )</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2, 另一种是直接将锁变量初始化为PTHREAD_MUTEX_INITIALIZER</span></span><br><span class="line"><span class="type">pthread_mutex_t</span> mLock = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"><span class="comment">//成功时返回0，失败时将返回错误代码</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4-2-2-互斥量加锁pthread-mutex-lock"><a href="#4-2-2-互斥量加锁pthread-mutex-lock" class="headerlink" title="4.2.2 互斥量加锁pthread_mutex_lock"></a>4.2.2 互斥量加锁pthread_mutex_lock</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用pthread_mutex_lock加锁: (加锁后进入临界区)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// lock a mutex</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_lock</span><span class="params">(</span></span><br><span class="line"><span class="params">   <span class="type">pthread_mutex_t</span> *mutex <span class="comment">// 锁</span></span></span><br><span class="line"><span class="params">   )</span>;</span><br><span class="line"><span class="comment">//成功时返回0，失败时将返回错误代码</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4-2-3-互斥量解锁pthread-mutex-unlock"><a href="#4-2-3-互斥量解锁pthread-mutex-unlock" class="headerlink" title="4.2.3 互斥量解锁pthread_mutex_unlock"></a>4.2.3 互斥量解锁pthread_mutex_unlock</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用pthread_mutex_unlock把锁置为未锁: (临界区代码执行结束,解锁)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// unlock a mutex</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_unlock</span><span class="params">(</span></span><br><span class="line"><span class="params">   <span class="type">pthread_mutex_t</span> *mutex <span class="comment">// 锁</span></span></span><br><span class="line"><span class="params">   )</span>;</span><br><span class="line"><span class="comment">//成功时返回0，失败时将返回错误代码</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4-2-4-销毁互斥量锁pthread-mutex-destroy"><a href="#4-2-4-销毁互斥量锁pthread-mutex-destroy" class="headerlink" title="4.2.4 销毁互斥量锁pthread_mutex_destroy"></a>4.2.4 销毁互斥量锁pthread_mutex_destroy</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在程序结束前回收锁,释放其占用的资源:</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// destroy a mutex</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_destroy</span><span class="params">(</span></span><br><span class="line"><span class="params">   <span class="type">pthread_mutex_t</span> *mutex <span class="comment">// 锁</span></span></span><br><span class="line"><span class="params">   )</span>;</span><br><span class="line"><span class="comment">//成功时返回0，失败时将返回错误代码</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4-2-5-实例程序"><a href="#4-2-5-实例程序" class="headerlink" title="4.2.5 实例程序"></a>4.2.5 实例程序</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _REENTRANT</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nofish_header.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *arg)</span>;</span><br><span class="line"><span class="type">pthread_mutex_t</span> work_mutex; <span class="comment">//浜掓枼璁块棶work_area鍜岄€€鍑虹殑鏃舵満</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WORK_SIZE 1024</span></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> work_area[WORK_SIZE];</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> time_to_exit = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="type">pthread_t</span> a_thread;</span><br><span class="line">    <span class="type">void</span> *thread_result;</span><br><span class="line">    res = pthread_mutex_init(&amp;work_mutex, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (res != <span class="number">0</span>) {</span><br><span class="line">        perror(<span class="string">"Mutex initialization error\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    }</span><br><span class="line">    res = pthread_create(&amp;a_thread, <span class="literal">NULL</span>, thread_function, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (res != <span class="number">0</span>) {</span><br><span class="line">        perror(<span class="string">"Thread creation error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    }</span><br><span class="line">    pthread_mutex_lock(&amp;work_mutex);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Input some text. Enter 'end' to finish\n"</span>);</span><br><span class="line">    <span class="keyword">while</span>(!time_to_exit) {</span><br><span class="line">        fgets(work_area, WORK_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">        pthread_mutex_unlock(&amp;work_mutex);</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">            pthread_mutex_lock(&amp;work_mutex);</span><br><span class="line">            <span class="keyword">if</span> (work_area[<span class="number">0</span>] != <span class="string">'\0'</span>) {</span><br><span class="line">                pthread_mutex_unlock(&amp;work_mutex);</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    pthread_mutex_unlock(&amp;work_mutex);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nWaiting for thread to finish...\n"</span>);</span><br><span class="line">    res = pthread_join(a_thread, &amp;thread_result);</span><br><span class="line">    <span class="keyword">if</span> (res != <span class="number">0</span>) {</span><br><span class="line">        perror(<span class="string">"Thread join failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Thread joined\n"</span>);</span><br><span class="line">    pthread_mutex_destroy(&amp;work_mutex);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *arg)</span> {</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    pthread_mutex_lock(&amp;work_mutex);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">strncmp</span>(<span class="string">"end"</span>, work_area, <span class="number">3</span>) != <span class="number">0</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You input %d characters\n"</span>, (<span class="type">int</span>)(<span class="built_in">strlen</span>(work_area) - <span class="number">1</span>));</span><br><span class="line">        work_area[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line">        pthread_mutex_unlock(&amp;work_mutex);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        pthread_mutex_lock(&amp;work_mutex);</span><br><span class="line">        <span class="keyword">while</span>(work_area[<span class="number">0</span>] == <span class="string">'\0'</span>) {</span><br><span class="line">            pthread_mutex_unlock(&amp;work_mutex);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            pthread_mutex_lock(&amp;work_mutex);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    time_to_exit  = <span class="number">1</span>;</span><br><span class="line">    work_area[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line">    pthread_mutex_unlock(&amp;work_mutex);</span><br><span class="line">    pthread_exit(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/xian-cheng/image-20240507195120554.png" alt="image-20240507195120554"></p><p>​在示例程序中，每次对<code>work_area</code>的访问都需要进行上锁和解锁的操作，双方线程使用<code>work_area[0]</code>进行通信提示准备完成，所以双方线程都在一个循环中加锁和解锁访问<code>work_area[0]</code>，直到预期改变出现退出循环进行处理。这种循环检查对方是否准备完成的方式就是轮询。</p><h4 id="4-2-6-扩展"><a href="#4-2-6-扩展" class="headerlink" title="4.2.6 扩展"></a>4.2.6 扩展</h4><h5 id="A-gettimeofday"><a href="#A-gettimeofday" class="headerlink" title="A gettimeofday"></a>A gettimeofday</h5><p>​<code>gettimeofday</code>是一个在C语言中常用的函数,是POSIX标准的一部分，用于获取当前的时间和日期。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="comment">// get time</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">gettimeofday</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="keyword">struct</span> timeval *tv, <span class="comment">// 是一个指向timeval结构体的指针，用于存储获取的时间和日期</span></span></span><br><span class="line"><span class="params"><span class="keyword">struct</span> timezone *tz <span class="comment">// 是一个指向timezone结构体的指针，用于指定时区信息，通常设置为NULL。</span></span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span>{</span></span><br><span class="line"><span class="type">time_t</span> tv_sec; <span class="comment">// seconds 秒</span></span><br><span class="line"><span class="type">suseconds_t</span> tv_usec; <span class="comment">// microseconds 微妙</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="B-pthread-mutex-trylock"><a href="#B-pthread-mutex-trylock" class="headerlink" title="B pthread_mutex_trylock"></a>B pthread_mutex_trylock</h5><p>​<code>pthread_mutex_trylock</code>在获取互斥锁和加锁的时候，它是一种非阻塞锁, 即:  如果锁已经被其他线程持有，则该函数会立即返回一个错误代码，而不是阻塞当前线程; 如果这个锁没有被别人持有, 拿到这个锁。可以用来解除拿多个锁可能造成的死锁问题</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// lock a mutex</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_trylock</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="type">pthread_mutex_t</span> *mutex</span></span><br><span class="line"><span class="params">)</span></span><br><span class="line"><span class="comment">// int返回值, 获取到锁则返回0; 没有获取到锁则返回错误码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ps: pthread_mutex_trylock配合循环可解锁第一种死锁问题</span></span><br></pre></td></tr></tbody></table></figure><h5 id="C-自旋锁"><a href="#C-自旋锁" class="headerlink" title="C 自旋锁"></a>C 自旋锁</h5><p>线程不满足条件时，线程会一直循环(一直占用CPU),  直到条件成立。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// spin lock:  spin-&gt;旋转</span></span><br><span class="line"></span><br><span class="line"><span class="type">pthread_spinlock_t</span>  mLock; <span class="comment">// 锁类型</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_spin_init</span><span class="params">(<span class="type">pthread_spinlock_t</span> *lock <span class="type">int</span> pshared)</span>;<span class="comment">// 初始化锁</span></span><br><span class="line"><span class="comment">//PTHREAD_PROCESS_PRIVATE: 表示自旋锁仅用于同一进程的不同线程之间的同步。</span></span><br><span class="line"><span class="comment">//PTHREAD_PROCESS_SHARED: 表示自旋锁可以用于不同进程之间的同步(前提是这个锁变量位于某种共享内存区域中)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_spin_lock</span><span class="params">(<span class="type">pthread_spinlock_t</span> *lock)</span>;<span class="comment">// 自旋获取锁</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_spin_trylock</span><span class="params">(<span class="type">pthread_spinlock_t</span> *lock)</span>;<span class="comment">// 无法获得锁直接返回</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_spin_unlock</span><span class="params">(<span class="type">pthread_spinlock_t</span> *lock)</span>;<span class="comment">// 解锁</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_spin_destroy</span><span class="params">(<span class="type">pthread_spinlock_t</span> *lock)</span>;<span class="comment">// 销毁锁</span></span><br></pre></td></tr></tbody></table></figure><h5 id="D-读写锁"><a href="#D-读写锁" class="headerlink" title="D 读写锁"></a>D 读写锁</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pthread_rwlock_t</span> my_lock; <span class="comment">// 读写锁: 可以充当读锁, 也可以充当写锁, 读写锁</span></span><br></pre></td></tr></tbody></table></figure><p>读锁: 它允许多个线程同时以读模式访问共享资源。当一个线程持有读锁时，其他线程可以同时获取读锁来读取数据，但只能有一个线程可以获取写锁来写入数据。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_rwlock_rdlock</span><span class="params">(<span class="type">pthread_rwlock_t</span> *rwlock)</span>;</span><br></pre></td></tr></tbody></table></figure><p>写锁: 它只允许一个线程以写模式访问共享资源。当一个线程持有写锁时，其他线程无法获取读锁或写锁，必须等待该锁被释放后才能访问共享资源。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_rwlock_wrlock</span><span class="params">(<span class="type">pthread_rwlock_t</span> *rwlock)</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="4-3-互斥锁的类型"><a href="#4-3-互斥锁的类型" class="headerlink" title="4.3 互斥锁的类型"></a>4.3 互斥锁的类型</h3><p>​我们在初始化锁的时候,  调用<span style="color:red"><code>pthread_mutex_init(锁, 类型)</code></span>, 可以给锁设置不同的类型  (可 <code>man pthread_mutexattr_gettype</code> 查看)</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PTHREAD_MUTEX_NORMAL<span class="comment">// 普通锁. </span></span><br><span class="line">PTHREAD_MUTEX_ERRORCHECK<span class="comment">// 检错锁. 同一线程中, 对某个锁重复上锁, 会返回错误, 去解锁未锁的锁,也会返回错误.是一种锁的错误检查机制</span></span><br><span class="line">PTHREAD_MUTEX_RECURSIVE<span class="comment">// 递归锁/可重入锁.  一个线程中可对该锁重复上锁, 通过计数标记上锁次数, 每次上锁计数+1,每次解锁技术-1; 当计数为0, 其它线程才能获取该锁.</span></span><br><span class="line">PTHREAD_MUTEX_DEFAULT<span class="comment">// 默认锁,和普通锁表现等价. </span></span><br></pre></td></tr></tbody></table></figure><h4 id="4-3-1-定义和初始化互斥锁"><a href="#4-3-1-定义和初始化互斥锁" class="headerlink" title="4.3.1 定义和初始化互斥锁"></a>4.3.1 定义和初始化互斥锁</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要先定义一个pthread_mutexattr_t的类型(eg:)</span></span><br><span class="line"><span class="type">pthread_mutexattr_t</span> mutexattr;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// initialze the mutex attributes object</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutexattr_init</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="type">pthread_mutexattr_t</span> *attr <span class="comment">// 类型变量</span></span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4-3-2-设置锁的类型"><a href="#4-3-2-设置锁的类型" class="headerlink" title="4.3.2 设置锁的类型"></a>4.3.2 设置锁的类型</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// set mutex type attribute</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutexattr_settype</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="type">pthread_mutexattr_t</span> *attr,  <span class="comment">// 类型变量</span></span></span><br><span class="line"><span class="params"><span class="type">int</span> type<span class="comment">// 锁的具体类型</span></span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4-3-3-使用锁"><a href="#4-3-3-使用锁" class="headerlink" title="4.3.3 使用锁"></a>4.3.3 使用锁</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// 初始化锁的时候, 给锁传入类型</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_init</span><span class="params">(</span></span><br><span class="line"><span class="params">       <span class="type">pthread_mutex_t</span> *mutex, <span class="comment">// 要初始化的锁</span></span></span><br><span class="line"><span class="params">   <span class="type">const</span> <span class="type">pthread_mutexattr_t</span> *attr <span class="comment">// 锁的类型</span></span></span><br><span class="line"><span class="params">   )</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="4-3-4-销毁锁"><a href="#4-3-4-销毁锁" class="headerlink" title="4.3.4 销毁锁"></a>4.3.4 销毁锁</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// destroy the mutex attributes object</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutexattr_destroy</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="type">pthread_mutexattr_t</span> *attr  <span class="comment">// 类型变量</span></span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></tbody></table></figure><h2 id="5-线程属性pthread-attr-t"><a href="#5-线程属性pthread-attr-t" class="headerlink" title="5 线程属性pthread_attr_t"></a>5 线程属性pthread_attr_t</h2><p>​<code>pthread_create</code>的第二个参数是线程属性，如果既不需要第二个线程向主线程返回信息，也不想让主线程等待它的结束，就可以使用属性这一个参数栏，来创建一个脱离线程。</p><h4 id="5-1-初始化线程属性对象pthread-attr-init"><a href="#5-1-初始化线程属性对象pthread-attr-init" class="headerlink" title="5.1 初始化线程属性对象pthread_attr_init"></a>5.1 初始化线程属性对象pthread_attr_init</h4><p>​使用函数<code>pthread_attr_init</code>初始化一个线程属性对象。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_init</span><span class="params">(<span class="type">pthread_attr_t</span> *attr)</span>;</span><br><span class="line"><span class="comment">//在成功时返回0，失败时返回错误代码。</span></span><br></pre></td></tr></tbody></table></figure><h4 id="5-2-回收线程属性对象pthread-attr-destroy"><a href="#5-2-回收线程属性对象pthread-attr-destroy" class="headerlink" title="5.2 回收线程属性对象pthread_attr_destroy"></a>5.2 回收线程属性对象pthread_attr_destroy</h4><p>​使用函数<code>pthread_attr_destroy</code>回收一个线程属性对象。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_destroy</span><span class="params">(<span class="type">pthread_attr_t</span> *attr)</span>;</span><br><span class="line"><span class="comment">//在成功时返回0，失败时返回错误代码。</span></span><br></pre></td></tr></tbody></table></figure><h4 id="5-3-设置属性行为"><a href="#5-3-设置属性行为" class="headerlink" title="5.3 设置属性行为"></a>5.3 设置属性行为</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//detachstate: 允许我们无需对线程进行重新合并。它以一个属性指针和一个标志为参数来确定需要的状态。detachstate可能用到的两个标志分别是PTHREAD_CREATE_JOINABLE和PTHREAD_CREATE_DETACHED。这个属性的默认标志值是PTHREAD_CREATE_JOINABLE，所以可以允许两个线程重新合并。如果标志设置为PTHREAD_CREATE_DETACHED，就不能调用pthread_join来获得另一个线程的退出状态。</span></span><br><span class="line"><span class="comment">//这里合并就是等待子线程执行完成的意思</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_setdetachstate</span><span class="params">(<span class="type">pthread_attr_t</span> *attr, <span class="type">int</span> detachstate)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_getdetachstate</span><span class="params">(<span class="type">const</span> <span class="type">pthread_attr_t</span> *attr, <span class="type">int</span> *detachstate)</span>;</span><br><span class="line"><span class="comment">//schedpolicy: 这个属性控制线程的调度方式。它的取值可以是SCHED_OTHER、SCHED_RP和SCHED_FIFO。这个属性的默认值为SCHED_OTHER。另外两种调度方式只能用于以超级用户权限运行的进程，因为它们都具备实时调度的功能，但在行为上略有区别。SCHED_RP使用循环（round-robin）调度机制，而SCHED_FIFO使用“先进先出”策略。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_setschedpolicy</span><span class="params">(<span class="type">pthread_attr_t</span> *attr, <span class="type">int</span> policy)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_getschedpolicy</span><span class="params">(<span class="type">const</span> <span class="type">pthread_attr_t</span> *attr, <span class="type">int</span> *policy)</span>;</span><br><span class="line"><span class="comment">//schedparam: 这个属性是和schedpolicy属性结合使用的，它可以对以SCHED_OTHER策略运行的线程的调度进行控制。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_setschedparam</span><span class="params">(<span class="type">pthread_attr_t</span> *attr,<span class="type">const</span> <span class="keyword">struct</span> sched_param *param)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_getschedparam</span><span class="params">(<span class="type">const</span> <span class="type">pthread_attr_t</span> *attr, <span class="keyword">struct</span> sched_param *param)</span>;</span><br><span class="line"><span class="comment">//inheritsched: 这个属性可取两个值：PTHREAD_EXPLICIT_SCHED和PTHREAD_INHERIT_SCHED。它的默认取值是PTHREAD_EXPLICIT_SCHED，表示调度由属性明确地设置。如果把它设置为PTHREAD_INHERIT_SCHED，新线程将沿用其创建者所使用的参数。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_setinheritsched</span><span class="params">(<span class="type">pthread_attr_t</span> *attr, <span class="type">int</span> inheritsched)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_getinheritsched</span><span class="params">(<span class="type">const</span> <span class="type">pthread_attr_t</span> *attr, <span class="type">int</span> *inheritsched)</span>;</span><br><span class="line"><span class="comment">//scope: 这个属性控制一个线程调度的计算方式。目前Linux只支持它的一种取值PTHREAD_SCOPE_SYSTEM</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_setscope</span><span class="params">(<span class="type">pthread_attr_t</span> *attr, <span class="type">int</span> scope)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_getscope</span><span class="params">(<span class="type">const</span> <span class="type">pthread_attr_t</span> *attr, <span class="type">int</span> *scope)</span>;</span><br><span class="line"><span class="comment">//stacksize: 这个属性控制线程创建的栈大小，单位为字节。它属于POSIX规范中的“可选”部分，只有在定义了宏_POSIX_THREAD_ATTR_STACKSIZE的实现版本中才支持。Linux在实现线程时，默认使用的栈很大，所以这个功能对Linux来说显得有些多余。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_setstacksize</span><span class="params">(<span class="type">pthread_attr_t</span> *attr, <span class="type">size_t</span> stacksize)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_getstacksize</span><span class="params">(<span class="type">const</span> <span class="type">pthread_attr_t</span> *attr, <span class="type">size_t</span> *stacksize)</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="5-4-实例程序：设置脱离状态属性"><a href="#5-4-实例程序：设置脱离状态属性" class="headerlink" title="5.4 实例程序：设置脱离状态属性"></a>5.4 实例程序：设置脱离状态属性</h4><p><strong>脱离线程示例：</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nofish_header.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *arg)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> message[] = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="type">int</span> thread_finished = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="type">pthread_t</span> a_thread;</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_attr_t</span> thread_attr;</span><br><span class="line"></span><br><span class="line">    res = pthread_attr_init(&amp;thread_attr);</span><br><span class="line">    THREAD_ERROR_CHECK(res, <span class="string">"Attribute creation failed"</span>);</span><br><span class="line">    </span><br><span class="line">    res = pthread_attr_setdetachstate(&amp;thread_attr, PTHREAD_CREATE_DETACHED);</span><br><span class="line">    THREAD_ERROR_CHECK(res, <span class="string">"Setting detached attibute failed"</span>);</span><br><span class="line"></span><br><span class="line">    res = pthread_create(&amp;a_thread, &amp;thread_attr, </span><br><span class="line">                         thread_function, (<span class="type">void</span> *)message);</span><br><span class="line">    THREAD_ERROR_CHECK(res, <span class="string">"Thread creation failed"</span>);</span><br><span class="line"></span><br><span class="line">    (<span class="type">void</span>)pthread_attr_destroy(&amp;thread_attr);</span><br><span class="line">    <span class="keyword">while</span>(!thread_finished) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Wating for thread to say it's finished...\n"</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Other thread finished, bye!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *arg)</span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"thread_function is running. Argument was %s\n"</span>, (<span class="type">char</span> *)arg);</span><br><span class="line">    sleep(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Second thread setting finished flag, and exiting now\n"</span>);</span><br><span class="line">    thread_finished = <span class="number">1</span>;</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/xian-cheng/image-20240508111241801.png" alt="image-20240508111241801"></p><p>设置脱离状态属性可以允许第二个线程独立地完成工作，而无需原先的线程等待它。</p><p><strong>线程调度属性：</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nofish_header.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *arg)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> message[] = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="type">int</span> thread_finished = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="comment">//线程id</span></span><br><span class="line">    <span class="type">pthread_t</span> a_thread;</span><br><span class="line">    <span class="comment">//线程属性对象</span></span><br><span class="line">    <span class="type">pthread_attr_t</span> thread_attr;</span><br><span class="line">    <span class="comment">//优先级</span></span><br><span class="line">    <span class="type">int</span> max_priority;</span><br><span class="line">    <span class="type">int</span> min_priority;</span><br><span class="line">    <span class="comment">//调度参数设置结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sched_param</span> <span class="title">scheduling_value</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化属性对象</span></span><br><span class="line">    res = pthread_attr_init(&amp;thread_attr);</span><br><span class="line">    THREAD_ERROR_CHECK(res, <span class="string">"Attribute creation failed"</span>);</span><br><span class="line">    <span class="comment">//设置脱离属性</span></span><br><span class="line">    res = pthread_attr_setdetachstate(&amp;thread_attr, PTHREAD_CREATE_DETACHED);</span><br><span class="line">    THREAD_ERROR_CHECK(res, <span class="string">"Setting detached attibute failed"</span>);</span><br><span class="line">    <span class="comment">//设置调度属性</span></span><br><span class="line">    res = pthread_attr_setschedpolicy(&amp;thread_attr, SCHED_OTHER);</span><br><span class="line">    THREAD_ERROR_CHECK(res, <span class="string">"Setting scheduling policy failed"</span>);</span><br><span class="line">    <span class="comment">//获取最大最小优先级</span></span><br><span class="line">    max_priority = sched_get_priority_max(SCHED_OTHER);</span><br><span class="line">    min_priority = sched_get_priority_min(SCHED_OTHER);</span><br><span class="line">    <span class="comment">//设置SCHED_OTHER策略的调度优先级控制</span></span><br><span class="line">    scheduling_value.sched_priority = min_priority;</span><br><span class="line">    res = pthread_attr_setschedparam(&amp;thread_attr, &amp;scheduling_value);</span><br><span class="line">    THREAD_ERROR_CHECK(res, <span class="string">"Setting scheduling priority  failed"</span>);</span><br><span class="line"></span><br><span class="line">    res = pthread_create(&amp;a_thread, &amp;thread_attr, </span><br><span class="line">                         thread_function, (<span class="type">void</span> *)message);</span><br><span class="line">    THREAD_ERROR_CHECK(res, <span class="string">"Thread creation failed"</span>);</span><br><span class="line"></span><br><span class="line">    (<span class="type">void</span>)pthread_attr_destroy(&amp;thread_attr);</span><br><span class="line">    <span class="keyword">while</span>(!thread_finished) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Wating for thread to say it's finished...\n"</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Other thread finished, bye!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *arg)</span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"thread_function is running. Argument was %s\n"</span>, (<span class="type">char</span> *)arg);</span><br><span class="line">    sleep(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Second thread setting finished flag, and exiting now\n"</span>);</span><br><span class="line">    thread_finished = <span class="number">1</span>;</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/05/11/xian-cheng/image-20240508113201805.png" alt="image-20240508113201805"></p><h2 id="6-条件变量"><a href="#6-条件变量" class="headerlink" title="6 条件变量"></a>6 条件变量</h2><p>​基本原理是, 线程可以在不满足<code>共享资源的某个条件</code>时等待/挂起，直到另一个线程发出通知，告诉它条件已经满足, 进一步唤醒这个等待。</p><ul><li>当A线程持有锁的时候，A认为自己做某些操作的条件还不够成熟，A可以主动让自己阻塞并且释放锁(陷入阻塞和解锁是原子的)</li><li>当锁被A释放，其他的线程比如B线程可以持有锁(有些情况下可以不持有锁)去修改条件的内容</li><li>B进行逻辑操作的过程中, 一旦B认为现在是一个合适的时机唤醒A时，B可以通过唤醒操作通知到A线程。</li><li>A线程收到唤醒通知之后，会首先恢复运行并加锁，再继续执行后续的指令。</li></ul><h3 id="6-1-pthread-cond-wait"><a href="#6-1-pthread-cond-wait" class="headerlink" title="6.1 pthread_cond_wait"></a>6.1 pthread_cond_wait</h3><p>​在线程运行过程中, 通过调用<code>pthread_cond_wait</code>让不满足条件的线程主动阻塞, 等待被唤醒.</p><p>​当通过<code>pthread_cond_wait</code>陷入阻塞的时候, 会先释放锁.</p><p>​当<code>pthread_cond_wait</code>被从阻塞状态唤醒的时候, 会先加锁, 然后继续执行其后的代码逻辑.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义条件变量</span></span><br><span class="line"><span class="type">pthread_cond_t</span> cond;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化条件变量</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// initialize condition variables </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_init</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="type">pthread_cond_t</span> *cond,<span class="comment">// 条件变量的指针</span></span></span><br><span class="line"><span class="params"><span class="type">pthread_condattr_t</span> *attr<span class="comment">// 条件变量属性对象 (默认NULL)</span></span></span><br><span class="line"><span class="params">)</span><span class="comment">// 返回值: 初始化成功返回0；否则，返回一个错误码</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//陷入阻塞并释放锁</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// wait on a condition </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_wait</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="type">pthread_cond_t</span> *cond,<span class="comment">// 条件变量的指针</span></span></span><br><span class="line"><span class="params"><span class="type">pthread_mutex_t</span> *muten<span class="comment">// 要操作(释放和获取)的锁</span></span></span><br><span class="line"><span class="params">)</span><span class="comment">// 返回值: 成功返回0；否则，返回一个错误码</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//唤醒以指定条件变量阻塞的线程, 并使其重新获取锁</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// signal a condition </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_signal</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="type">pthread_cond_t</span> *cond<span class="comment">// 条件变量的指针</span></span></span><br><span class="line"><span class="params">)</span><span class="comment">// 返回值: 成功返回0；否则，返回一个错误码</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//销毁条件变量</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// destroy a condition variables</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_destroy</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="type">pthread_cond_t</span> *cond<span class="comment">// 条件变量的指针</span></span></span><br><span class="line"><span class="params">)</span><span class="comment">// 返回值: 成功返回0；否则，返回一个错误码</span></span><br></pre></td></tr></tbody></table></figure><p>注意： 通过<code>pthread_cond_signal</code>唤醒的线程, 如果无法获取锁, 会立即进入阻塞, 直到锁空闲, 再自动唤醒(无需<code>pthread_cond_signal</code>)并持有锁(  第一个意思: 即使被<code>pthread_cond_signal</code>唤醒也不一定能拿到锁; 第二意思: 拿不到等一会重新拿  )</p><h3 id="6-2-pthread-cond-timedwait"><a href="#6-2-pthread-cond-timedwait" class="headerlink" title="6.2 pthread_cond_timedwait"></a>6.2 pthread_cond_timedwait</h3><p>​<code>pthread_cond_timedwait</code>是一个可设置超时的<code>pthread_cond_wait</code>，允许设置一个超时时间，当线程等待条件变量超过这个时间后，函数会自动返回。这避免了线程无限期地等待下去，有助于防止死锁和资源占用。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// wait on a condition </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_timedwait</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="type">pthread_cond_t</span> *cond,<span class="comment">// 条件变量的指针</span></span></span><br><span class="line"><span class="params"><span class="type">pthread_mutex_t</span> *muten,<span class="comment">// 要操作(释放和获取)的锁</span></span></span><br><span class="line"><span class="params">timespec *abstime<span class="comment">// 超时时间</span></span></span><br><span class="line"><span class="params">)</span><span class="comment">//如果在设置的等待时间内条件变量被其他线程唤醒并满足条件，函数会返回0。如果等待超时，函数会返回ETIMEDOUT。</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// timespec类型   </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timespec</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="type">__time_t</span> tv_sec;<span class="comment">//秒</span></span><br><span class="line"><span class="type">__syscall_slong_t</span> tv_nsec; <span class="comment">//纳秒</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// __time_t  -&gt;  typedef long int __time_t;</span></span><br><span class="line"><span class="comment">// __syscall_slong_t  -&gt;  typedef long int __syscall_slong_t; </span></span><br></pre></td></tr></tbody></table></figure><h3 id="6-3-pthread-cond-broadcast"><a href="#6-3-pthread-cond-broadcast" class="headerlink" title="6.3 pthread_cond_broadcast"></a>6.3 pthread_cond_broadcast</h3><p>​<code>pthread_cond_broadcast</code> 是以广播的方式把指定条件变量的阻塞队列线程全部唤醒。可能存在虚假唤醒，即唤醒了多个线程，但是只有一个线程能满足条件运行，其他线程无法做事。可以使用while循环判断条件是否满足，如果不满足线程就继续进行wait。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 虚假唤醒: pthread_cond_broadcast 唤醒了多个线程, 每一个进程一定会立即获得锁? 不会</span></span><br><span class="line">eg: 广播: 唤醒了<span class="number">5</span>个线程, <span class="number">5</span>个线程使用的还是同一把锁, 这个醒的<span class="number">5</span>个线程, 都要去试图获取那个锁, <span class="number">1</span>个成功, <span class="number">4</span>个等待锁</span><br><span class="line"><span class="number">1</span>个成功获得锁的线程做了针对性的事情, 导致条件变化了; </span><br><span class="line">--&gt; 其余线程喊醒了, 不满足条件, 做不了事, -&gt; 虚假唤醒</span><br><span class="line">--&gt; 一种良好的解决办法</span><br><span class="line"> <span class="keyword">while</span>(num &gt;= <span class="number">5</span>){</span><br><span class="line">     重新wait;</span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--&gt;  pthread_cond_broadcast 唤醒了多个线程: 要获取的不是同一把锁, 分别去试图获取自己设置的锁 </span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu中找不到头文件term.h和curses.h的解决方法</title>
      <link href="/2024/05/09/ubuntu-zhong-zhao-bu-dao-tou-wen-jian-term-h-he-curses-h-de-jie-jue-fang-fa/"/>
      <url>/2024/05/09/ubuntu-zhong-zhao-bu-dao-tou-wen-jian-term-h-he-curses-h-de-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu中找不到头文件term-h和curses-h的解决方法"><a href="#ubuntu中找不到头文件term-h和curses-h的解决方法" class="headerlink" title="ubuntu中找不到头文件term.h和curses.h的解决方法"></a>ubuntu中找不到头文件term.h和curses.h的解决方法</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>​当/<code>usr/include</code>中没有<code>term.h</code>和<code>curses.h</code>时，包含这两个头文件的程序会如下报错</p><p>term.h: 没有那个文件或目录</p><p>curses.h: 没有那个文件或目录</p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>安装ncurses库（兼容curses库）</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libncurses5-dev</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> bug修复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Makefile文件的使用</title>
      <link href="/2024/04/25/makefile-wen-jian-de-shi-yong/"/>
      <url>/2024/04/25/makefile-wen-jian-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Makefile文件的使用"><a href="#Makefile文件的使用" class="headerlink" title="Makefile文件的使用"></a>Makefile文件的使用</h1><h3 id="1-问题说明"><a href="#1-问题说明" class="headerlink" title="1 问题说明"></a>1 问题说明</h3><p>​大型工程如果修改任一个源文件就需要编译整个工程，会非常耗时。需要有一种功能，只需要将更新过的和新增的源文件进行重新编译，而那些没修改过的源文件，则不会重新编译的。这种编译工程的策略就是——**”增量编译”**！</p><p>​需要实现两种功能：</p><p>​(1)制定一套规则，实现源文件自动化的编译链接</p><p>​(2)实现增量编译</p><p>​makefile就可以实现这些功能。</p><h3 id="2-Makefile本质"><a href="#2-Makefile本质" class="headerlink" title="2 Makefile本质"></a>2 Makefile本质</h3><p>​Makefile本质上是一脚本个文件，这个文件中存放了编译和构建程序的脚本指令，定义了整个工程构建可执行程序的规则。</p><p>​使用Makefile脚本文件制定构建程序的规则，然后使用<code>make</code>指令来解释Makefile文件，从而实现自动化的程序构建和增量编译。</p><h3 id="3-Makefile组成"><a href="#3-Makefile组成" class="headerlink" title="3 Makefile组成"></a>3 Makefile组成</h3><p>​新建的Makefile文件名必须是Makefile或者makefile</p><h4 id="3-1-Makefile脚本基本单元"><a href="#3-1-Makefile脚本基本单元" class="headerlink" title="3.1 Makefile脚本基本单元"></a>3.1 Makefile脚本基本单元</h4><p>​Makefile文件脚本指令的基本组成单元是<strong>规则</strong>。</p><p>​规则的组成：<strong>目标（Target）、依赖（Prerequisites）、命令（Commands）</strong></p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">target: prerequisites</span></span><br><span class="line">    <span class="comment">#command行的开头必须是一个制表符，若换成空格符，Makefile脚本会运行报错</span></span><br><span class="line">    commands</span><br></pre></td></tr></tbody></table></figure><p>​目标（Target）：目标通常是文件名，代表了要生成或更新的文件。一条规则中，只有一个目标，不能有多个目标。</p><p>​依赖（Prerequisites）：代表生成目标时所依赖的文件，可以是一个，也可以是很多个。</p><p>​命令（Commands）：代表生成目标时所执行的指令，可以是一条，也可以是多条。每个命令必须以一个制表符（Tab）开始，这是 Makefile 语法的强制要求！！！</p><p><img src="/2024/04/25/makefile-wen-jian-de-shi-yong/202403061651719.png" alt="需要注意制表符-图"></p><h4 id="3-2-Makefile脚本基本工作原理"><a href="#3-2-Makefile脚本基本工作原理" class="headerlink" title="3.2 Makefile脚本基本工作原理"></a>3.2 Makefile脚本基本工作原理</h4><p>​执行<code>make</code>命令，Makefile工作流程如下：</p><p>​<strong>读取 Makefile文件：</strong>当运行 <code>make</code> 命令时，它会自动读取当前目录下的 Makefile/makefile 文件。</p><p>​<strong>重复以下过程：</strong></p><p>​(1)<strong>确定目标：</strong>Makefile脚本代码，在默认情况下第一个目标就是构建的最终目标。</p><p>​(2)<strong>检查目标是否存在或过时：</strong></p><p>​如果目标已经存在，则检查所有依赖。如果任一依赖不存在，或者任何依赖的最后修改时间比目标的最后修改时间更晚，说明目标已经过时！</p><p>​如果目标不存在或者目标过时，则认定需要生成目标。</p><p>​(3)<strong>生成目标：</strong></p><p>​如果仅是依赖发生了更新(最后修改时间比目标晚)，那么就立刻执行该规则下的命令，生成目标。</p><p>​<strong>如果依赖不存在，那就递归的检查依赖，生成依赖，直到生成目标所需要的依赖都已存在且最新，那么就执行该规则下的命令，生成目标。</strong></p><p>重复以上过程，直到：</p><p>​(1)<strong>正常结束：</strong>第一个目标正确生成完毕，Makefile执行完毕。<strong>（Makefile默认不会构建和第一个目标无关的其它目标，即便有）</strong></p><p>​(2)<strong>报错退出：</strong>如果执行任何命令过程中出现错误或者依赖的某个文件递归查找也无法生成或找到，Makefile会退出并打印错误信息。</p><h3 id="4-Makefile高级"><a href="#4-Makefile高级" class="headerlink" title="4 Makefile高级"></a>4 Makefile高级</h3><h4 id="4-1-伪目标"><a href="#4-1-伪目标" class="headerlink" title="4.1 伪目标"></a>4.1 伪目标</h4><p>​如果一个目标是：没有依赖，不给它添加任何依赖。但存在至少一条命令</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">FakeTarget:</span></span><br><span class="line">    echo <span class="string">"hello world!"</span>     <span class="comment">#向屏幕输出hello world!</span></span><br></pre></td></tr></tbody></table></figure><p>​上面的代码输出是<code>hello world!</code></p><p>​在Makefile脚本当中，像<code>FakeTarget</code>这样的，不存在且一定无法生成的目标，被称之为**”伪目标”**。伪目标的意义就在于：确保规则中的所有命令都必然要执行。</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">FakeTarget:</span></span><br><span class="line">    echo <span class="string">"first fake"</span></span><br><span class="line"><span class="section">FakeTarget2:</span></span><br><span class="line">    echo <span class="string">"second fake"</span></span><br></pre></td></tr></tbody></table></figure><p>​上面代码只输出<code>first fake</code>，Makefile默认不会构建和第一个目标无关的其它目标，即便有这个目标。但我们在使用<code>make</code>指令时，可以通过参数<code>make 目标名</code>来更改构建的目标。比如执行<code>make FakeTarget2</code>，效果就是输出<code>second fake</code>。</p><p>​伪目标在实际工作中非常有用，常用来实现<strong>clean</strong>和<strong>rebuild</strong>两个功能</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">main: main.o add.o</span></span><br><span class="line"> gcc main.o add.o -o main</span><br><span class="line"><span class="section">main.o: main.c compute.h</span></span><br><span class="line"> gcc -c main.c -Wall -g</span><br><span class="line"><span class="section">add.o: add.c compute.h</span></span><br><span class="line"> gcc -c add.c -Wall -g</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -f main main.o add.o <span class="comment">#删除所有生成的目标文件以及可执行程序，并且不给提示。-f是必须的</span></span><br><span class="line"><span class="section">rebuild: clean main     #clean和main要写在依赖的未知，而不是命令的位置！</span></span><br></pre></td></tr></tbody></table></figure><p>​在定义一个Makefile时，添加上这两个伪目标，以实现清理和重新生成的功能。</p><p>​<em><strong>建议用”.PHONY”标记所有的伪目标</strong></em></p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#.....</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean rebuild           #PHONY有假的意思, 用它标记伪目标是一个好的编程实践，注意<span class="keyword">.PHONY</span>后面有一个冒号</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -f main main.o add.o     <span class="comment">#删除所有生成的目标文件以及可执行程序，并且不给提示。-f是必须的</span></span><br><span class="line"><span class="section">rebuild: clean main             #clean和main要写在依赖的未知，而不是命令的位置！</span></span><br></pre></td></tr></tbody></table></figure><p>这么做有两个好处：</p><p>​(1).增强代码可读取，立刻就知道某个目标是一个伪目标。</p><p>​(2).即便当前目录下存在名为clean或rebuild的文件，”make clean”指令也能正常执行，而不会因文件clean/rebuild作为目标存在而不执行对应指令！</p><p>​<strong>以下两点比较通用</strong></p><p>​(1)将第一行当成终极目标</p><p>​(2)要执行特定行的目标，使用<code>make [目标名]</code></p><h4 id="4-2-变量"><a href="#4-2-变量" class="headerlink" title="4.2 变量"></a>4.2 变量</h4><p>​Makefile脚本中的变量，非常类似于C/C++中的宏定义：</p><p>​(1).Makefile变量，在本质上就是一个文本字符串，在执行脚本代码的时候会原模原样地展开在所使用的地方(类似于宏的文本替换)。</p><p>​(2).我们可以随时修改 Makefile 中定义的变量的内容。</p><p>​Makefile变量语法：</p><p>​(1).Makefile变量的名称可以包含字母、数字和下划线，而且是大小写敏感的。</p><p>​(2).建议变量名全部大写，下划线分割单词。</p><p>​(3).变量名全部大写，下划线分割单词。</p><p>​(4).<strong>Makefile变量</strong>在使用的时候：</p><p>​需要给在变量名前加上$符号</p><p>​如果变量名不是单字符，就必须用()或大括号 {} 把变量名括起来。如果变量名是单字符，则允许不用括号。</p><h5 id="4-2-1-自定义变量"><a href="#4-2-1-自定义变量" class="headerlink" title="4.2.1 自定义变量"></a>4.2.1 自定义变量</h5><p>​自定义变量就是程序员自己编写代码定义的变量。前面已经实现的脚本可以利用自定义变量优化。</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">main: main.o add.o</span></span><br><span class="line"> gcc main.o add.o -o main</span><br><span class="line"><span class="section">main.o: main.c compute.h</span></span><br><span class="line"> gcc -c main.c -Wall -g</span><br><span class="line"><span class="section">add.o: add.c compute.h</span></span><br><span class="line"> gcc -c add.c -Wall -g</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line"> rm -f main main.o add.o</span><br><span class="line"><span class="section">rebuild: clean main</span></span><br></pre></td></tr></tbody></table></figure><p>​优化</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">OUT := main     <span class="comment">#目标文件</span></span><br><span class="line">OBJS := main.o add.o       <span class="comment">#生成目标文件所需要的依赖   </span></span><br><span class="line">COM_OP := -Wall -g        <span class="comment">#编译选项</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(OUT)</span>:<span class="variable">$(OBJS)</span></span><br><span class="line"> gcc main.o add.o -o main</span><br><span class="line"><span class="section">main.o: main.c compute.h</span></span><br><span class="line"> gcc -c main.c <span class="variable">$(COM_OP)</span></span><br><span class="line"><span class="section">add.o: add.c compute.h</span></span><br><span class="line"> gcc -c add.c <span class="variable">$(COM_OP)</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line"> rm -f <span class="variable">$(OUT)</span> <span class="variable">$(OBJS)</span> </span><br><span class="line"><span class="section">rebuild: clean <span class="variable">$(OUT)</span></span></span><br></pre></td></tr></tbody></table></figure><h5 id="4-2-2-自动变量"><a href="#4-2-2-自动变量" class="headerlink" title="4.2.2 自动变量"></a>4.2.2 自动变量</h5><p>​自动变量是指那些在<strong>规则</strong>执行时<strong>自动设置的变量</strong>，它们通常用于引用规则的目标和依赖项。下面是一些常用的自动变量，<strong>变量名</strong>及其描述如下**(注意是变量名)**：</p><p>​(1).<code>@</code>：表示此规则的目标文件名。</p><p>​(2).<code>&lt;</code>：表示此规则的第一个依赖文件名。</p><p>​(3).<code>^</code>：表示此所有的依赖文件列表，这些依赖项之间以空格分隔。</p><p><strong>注意：这些都只是变量名，要使用这些变量的话，需要在变量名前加字符$（单字符名不用加括号）。</strong></p><p>​继续修改优化前面的代码</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">OUT := main     <span class="comment">#目标文件</span></span><br><span class="line">OBJS := main.o add.o       <span class="comment">#生成目标文件所需要的依赖</span></span><br><span class="line">COM_OP := -Wall -g        <span class="comment">#编译选项</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(OUT)</span>:<span class="variable">$(OBJS)</span></span><br><span class="line">    gcc <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">main.o: main.c compute.h</span></span><br><span class="line">    gcc -c <span class="variable">$&lt;</span> <span class="variable">$(COM_OP)</span></span><br><span class="line"><span class="section">add.o: add.c compute.h</span></span><br><span class="line">    gcc -c <span class="variable">$&lt;</span> <span class="variable">$(COM_OP)</span>                            </span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean rebuild</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -f <span class="variable">$(OUT)</span> <span class="variable">$(OBJS)</span>         </span><br><span class="line"><span class="section">rebuild: clean main</span></span><br></pre></td></tr></tbody></table></figure><h5 id="4-2-3-预定义变量"><a href="#4-2-3-预定义变量" class="headerlink" title="4.2.3 预定义变量"></a>4.2.3 预定义变量</h5><p>​这些都是变量名，要使用这些变量的话，需要在变量名前加字符$以及括号。</p><table><thead><tr><th align="center">变量名</th><th align="center">功能</th><th align="center">默认含义</th></tr></thead><tbody><tr><td align="center">AR</td><td align="center">打包静态库文件</td><td align="center">ar</td></tr><tr><td align="center">AS</td><td align="center">汇编程序</td><td align="center">as</td></tr><tr><td align="center">CC</td><td align="center">C编译器</td><td align="center">cc</td></tr><tr><td align="center">CPP</td><td align="center">C预编译器</td><td align="center">$(CC) -E</td></tr><tr><td align="center">CXX</td><td align="center">C++编译器</td><td align="center">g++</td></tr><tr><td align="center">RM</td><td align="center">删除</td><td align="center">rm –f</td></tr><tr><td align="center">ARFLAGS</td><td align="center">库选项</td><td align="center">无</td></tr><tr><td align="center">ASFLAGS</td><td align="center">汇编选项</td><td align="center">无</td></tr><tr><td align="center">CFLAGS</td><td align="center">C编译器选项</td><td align="center">无</td></tr><tr><td align="center">CPPFLAGS</td><td align="center">C预编译器选项</td><td align="center">无</td></tr><tr><td align="center">CXXFLAGS</td><td align="center">C++编译器选项</td><td align="center">无</td></tr></tbody></table><p>​这些都是变量名，要使用这些变量的话，需要在变量名前加字符$以及括号。</p><h4 id="4-3-模式规则"><a href="#4-3-模式规则" class="headerlink" title="4.3 模式规则"></a>4.3 模式规则</h4><p>​模式规则：用于定义如何从一种类型的文件生成另一种类型的文件，它直接指定了文件之间的转换规则。模式规则下一般使用百分号（%）来表示文件名中的通配符部分。</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%.target : %.source</span><br><span class="line">    commands</span><br></pre></td></tr></tbody></table></figure><p>​解释如下：</p><p>​<code>%.target</code>表示可以匹配任意目标文件。比如<code>%.o</code>表示任意.o文件作为目标</p><p>​<code>%.source</code>表示可以匹配任意依赖文件。比如<code>%.c</code>表示任意.c文件作为依赖</p><p>使用这个模式规则后，Makefile可以自动推导如何从任何 .c 文件生成 .o 文件，这样就可以大幅度简化脚本代码。</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">OUT := main     <span class="comment">#目标文件</span></span><br><span class="line">OBJS := main.o add.o sub.o      <span class="comment">#生成目标文件所需要的依赖</span></span><br><span class="line">COM_OP := -Wall -g        <span class="comment">#编译选项</span></span><br><span class="line">CC := gcc        <span class="comment">#修改CC的默认值</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(OUT)</span>:<span class="variable">$(OBJS)</span></span><br><span class="line">    gcc <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line">%.o : %.c compute.h</span><br><span class="line">    <span class="variable">$(CC)</span> -c <span class="variable">$&lt;</span> <span class="variable">$(COM_OP)</span></span><br><span class="line"><span class="comment">#以下内容可以被上面一个模式规则替代                                                                </span></span><br><span class="line"><span class="comment">#main.o: main.c compute.h</span></span><br><span class="line"><span class="comment">#   $(CC) -c $&lt; $(COM_OP)</span></span><br><span class="line"><span class="comment">#add.o: add.c compute.h</span></span><br><span class="line"><span class="comment">#   $(CC) -c $&lt; $(COM_OP)                            </span></span><br><span class="line"><span class="comment">#sub.o: sub.c compute.h</span></span><br><span class="line"><span class="comment">#   $(CC) -c $&lt; $(COM_OP)                            </span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean rebuild</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -f <span class="variable">$(OUT)</span> <span class="variable">$(OBJS)</span>         </span><br><span class="line"><span class="section">rebuild: clean main</span></span><br></pre></td></tr></tbody></table></figure><p>​注意：</p><p>​(1).模式规则不能作为Makefile的第一个规则</p><p>​(2).模式规则定义了如何将一种类型的文件（比如.c源文件）转换成另一种类型的文件（比如.o目标文件），这种转换是根据文件名模式来完成匹配的。</p><p>​(3).在模式规则中，通配符 <code>%</code> 的匹配是一致的，即目标和依赖列表中 <code>%</code> 所表示的内容是一致的。</p><h4 id="4-4-内置函数"><a href="#4-4-内置函数" class="headerlink" title="4.4 内置函数"></a>4.4 内置函数</h4><p>​Makefile脚本语言，支持函数调用，这种函数，我们称之为**Makefile的”内置函数”**。</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&lt;function&gt; &lt;arguments&gt;)       <span class="comment">#调用时要用小括号把函数名和参数括起来</span></span><br><span class="line">${&lt;function&gt; &lt;arguments&gt;}       <span class="comment">#也可以用大括号括起来，两种方式都可以，使用时二选一</span></span><br></pre></td></tr></tbody></table></figure><p>​解释如下：</p><p>​(1) &lt;function&gt;为函数名。注意尖括号只是为了语法格式美观，它不是实际调用语法的一部分。</p><p>​(2) &lt;arguments&gt;为参数列表，允许出现一个或多个参数，参数之间以逗号分隔。注意尖括号只是为了语法格式美观，它不是实际调用语法的一部分。</p><p>​(3) 函数名和参数列表之间以”空格”分隔。</p><p>​(4) 参数允许有多个，多个参数之间用”,”分隔。</p><p>​<strong>通配符函数</strong>：返回所有符合<pattern>的文件名，文件名之间以空格分隔。</pattern></p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">wildcard</span> &lt;pattern&gt;)</span>   </span><br></pre></td></tr></tbody></table></figure><p>​示例：查找当前目录下，所有以.c结尾的文件名，并将文件名以空格分隔，再赋值给变量SRCS。</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SRCS := <span class="variable">$(<span class="built_in">wildcard</span> *.c)</span></span><br></pre></td></tr></tbody></table></figure><p>​等价于：</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SRCS := main.c add.c sub.c</span><br></pre></td></tr></tbody></table></figure><p>​<strong>模式替换函数</strong>：查找&lt;text&gt;中符合模式&lt;pattern&gt;的单词(单词以空白字符分隔)，将其替换为&lt;replacement&gt;。</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">patsubst</span> &lt;pattern&gt;,&lt;replacement&gt;,&lt;text&gt;)</span></span><br></pre></td></tr></tbody></table></figure><p>​示例：</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OBJS := <span class="variable">$(<span class="built_in">patsubst</span> %.c, %.o, foo.c bar.c)</span></span><br></pre></td></tr></tbody></table></figure><p>​等价于：</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OBJS := foo.c.o bar.o</span><br></pre></td></tr></tbody></table></figure><p>前面的Makefile脚本继续修改</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">OUT := main</span><br><span class="line">SRCS := <span class="variable">$(<span class="built_in">wildcard</span> *.c)</span> <span class="comment">#将当前目录下的所有.c文件的文件名以空格分割，然后赋值给SRCS变量</span></span><br><span class="line">OBJS := <span class="variable">$(<span class="built_in">patsubst</span> %.c,%.o,<span class="variable">$(SRCS)</span>)</span> <span class="comment">#获取当前目录下所有.c文件对应的.o文件，以空格分割             </span></span><br><span class="line">COM_OP := -Wall -g </span><br><span class="line"></span><br><span class="line"><span class="variable">$(OUT)</span>:<span class="variable">$(OBJS)</span></span><br><span class="line">    gcc <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line">%.o : %.c compute.h</span><br><span class="line">    gcc -c <span class="variable">$&lt;</span> <span class="variable">$(COM_OP)</span></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean rebuild</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -f <span class="variable">$(OUT)</span> <span class="variable">$(OBJS)</span>         </span><br><span class="line"><span class="section">rebuild: clean main                                                     </span></span><br></pre></td></tr></tbody></table></figure><p>​只要是在同一个目录中，存在一个主函数，多个.c文件或.h文件最终生成一个可执行程序，这个Makefile就非常好用且通用。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gcc编译工具链的使用</title>
      <link href="/2024/04/24/gcc-bian-yi-gong-ju-lian-de-shi-yong/"/>
      <url>/2024/04/24/gcc-bian-yi-gong-ju-lian-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="GUN工具集——GCC编译工具链"><a href="#GUN工具集——GCC编译工具链" class="headerlink" title="GUN工具集——GCC编译工具链"></a>GUN工具集——GCC编译工具链</h1><h3 id="1-GCC编译工具链"><a href="#1-GCC编译工具链" class="headerlink" title="1.GCC编译工具链"></a>1.GCC编译工具链</h3><p>​代表GNU Compiler Collection，它已经可以支持C、C++、Objective-C、Fortran、Ada、Go和D等多种语言。是Linux操作系统下的默认和标准编译器，也是Linux环境下最主流的编译器。</p><h3 id="2-安装GCC"><a href="#2-安装GCC" class="headerlink" title="2.安装GCC"></a>2.安装GCC</h3><p>​使用以下命令安装，同时安装gcc、gdb以及g++</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc gdb g++</span><br></pre></td></tr></tbody></table></figure><p>​以下命令查看编译器安装版本，gcc版本在4.5以上即可</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -v</span><br></pre></td></tr></tbody></table></figure><h3 id="3-生成可执行文件的过程"><a href="#3-生成可执行文件的过程" class="headerlink" title="3.生成可执行文件的过程"></a>3.生成可执行文件的过程</h3><p>​分为编译和链接两个大过程或者预处理、编译、汇编、链接四个小过程。其中编译包含：预处理、编译(狭义上的编译)、汇编三个小过程。</p><p><img src="/2024/04/24/gcc-bian-yi-gong-ju-lian-de-shi-yong/202402281638189.png" alt="C程序编译和链接的过程-图"></p><p>​<strong>预处理：</strong>-E选项，表示激活预处理过程，生成预处理后的文件，生成<code>.i</code>文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -E hello.c -o hello.i  </span><br></pre></td></tr></tbody></table></figure><p>​<strong>编译：</strong>—S选项，表示激活预处理和编译两个过程，会生成汇编代码文件，生成<code>.s</code>文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -S hello.i -o hello.s</span><br></pre></td></tr></tbody></table></figure><p>​<strong>汇编：</strong>-c选项，激活预处理、编译和汇编三个过程，生成目标文件 (广义上的编译)，生成<code>.o</code>文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c hello.s -o hello.o</span><br></pre></td></tr></tbody></table></figure><p>​<strong>链接：</strong>可以把多个<code>.o</code>目标文件、库文件等相关的文件组合起来，生成一个可执行程序。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o hello </span><br></pre></td></tr></tbody></table></figure><p>​注意，以上每一步都可以直接对<code>.c</code>文件进行处理，会自动完成前面的过程，比如最后的gcc链接会自动对<code>.c</code>文件进行预处理、编译、汇编工作。</p><p>​<strong>-I选项：</strong></p><p>​使用<code>-I</code>指令可以在编译时指定头文件目录</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o hello -I../header</span><br></pre></td></tr></tbody></table></figure><h3 id="4-条件编译"><a href="#4-条件编译" class="headerlink" title="4.条件编译"></a>4.条件编译</h3><p>​<strong>(1).#if预处理指令</strong></p><p>​<code>#if</code>用于在预处理阶段根据条件决定是否包含或者排除某些代码片段。</p><p>​基本#if：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 常量表达式</span></span><br><span class="line"><span class="comment">// 当条件为真（非0）时包含的代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p>​#if 和 #else：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 常量表达式</span></span><br><span class="line"><span class="comment">// 条件为真时包含的代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">// 条件为假时包含的代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p>​#if, #elif, 和 #else：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 常量表达式1</span></span><br><span class="line"><span class="comment">// 常量表达式1为真时包含的代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> 常量表达式2</span></span><br><span class="line"><span class="comment">// 常量表达式1为假且常量表达式2为真时包含的代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">// 上述条件均为假时包含的代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p>​示例：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG 1 <span class="comment">// 当代码上线不需要输出调试信息时，将DEBUG值设置为0</span></span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DEBUG</span></span><br><span class="line">    <span class="comment">// 以下内容属于调试过程需要打印的调试信息</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"i = %d\n"</span>, i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"j = %d\n"</span>, j);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p>​<em><strong>使用#if defined(DEBUG)：</strong></em></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG   <span class="comment">// 通过该行宏定义有无控制是否包含调试信息代码</span></span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(DEBUG)</span></span><br><span class="line">    <span class="comment">// 调试信息代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p>​gcc指令的<code>-D</code>选项可以定义宏。加上该指令就会包含调试信息代码</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o hello.i -DDEBUG</span><br></pre></td></tr></tbody></table></figure><p>​<strong>(2)#ifdef和#ifndef预处理指令</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="comment">// 调试信息代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> 宏(标识符)</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p>​<strong>(3)条件编译作用</strong></p><p>​编写可移植程序</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> defined(WIN32)</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(MAC_OS)</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(LINUX)</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p>​为宏提供默认定义</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BUFFER_SIZE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p>​避免头文件重复包含</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __WD_FOO_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __WD_FOO_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">25</span>];</span><br><span class="line">    <span class="type">char</span> gender;</span><br><span class="line">    <span class="type">int</span> chinese;</span><br><span class="line">    <span class="type">int</span> math;</span><br><span class="line">    <span class="type">int</span> english;</span><br><span class="line">} Student;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p>临时屏蔽代码，尤其是屏蔽包含注释的代码</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line"><span class="comment">// 多行注释被注释起来的代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu网络消失解决办法</title>
      <link href="/2024/04/20/ubuntu-wang-luo-xiao-shi-jie-jue-ban-fa/"/>
      <url>/2024/04/20/ubuntu-wang-luo-xiao-shi-jie-jue-ban-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu网络消失解决办法"><a href="#ubuntu网络消失解决办法" class="headerlink" title="ubuntu网络消失解决办法"></a>ubuntu网络消失解决办法</h1><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>​<code>Ubuntu 18.04.1 LTS</code>在虚拟机打开时偶发网络连接消失的情况。</p><p><img src="/2024/04/20/ubuntu-wang-luo-xiao-shi-jie-jue-ban-fa/image-20240420104903819.png" alt="image-20240420104903819"></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>​1.使用<code>Ctrl+Alt+T</code>打开乌班图的命令行解释器</p><p><img src="/2024/04/20/ubuntu-wang-luo-xiao-shi-jie-jue-ban-fa/image-20240420105055940.png" alt="image-20240420105055940"></p><p>​2.按照以下顺序输入如下命令</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service network-manager stop</span><br><span class="line">$ sudo rm /var/lib/NetworkManager/NetworkManager.state</span><br><span class="line">$ sudo service network-manager start</span><br><span class="line">$ sudo gedit /etc/NetworkManager/NetworkManager.conf</span><br><span class="line">  在运行完上一行的命令后会弹出一个文本文件，将其中的<span class="literal">false</span>改成<span class="literal">true</span></span><br><span class="line">$ sudo service network-manager restart</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/04/20/ubuntu-wang-luo-xiao-shi-jie-jue-ban-fa/image-20240420105444030.png" alt="NetworkManager.conf"></p><p><img src="/2024/04/20/ubuntu-wang-luo-xiao-shi-jie-jue-ban-fa/image-20240420105532303.png" alt="命令行"></p><p>​设置好之后网络出现</p><p><img src="/2024/04/20/ubuntu-wang-luo-xiao-shi-jie-jue-ban-fa/image-20240420105644822.png" alt="image-20240420105644822"></p>]]></content>
      
      
      <categories>
          
          <category> bug修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Issue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_99题解</title>
      <link href="/2024/04/20/leetcode-99-ti-jie/"/>
      <url>/2024/04/20/leetcode-99-ti-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-99题解"><a href="#Leetcode-99题解" class="headerlink" title="Leetcode_99题解"></a>Leetcode_99题解</h1><h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><p>​<a href="https://leetcode.cn/problems/recover-binary-search-tree/">恢复二叉搜索树</a></p><p>​给你二叉搜索树的根节点 <code>root</code> ，该树中的 <strong>恰好</strong> 两个节点的值被错误地交换。<em>请在不改变其结构的情况下，恢复这棵树</em> 。</p><h3 id="2-题解思路"><a href="#2-题解思路" class="headerlink" title="2.题解思路"></a>2.题解思路</h3><p>​第1种：二叉搜索树的顺序刚好是符合树的中序遍历的结果，可以考虑使用中序遍历这个二叉树，设置一个pre指针，记录当前节点中序遍历时的前一个节点。如果当前节点的值小于pre节点的值，说明需要调整次序。使用两个指针pos1和pos2来记录需要交换的节点，pos1记录第一个节点值，pos2记录第二个节点值。如果只出现一次次序错误，那么就是这两个相邻节点需要被交换；如果出现两次次序错误，就需要交换这两个节点。</p><p>​第2中：还是中序遍历的思路。写两个辅助算法，第一个辅助算法用来检查二叉树是否为二叉搜索树。第二个算法就是一次恢复算法，使用pre指针记录中序遍历的前一个节点，如果当前节点的值小于pre节点的值，说明需要调整次序，直接交换当前节点值和pre节点值，如此循环直到遍历结束。在主函数中，使用while循环一直判断二叉树是否为二叉搜索树，如果不是二叉搜索树，就一直执行第二个辅助算法，直到原来二叉树恢复成二叉搜索树；</p><h3 id="3-题解代码"><a href="#3-题解代码" class="headerlink" title="3.题解代码"></a>3.题解代码</h3><p>​第1种：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">recoverTree</span><span class="params">(TreeNode* root)</span> </span>{</span><br><span class="line">        TreeNode *mistake1 = <span class="literal">nullptr</span>, *mistake2 = <span class="literal">nullptr</span>, *prev = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">inorder</span>(root, mistake1, mistake2, prev);</span><br><span class="line">        <span class="keyword">if</span> (mistake1 &amp;&amp; mistake2) {</span><br><span class="line">            <span class="type">int</span> temp = mistake1-&gt;val;</span><br><span class="line">            mistake1-&gt;val = mistake2-&gt;val;</span><br><span class="line">            mistake2-&gt;val = temp;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root, TreeNode*&amp; mistake1, TreeNode*&amp; mistake2, TreeNode*&amp; prev)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (!root) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) {</span><br><span class="line">            <span class="built_in">inorder</span>(root-&gt;left, mistake1, mistake2, prev);</span><br><span class="line">            }</span><br><span class="line">        <span class="keyword">if</span> (prev &amp;&amp; root-&gt;val &lt; prev-&gt;val) {</span><br><span class="line">            <span class="keyword">if</span> (!mistake1) {</span><br><span class="line">                mistake1 = prev;</span><br><span class="line">                mistake2 = root;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                mistake2 = root;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        prev = root;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) {</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;right, mistake1, mistake2, prev);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>​第2种：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">recoverTree</span><span class="params">(TreeNode* root)</span> </span>{</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isSearchBtree</span>(root)){</span><br><span class="line">            <span class="built_in">recoverTreeOneTime</span>(root);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">recoverTreeOneTime</span><span class="params">(TreeNode* root)</span></span>{</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        TreeNode* cur = root, *pre = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur || !st.<span class="built_in">empty</span>()){</span><br><span class="line">            <span class="keyword">if</span>(cur){</span><br><span class="line">                st.<span class="built_in">push</span>(cur);</span><br><span class="line">                cur = cur-&gt;left;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                cur = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(pre &amp;&amp; pre-&gt;val &gt; cur-&gt;val){</span><br><span class="line">                    <span class="built_in">swap</span>(pre-&gt;val, cur-&gt;val);</span><br><span class="line">                }</span><br><span class="line">                pre = cur;</span><br><span class="line">                cur = cur-&gt;right;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSearchBtree</span><span class="params">(TreeNode* root)</span></span>{</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        TreeNode* cur = root, *pre = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur || !st.<span class="built_in">empty</span>()){</span><br><span class="line">            <span class="keyword">if</span>(cur){</span><br><span class="line">                st.<span class="built_in">push</span>(cur);</span><br><span class="line">                cur = cur-&gt;left;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                cur = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(pre &amp;&amp; pre-&gt;val &gt; cur-&gt;val){</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">                pre = cur;</span><br><span class="line">                cur = cur-&gt;right;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_1110题解</title>
      <link href="/2024/04/18/leetcode-1110/"/>
      <url>/2024/04/18/leetcode-1110/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-1110题解"><a href="#Leetcode-1110题解" class="headerlink" title="Leetcode_1110题解"></a>Leetcode_1110题解</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>​<a href="https://leetcode.cn/problems/delete-nodes-and-return-forest/">删点成林</a></p><p>​给出二叉树的根节点 <code>root</code>，树上每个节点都有一个不同的值。</p><p>​如果节点值在 <code>to_delete</code> 中出现，我们就把该节点从树上删去，最后得到一个森林（一些不相交的树构成的集合）。</p><p>​返回森林中的每棵树。你可以按任意顺序组织答案。</p><p><img src="/2024/04/18/leetcode-1110/image-20240418141225748.png" alt="image-20240418141225748"></p><h3 id="题解分析"><a href="#题解分析" class="headerlink" title="题解分析"></a>题解分析</h3><p>​可以使用递归来处理树，考虑到需要不遗漏的处理树中的每一个节点，需要使用后序递归遍历，从下往上，从左往右进行遍历，这样即使分离的原来的二叉树，也不会造成节点遗漏。</p><p>​关键点在于要在什么时候将指针断开，分以下三步考虑。</p><p>​(1).递归处理左子树上的节点</p><p>​(2).递归处理右子树上的节点</p><p>​(3).处理根节点。这是最重要的一步。若根节点当前的节点值等于待删除的节点值，那么二叉树就会在此被分离，根节点左子树或者右子树不空时，分离后就会变成单独的树，此时就将分离的树的根节点存入森林数组中。</p><p>​递归处理树的过程是在一个辅助函数中完成的，为了保证原二叉树的根节点不遗漏，可以创建一个辅助节点当做虚拟根节点。</p><h3 id="题解代码"><a href="#题解代码" class="headerlink" title="题解代码"></a>题解代码</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">delNodes</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; to_delete)</span> </span>{</span><br><span class="line">        vector&lt;TreeNode*&gt; result;</span><br><span class="line">        TreeNode* tmp_root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(to_delete[<span class="number">0</span>], root, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="built_in">postorder</span>(result, tmp_root, to_delete);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">postorder</span><span class="params">(vector&lt;TreeNode*&gt;&amp; result, TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; to_delete)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(!root){</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">bool</span> ret1 = <span class="built_in">postorder</span>(result, root-&gt;left, to_delete);</span><br><span class="line">        <span class="keyword">if</span>(ret1){</span><br><span class="line">            root-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">bool</span> ret2 = <span class="built_in">postorder</span>(result, root-&gt;right, to_delete);</span><br><span class="line">        <span class="keyword">if</span>(ret2){</span><br><span class="line">            root-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; to_delete.<span class="built_in">size</span>(); ++i){</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;val == to_delete[i]){</span><br><span class="line">                <span class="keyword">if</span>(root-&gt;left) result.<span class="built_in">push_back</span>(root-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(root-&gt;right) result.<span class="built_in">push_back</span>(root-&gt;right);</span><br><span class="line">                <span class="keyword">delete</span> root;</span><br><span class="line">                root = <span class="literal">nullptr</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_101题解</title>
      <link href="/2024/04/18/leetcode-101-ti-jie/"/>
      <url>/2024/04/18/leetcode-101-ti-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-101题解"><a href="#Leetcode-101题解" class="headerlink" title="Leetcode_101题解"></a>Leetcode_101题解</h1><h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><p>​<a href="https://leetcode.cn/problems/symmetric-tree/">对称二叉树</a></p><p>​给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</p><h3 id="2-题解思路"><a href="#2-题解思路" class="headerlink" title="2.题解思路"></a>2.题解思路</h3><p>​判断一个二叉树是否对称，等价于判断左右子树是否对称。判断两个子树相等或者对称可以分解为以下几步：</p><p>​(1).如果两个子树都为空指针，则它们相等或者对称。</p><p>​(2).如果两个子树只有一个为空指针，则他们不相等或者不对称</p><p>​(3).如果两个子树根节点值不相同，那么他们不相等或者对称</p><p>​(4).两个子树根节点值相同，进行递归处理</p><h3 id="3-题解代码"><a href="#3-题解代码" class="headerlink" title="3.题解代码"></a>3.题解代码</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bothInOrder</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bothInOrder</span><span class="params">(TreeNode* lt, TreeNode* rt)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(!lt &amp;&amp; !rt) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!lt || !rt) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> lt-&gt;val == rt-&gt;val ? (<span class="built_in">bothInOrder</span>(lt-&gt;left, rt-&gt;right) ? </span><br><span class="line">               <span class="built_in">bothInOrder</span>(lt-&gt;right, rt-&gt;left) : <span class="literal">false</span>) : <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言易错题集合（二）</title>
      <link href="/2024/04/16/di-er-ci-ce-yan-cuo-ti-ji-he/"/>
      <url>/2024/04/16/di-er-ci-ce-yan-cuo-ti-ji-he/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言易错题集合（二）"><a href="#C语言易错题集合（二）" class="headerlink" title="C语言易错题集合（二）"></a>C语言易错题集合（二）</h1><h3 id="1-字符串的赋值函数"><a href="#1-字符串的赋值函数" class="headerlink" title="1.字符串的赋值函数"></a>1.字符串的赋值函数</h3><p><img src="/2024/04/16/di-er-ci-ce-yan-cuo-ti-ji-he/image-20240416090722363-1713234671329-1.png" alt="第一题图"></p><p>程序最终会出现无定义的行为，因为<code>my_strcpy</code>函数返回的是一个局部变量，正确的做法应当是使用saved进行遍历复制，然后返回dest的值。</p><h3 id="2-三级指针"><a href="#2-三级指针" class="headerlink" title="2.三级指针"></a>2.三级指针</h3><p><img src="/2024/04/16/di-er-ci-ce-yan-cuo-ti-ji-he/image-20240416091005085-1713234671329-2.png" alt="第二题图"></p><p>这段代码，<code>test</code>函数接受一个<code>char***</code>的三级指针，即一个指向指针的指针的指针。在 <code>main</code> 函数中，<code>char *str</code> 是一个指向字符串常量的指针，然后通过 <code>char **ptr = &amp;str;</code> 将其地址传递给了 <code>test</code> 函数，最终 <code>test</code> 函数将一个新的字符串复制给了 <code>str</code> 指向的内存位置。因此，终端输出会是 <code>world</code>。</p><p><img src="/2024/04/16/di-er-ci-ce-yan-cuo-ti-ji-he/image-20240416093840314-1713234671329-3.png" alt="内存映射关系"></p><h3 id="3-值传递的描述"><a href="#3-值传递的描述" class="headerlink" title="3.值传递的描述"></a>3.值传递的描述</h3><p>​通过参数直接传递一个全局变量，利用传递的形参, 在函数体内部可以修改原始全局变量的值这个说法对吗？</p><p>​答：不太对。在 C 语言中，通过参数传递一个全局变量的时候，传递的是该全局变量的副本，而不是直接传递原始全局变量本身。在函数内部对这个参数进行修改，只会修改副本的值，不会影响原始全局变量的值。原始全局变量的值只有在函数内部显式地引用时才会被修改。</p><h3 id="4-数组的说法"><a href="#4-数组的说法" class="headerlink" title="4.数组的说法"></a>4.数组的说法</h3><p>​<code>int arr[10];</code> 如果声明在函数体外，那么这10个数组元素具有默认零值。这个说法对吗？</p><p>​答：对的，数组 <code>arr</code> 的指针会被存储在全局数据区，数组的元素在声明会被初始化为零。</p><h3 id="5-const修饰词相关"><a href="#5-const修饰词相关" class="headerlink" title="5.const修饰词相关"></a>5.const修饰词相关</h3><p>​const常量更像一个只读变量，它的取值必须编译时期确定，这个说法对吗？</p><p>​答：不全对。一旦使用const关键字定义了常量，就无法在程序的其他位置修改它的值。尝试这样做会导致编译错误。通常情况下来说，const常量在编译时被视为字面值常量，因此它们的值在编译时期就必须确定，这意味着不能在运行时期给const常量赋值。但在一些情况下，编译器可能会进行某种形式的优化，允许 const 常量在编译时期之前就确定其值。</p><h3 id="6-指针数组和数组指针"><a href="#6-指针数组和数组指针" class="headerlink" title="6.指针数组和数组指针"></a>6.指针数组和数组指针</h3><p>​数组作为参数传递时会退化成指向首元素的指针，二维数组传参就会退化为指向一维数组的指针（数组指针），这个说法对吗？</p><p>​答：答题来说可以算对，只是有一点要注意。当数组作为参数传递时，它确实会退化成指向首元素的指针。这意味着在函数内部，函数接收到的是数组首元素的地址，而不是整个数组的副本，这适用于一维数组和多维数组。但需要澄清二维数组传参时，传递的不是指向一维数组的指针，而是指向（二维）数组首元素的指针。</p><h3 id="7-局部变量"><a href="#7-局部变量" class="headerlink" title="7.局部变量"></a>7.局部变量</h3><p>​局部变量具有默认零值，即便没有手动初始化也可以直接使用，这个说法对吗？</p><p>​答：不正确。局部变量（即在函数内部声明的变量）如果没有被显式初始化，它们的值是不确定的（即未定义行为），而不是默认为零值。试图使用一个未初始化的局部变量，其值将是未定义的，可能是任意的。</p><h3 id="8-int-arr-3-a-p"><a href="#8-int-arr-3-a-p" class="headerlink" title="8.int arr[3], a, *p;"></a>8.<code>int arr[3], a, *p;</code></h3><p>​1).&amp;arr 表示整个数组的地址，类型为 int [3]，是一个指向长度为3的int数组指针？</p><p>​答：错误。<code>&amp;arr</code> 的类型是 <code>int (*)[3]</code>，表示一个指针，指向长度为3的 <code>int</code> 数组。而不是指向长度为3的 <code>int</code> 数组指针。</p><p>​2).p是一个int指针类型，若此声明语句位于函数外部，它是一个野指针?</p><p>​答：错误。<code>p</code> 如果位于函数外部声明，并且没有被初始化，它的值是未定义的，而不是野指针。野指针通常是指未初始化或者指向未知内存区域的指针。未初始化的指针在C语言中具有随机的值，这可能会导致未定义的行为。</p><h3 id="9-空指针"><a href="#9-空指针" class="headerlink" title="9.空指针"></a>9.空指针</h3><p>​操作空指针一定会导致程序报错崩溃？</p><p>​答：错误。操作空指针不一定会导致程序报错或崩溃。在 C 语言中，对空指针进行解引用操作或者访问其指向的内存地址会导致未定义行为。这意味着程序的行为是不确定的，可能会导致崩溃，也可能不会。</p><h3 id="10-main函数命令行"><a href="#10-main函数命令行" class="headerlink" title="10.main函数命令行"></a>10.main函数命令行</h3><p>​对于main函数命令行，如果 argc 的值为 0，那么 argv[0] 将是一个空指针？</p><p>​答：错误。果 <code>argc</code> 的值为 0，表示没有传递任何命令行参数给程序，此时 <code>argv</code> 应该包含一个指针，指向程序的名称（通常是可执行文件的路径），而不是空指针。</p><h3 id="11-C语言结构体"><a href="#11-C语言结构体" class="headerlink" title="11.C语言结构体"></a>11.C语言结构体</h3><p>​1).结构体类型可以进行自我嵌套，即用自身对象作为自身的成员？</p><p>​答：错误。在 C 语言中，不能直接嵌套自身结构体。这样的嵌套会导致结构体的大小无限增长，编译器无法确定结构体的大小，因此是不允许的。</p><p>​2).结构体对象的初始化无论格式和最终效果都类似数组的初始化，但不同的是未明确初始化赋值的成员将具有随机值？</p><p>​答：错误。结构体对象的初始化确实类似于数组的初始化，但与数组不同的是，结构体对象的成员如果没有明确初始化，则其值将取决于该成员的数据类型。对于基本数据类型，未初始化的成员将具有未定义的值，可能是随机值；对于指针类型，未初始化的指针成员将是空指针（即指向 NULL）。</p><h3 id="12-内存分配malloc和calloc"><a href="#12-内存分配malloc和calloc" class="headerlink" title="12.内存分配malloc和calloc"></a>12.内存分配malloc和calloc</h3><p>​malloc 和 calloc的返回值可以直接用int arr[] 类似的声明直接接收？</p><p>​答：错误。<code>malloc</code> 和 <code>calloc</code> 返回的是指向分配内存起始位置的指针，而不是数组本身。这些函数返回的是 <code>void *</code> 类型的指针，因此不能直接用 <code>int arr[]</code> 这样的声明来接收它们的返回值。</p><h3 id="13-函数指针和qsort"><a href="#13-函数指针和qsort" class="headerlink" title="13.函数指针和qsort"></a>13.函数指针和qsort</h3><p>​1).函数指针可以指向任何函数，不论其参数数量和类型？</p><p>​答：错误。在 C 中，函数指针的类型必须与所指向的函数的类型相匹配。这意味着函数指针的参数数量和类型必须与所指向的函数的参数数量和类型完全一致，否则会导致类型不匹配的错误。</p><p>​2).我们手动实现的比较规则函数，返回值类型必须是int，形参也是固定为(const void* a, const void* b)，包括a和b形参名也是固定的？</p><p>​答：错误。虽然在许多情况下，比较规则函数的返回类型是 int，并且形参通常为 <code>(const void* a, const void* b)</code>，但是函数的返回类型和形参名称并不是固定的。你可以根据需要选择合适的名称，只需保持形参的类型为 <code>const void*</code> 即可。形参的类型为 <code>const void*</code> 是因为这样可以让比较函数适用于不同类型的数据，但实际上它们可能指向任何类型的数据。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 易错集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+Hexo插入图片网页端无法显示</title>
      <link href="/2024/04/14/typora-hexo-cha-ru-tu-pian-wang-ye-duan-wu-fa-xian-shi/"/>
      <url>/2024/04/14/typora-hexo-cha-ru-tu-pian-wang-ye-duan-wu-fa-xian-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora-Hexo插入图片网页端无法显示"><a href="#Typora-Hexo插入图片网页端无法显示" class="headerlink" title="Typora+Hexo插入图片网页端无法显示"></a>Typora+Hexo插入图片网页端无法显示</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>​使用Typora编写的文章，使用Hexo部署时图片链接类似<code>update link as:--&gt;/.io//image-20240329223636385.png</code>，而插入的图片在Hexo生成的网页端也无法正常显示，只是显示一个类似如下的图片标题</p><p><img src="/2024/04/14/typora-hexo-cha-ru-tu-pian-wang-ye-duan-wu-fa-xian-shi/image-20240414160536486.png" alt="图片无法显示"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>这是Hexo软件部署的一个bug，域名是xxx.io的情况下，图片路径会从原本/xxx.jpg变成 /.io/xxx.jpg 。文件<code>博客目录\node_modules\hexo-asset-image\index.js</code>中第26行是<code>link = link.substring(beginPos, endPos) + '/' + appendLink</code>，当endPos小于beginPos的时候，link会往回取字符串.io 导致img url 多了/.io ，从而获取不到正确的图片路径</p><p><img src="/2024/04/14/typora-hexo-cha-ru-tu-pian-wang-ye-duan-wu-fa-xian-shi/image-20240414161041619.png" alt="生成错误路径"></p><p>将文件<code>博客目录\node_modules\hexo-asset-image\index.js</code>中第24行的<code>var endPos = link.lastIndexOf('.')</code>修改为<code>var endPos = link.length-1</code>即可解决，生成正确的图片路径，并且可以在网页端正常显示</p><p><img src="/2024/04/14/typora-hexo-cha-ru-tu-pian-wang-ye-duan-wu-fa-xian-shi/image-20240414161906791.png" alt="生成正确路径"></p><p><img src="/2024/04/14/typora-hexo-cha-ru-tu-pian-wang-ye-duan-wu-fa-xian-shi/image-20240414161627247.png" alt="正常显示图片"></p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Issue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github学习笔记--从零开始学习</title>
      <link href="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/"/>
      <url>/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Github-学习笔记——从零开始学习"><a href="#Github-学习笔记——从零开始学习" class="headerlink" title="Github 学习笔记——从零开始学习"></a>Github 学习笔记——从零开始学习</h1><h2 id="一-Git简介"><a href="#一-Git简介" class="headerlink" title="一.Git简介"></a>一.Git简介</h2><h3 id="1-什么是Github"><a href="#1-什么是Github" class="headerlink" title="1.什么是Github"></a>1.什么是Github</h3><p>​Git是目前世界上最先进的分布式版本控制系统，所谓的版本控制系统简单来说就是一个开发软件他可能经过多次的修改，版本控制系统会记录软件版本修改的操作，以便达到对软件版本进行管理的目的</p><h3 id="2-Github-的开发语言"><a href="#2-Github-的开发语言" class="headerlink" title="2.Github 的开发语言"></a>2.Github 的开发语言</h3><p>​Git是Linus（Linux创始人）用C语言开发的。</p><h3 id="3-集中式和分布式的区别"><a href="#3-集中式和分布式的区别" class="headerlink" title="3.集中式和分布式的区别"></a>3.集中式和分布式的区别</h3><p>​集中式版本控制系统，版本库是存放在中央服务器的，需要进行任务工作，必须要从中央服务器取得最新的版本，然后才能进行任务操作，任务完成之后，在将完成好的工作推送给中央服务器。特点就是集中管理存储，需要联网，一旦中央服务器坏的，工作任务就丢失了。</p><p>​分布式版本控制系统，没有所谓的中央服务器，每个人的电脑上都是一个完整的版本库，个人电脑的损坏并不影响整个任务，依旧可以从其他人那里拿到该任务。分布式版本的多人协作就是不同的人对任务进行修改了之后，互相将修改的任务推送给对方，就可以合并修改。分布式版本控制系统的服务器只起到一个中转站的作用，即使服务器损坏，也只是不能通讯，并不会造成丢失。</p><h3 id="4-Github的安装"><a href="#4-Github的安装" class="headerlink" title="4.Github的安装"></a>4.Github的安装</h3><p>​这里只说Linux系统的使用，在Ubuntu Linux系统，使用<code>git</code>命令就能查看系统是否安装Git：</p><p>如果没有安装Git，使用<code>sudo apt-get install git</code>命令进行安装。</p><h2 id="二-Github-的使用（常用命令）"><a href="#二-Github-的使用（常用命令）" class="headerlink" title="二.Github 的使用（常用命令）"></a>二.Github 的使用（常用命令）</h2><h3 id="1-创建版本库"><a href="#1-创建版本库" class="headerlink" title="1.创建版本库"></a>1.创建版本库</h3><p>​使用一个合适的文件夹，可以自己创建一个空目录：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir learngit</span><br><span class="line">$ cd learngit</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326010830274.png"></p><p>通过<code>git init</code>命令把目录变成Git管理的仓库。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326011606475-1713079787321-1.png"></p><p>这个.git里面的文件不要随意修改。请谨慎的在现有文件加上创建Git仓库，以免造成不必要的麻烦。</p><p>​编写一个文件：<code>vim readme.txt</code>，内容如下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></tbody></table></figure><p>​第一步使用<code>git add</code>命令将文件添加到仓库</p><p>​<code>$ git add readme.txt</code></p><p>​第二步使用<code>git commit</code>将文件提交到仓库</p><p>​<code>$ git commit -m "wrote a readme file"</code></p><p>-m 后面的双引号内容为解释信息，可以随意写，但是最好是有意义的文字，可以解释该次提交内容。这里为什么提交内容需要两步呢？解释就是第一步的add命令只是将需要提交的文件放入暂存区，并没有真正的提交，可以随时撤回，真正需要提交时，才使用git commit命令进行提交。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m <span class="string">"add 3 files."</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-Git状态查看和修改"><a href="#2-Git状态查看和修改" class="headerlink" title="2.Git状态查看和修改"></a>2.Git状态查看和修改</h3><p>​使用<code>git status</code>命令可以查看当前状态</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326014147928-1713080149346-4.png"></p><p>​修改文件后，使用<code>git diff</code>命令可以查看对比文件修改前后的差别：</p><p>​<code>$ git diff readme.txt</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326014432507.png"></p><p>​然后再使用add和commit命令可对修改后的内容进行提交</p><h3 id="3-版本的回退"><a href="#3-版本的回退" class="headerlink" title="3.版本的回退"></a>3.版本的回退</h3><p>​使用<code>git log</code>命令可以查看修改的内容和时间节点：</p><p>​<code>$ git log</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326014751283.png"></p><p>​在命令后面加上<code>--pretty=oneline</code>参数可以减少信息量：</p><p>​<code>$ git log --pretty=oneline</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326015010723.png"></p><p>​在Git中使用<code>HEAD</code>表示当前版本，上一个版本是<code>HEAD^</code>，上上一个版本是<code>HEAD^^</code>，当版本数目过多时，比如前100个版本就是<code>HEAD~100</code>。</p><p>​使用<code>git reset</code>命令进行版本回退</p><p>​<code>$ git reset --hard HEAD^</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326015434060.png"></p><p>查看readme.txt内容，版本确实会被还原。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326015605816.png"></p><p>​此时查看版本历史</p><p>​<code>$ git log</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326015719225.png"></p><p>之前的最新版本已经没有了。</p><p>​也可以使用版本号回到指定的版本<code>git reset --hard commit_id</code>，版本号不必写全，Git会自动联想，只要写开头一部分即可。比如再回到之前的最新版本：</p><p>​<code>$ git reset --hard 8ad2d</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326015944370.png"></p><p>查看readme.txt内容，版本确实又回到了最新</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326020038869.png"></p><p>​最后使用<code>git reflog</code>可以记录每一次的命令，即使电脑关电，也能查看之前的版本号</p><p>​<code>$ git reflog</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326020330095.png"></p><p>然后根据版本号进行指定的版本回退。</p><h3 id="4-细说工作区和暂存区"><a href="#4-细说工作区和暂存区" class="headerlink" title="4.细说工作区和暂存区"></a>4.细说工作区和暂存区</h3><p>​工作区：电脑里面能看到的目录，比如前面的learngit文件夹就是一个工作区</p><p>​版本库：工作区的隐藏目录<code>.git</code>，这个文件夹是Git的版本库。暂存区就是在版本库里面，称为stage（index），本测试用系统Git暂存区实际是index。还有一个自动创建的第一个分支<code>master</code>，还有指向<code>master</code>的指针叫做<code>HEAD</code>。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326185145666.png"></p><p>​Git中将文件像Git版本库添加时，分两步执行：第一步使用<code>git add</code>将文件修改添加到暂存区；第二步使用<code>git commit</code>提交更改，实际就是把暂存区的所以内容提交到当前分支。总的来说，就是把需要提交的文件修改通通放大暂存区，然后一次性提交暂存区的所有修改。</p><p>​修改readme.txt和添加LICENSE文件后，使用<code>git status</code>查看状态：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326185328952.png"></p><p>​使用<code>git add</code>添加到暂存区：</p><p>​<code>$ git add readme.txt LICENSE</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326185420310.png"></p><p>​使用vim 编辑器查看index文件<code>vim index</code>可以看到暂存区内容：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326185623463.png"></p><p>​HEAD内容为：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326185714299.png"></p><p>​执行<code>git commit</code>命令可以把暂存区所有修改提交到分支master：</p><p>​<code>$ git commit -m "understand how stage works"</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326190141435.png"></p><p>​此时再查看工作区状态，工作区变得很干净：</p><p>​<code>git status</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326190315704.png"></p><p>​再查看暂存区index里面的内容，发现没有stage相关的任何内容：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326190428171.png"></p><h3 id="5-修改的管理"><a href="#5-修改的管理" class="headerlink" title="5.修改的管理"></a>5.修改的管理</h3><p>​Git跟踪管理的不是文件，而是修改。所谓的修改，就是对某个文件的增删改查，Git就是对这个修改进行记录。</p><p>​进行实验，继续对readme.txt进行修改，增加一行内容<code>Git tracks changes.</code>：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326191108016.png"></p><p>​进行添加：</p><p>​<code>$ git add readme.txt</code></p><p>​<code>$ gut status</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326191809750.png"></p><p>​继续修改readme.txt，增加·<code>of files.</code>：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326192009764.png"></p><p>​直接提交：</p><p>​<code>$ git commit -m "git tracks changes"</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326192643506.png"></p><p>​查看状态：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326220604915.png"></p><p>可以看到，第二次的修改其实是没有被提交的，这是因为第二次的修改并没有使用<code>git add</code>命令，只有第一次的修改使用了该命令，修改被放入暂存区，准备提交，第二次修改没有放入暂存区，没有被提交，<code>git commit</code>只负责把暂存区的修改进行提交。</p><h3 id="6-撤销修改"><a href="#6-撤销修改" class="headerlink" title="6.撤销修改"></a>6.撤销修改</h3><p>​对readme.txt进行修改，加入一个错误行，内容为<code>My stupid boss still prefers SVN</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326221514267.png"></p><p>​查看使用<code>git status</code></p><p>​使用<code>git checkout -- file</code>可以丢弃工作区的修改，即把file文件在工作区的修改全部撤销。注意，该撤销只能撤销回到最近一次<code>git commit</code>或者<code>git add</code>时的状态</p><p>​<code>git checkout -- readme.txt</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326222155921.png"></p><p>​</p><p>​注意，这里的命令里面的<code>--</code>不能省略，否则命令含义会发生变化。</p><p>​除了使用<code>git checkout -- file</code>之外，还可以使用命令<code>git reset HEAD &lt;file&gt;</code>来把暂存区的修改撤掉，重新放回工作区，其中<code>HEAD</code>表示最新的版本。</p><p>​如果已经将版本提交到版本库，那么就可以使用版本回退功能回退到上一个版本。</p><h3 id="7-文件的删除"><a href="#7-文件的删除" class="headerlink" title="7.文件的删除"></a>7.文件的删除</h3><p>​文件删除也是一种修改，通常有两种选择从版本库删除该文件。</p><p>​一种就是使用命令<code>git rm</code>并且<code>git commit</code></p><p>​<code>$ git rm test.txt</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326224626224.png"></p><p>​<code>$ git commit -m "remove test.txt"</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326224820764.png"></p><p>​另一种是删除错了，需要对误删除的文件进行恢复到最新版本</p><p>​<code>git checkout -- test.txt</code></p><p>​<code>git checkout</code>的实际操作就是用版本库里面的版本替换工作区里面的版本，无论工作区是删除或者修改，都可以一键还原。</p><h2 id="三-Github远程仓库"><a href="#三-Github远程仓库" class="headerlink" title="三.Github远程仓库"></a>三.Github远程仓库</h2><h3 id="1-添加远程仓库"><a href="#1-添加远程仓库" class="headerlink" title="1.添加远程仓库"></a>1.添加远程仓库</h3><p>​之前的操作是基于本地的Git仓库，需要在Github创建一个远程仓库，并且让两个仓库进行远程同步，远程仓库的可以当做备份也能够进行共享，进行协同开发。</p><p>​想要创建远程仓库，首先需要登录Github，使用Creat a new repository，创建一个新仓库。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329161257584.png"></p><p>创建好的新仓库后，会提示使用这个仓库克隆新的仓库，或者把已有的本地仓库和它相关联，之后把本地仓库内容推送到Github。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329162129516.png"></p><p>​使用<code>git remote add origin git@github.com:nofishisme/learngit.git</code> 添加远程仓库，将本地仓库和远程仓库关联，远程仓库名字默认是<code>origin</code>，可以进行修改，但是一般不建议。</p><p>​然后使用<code>git push -u origin master</code>将本地库的内容推送到远程库上面去。最新2024年3/29进行操作，出现了错误，存在以下提示：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329170140417.png"></p><p>可以使用https的方式解决，将.git/config里面url后的内容改成https的形式。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329170530194.png"></p><p>改成</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329170609688.png"></p><p>改完之后直接使用<code>git push -u origin master</code>会提示输入账号密码，但是最后又报错说该方式已经无法使用，需要继续更换方式。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329171202848.png"></p><p>​解决办法使用生成令牌token，具体教程参考<a href="https://blog.csdn.net/yjw123456/article/details/119696726">【突发】解决remote: Support for password authentication was removed on August 13, 2021. Please use a perso-CSDN博客</a>，其核心就是将生成的令牌号与之前url 后的链接相结合，url后的链接变为<code>https://&lt;your_token&gt;@github.com/&lt;USERNAME&gt;/&lt;REPO&gt;.git</code>，其中<your_token>用令牌码替换，<username>使用用户名替换，<repo>用项目名字替换，最终结果为如下：</repo></username></your_token></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240409151326400.png"></p><p>又出现问题，截图如下：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240409151449288.png"></p><p>解决办法是查看git是否使用代理。后发现是因为挂了代理出现了问题，关闭掉代理后可正常提交。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329174831106.png"></p><p>​终于，艰难操作之后，将本地库的内容推送到了远程，将本地库内容推送到远程，使用git push命令，实际上是把当前分支master推送到远程。</p><p>​<strong>总结，关联一个远程库，有效的做法是使用命令以下命令：</strong></p><p>​<strong><code>git remote add origin https://&lt;your_token&gt;@github.com/&lt;USERNAME&gt;/&lt;REPO&gt;.git</code></strong></p><p><strong>其中的token需要自己在Git上申请。</strong></p><p>​远程库是空的，第一次推送<code>master</code>分支时，加上<code>-u</code>参数，Git会同时把本地的<code>master</code>分支内容推送远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，以后推送和拉取就能简化命令。</p><p>​后续，本地的提交，都可以通过<code>git push origin master</code>将本地<code>master</code>分支的最新修改推送到Github。</p><h3 id="2-删除远程库"><a href="#2-删除远程库" class="headerlink" title="2.删除远程库"></a>2.删除远程库</h3><p>​使用<code>git remote rm &lt;name&gt;</code>命令可以删除远程库，删除前，使用<code>git remote -v</code>查看远程库信息。</p><p>​该删除只是解除远程和本地的绑定关系，并不是物理上删除了远程库，远程库本身没有任何改动。真正的删除远程库，需要登录到Github进行删除。</p><p>​补充（2024/4/4）：语句命令<code>find . -name ".git" | xargs rm -Rf</code>可以解除本地文件夹的仓库身份</p><h3 id="3-远程库克隆"><a href="#3-远程库克隆" class="headerlink" title="3.远程库克隆"></a>3.远程库克隆</h3><p>​前面是先创建本地库，再关联远程库，但是最好的方式就是先创建远程库，然后从远程库进行克隆。</p><p>​新建一个仓库，取名为gitskills，勾选<code>Initialize this repository with a README</code>，Github就会自动创建一个README.md文件。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329223013705.png"></p><p>​使用命名<code>git clone</code>克隆一个本地库</p><p>​<code>$ git clone https://github.com/nofishisme/gitskills.git</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329223636385.png"></p><p>​<font color="red">在这里使用命令<code>git clone git@github.com:nofishisme/gitskills.git</code>还是会报错，提示无法识别远程仓库，后续提供解决使用SSH的解决办法。</font></p><h3 id="4-解决SSH无法使用的办法"><a href="#4-解决SSH无法使用的办法" class="headerlink" title="4.解决SSH无法使用的办法"></a>4.解决SSH无法使用的办法</h3><p>​从一开始，使用SSH相关的命令，都会提示出错：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330163607318.png"></p><p>显示无法读取到远程仓库，这是因为没有使用SSH秘钥，需要对Github配置SSH秘钥连接。</p><p>​1.打开终端；</p><p>​2.输入命令生成密钥<code>ssh-keygen -t rsa -C "Your_email@example.com"</code></p><p>​3.输入您要保存密钥文件的路径和名称，或者直接敲击回车键选择默认值，例如：/home/YourName/.ssh/id_rsa；</p><p>​4.在弹出的窗口中输入密码，或者直接敲击回车键选择不设置密码；</p><p>​5.成功生成SSH Key 会提示<code>The key's randomart image is:</code>，并显示一个图形，然后得到一个公共密钥（id_rsa.pub）和一个私有密钥（id_rsa）</p><p>​这时已经成功地生成了 SSH 密钥对。公钥是要提供给远程服务器的，私钥则要保留在本地，并加以保护。另外，如果您想要让 SSH 代理管理您的密钥，您还需要在本地配置 SSH 代理。</p><p>​Github添加SSH秘钥，找到settings，SSH and GPG keys</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240406190742881.png"></p><h2 id="四-Git分支管理"><a href="#四-Git分支管理" class="headerlink" title="四.Git分支管理"></a>四.Git分支管理</h2><h3 id="1-分支管理"><a href="#1-分支管理" class="headerlink" title="1.分支管理"></a>1.分支管理</h3><p>​分支管理就是在原来分支上提取一个分支，该分支不对原分支造成影响，再对提取的分支进行操作后，再与原来的分支进行合并，这样的分支功能既安全又不会影响别人的正常工作。</p><h3 id="2-创建和合并分支"><a href="#2-创建和合并分支" class="headerlink" title="2.创建和合并分支"></a>2.创建和合并分支</h3><p>​每次提交，Git就把它们串成一条时间线，这条时间线就是一个分支。最开始，只有一条时间线，被称之为主分支，也就是<code>master</code>分支。<code>HEAD</code>并不是指向提交而是指向<code>master</code>，而<font color="red"><code>master</code>是指向提交的</font>，也就是说，<font color="red"><code>HEAD</code>指向当前分支</font>。</p><p>​<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330210804245.png"></p><p>​每一次提交，<code>master</code>分支都会向前移动一步，随着不断的提交，<code>master</code>分支会越来越长。</p><p>​可以创建一个新的分支，取名叫<code>dev</code>，Git会新建一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330211003451.png"></p><p>​新增了<code>dev</code>分支后，后续的工作区的修改就是针对<code>dev</code>分支了，每产生一次新的提交，<code>dev</code>指针就往前移动一步，但是<code>master</code>指针不变。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330211301479.png"></p><p>​合并分支最简单的方法就是直接把<code>master</code>指向<code>dev</code>的当前提交，就能完成合并。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330211538039.png"></p><p>​合并完成之后，也可以直接删除<code>dev</code>分支，删掉后就剩下<code>master</code>一条分支。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330211723712.png"></p><p>​首先，创建<code>dev</code>分支并切换到<code>dev</code>分支，其中<code>-b</code>参数表示创建并切换：</p><p>​<code>$ git checkout -b dev</code>或者<code>$ git switch -c dev</code></p><p>或者</p><p>​<code>$ git branch dev</code></p><p>​<code>$ git checkout dev</code>或者<code>$ git switch dev</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330212728803.png"></p><p>可以换使用<code>git branch</code>命令查看当前分支</p><p>​<code>$ git branch</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330213110302.png"></p><p>可以看见，当前分支就是<code>dev</code>，前面会加上<code>*</code>号。</p><p>​在<code>dev</code>分支上对<code>readme.txt</code>进行修改，新增一行<code>Creating a new branch is quick.</code>，并进行提交。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330213403992.png"></p><p>完成<code>dev</code>分支工作后，使用命令<code>git checkout master</code>切回主分支。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330213549904.png"></p><p>切换为主分支后发现<code>readme.txt</code>里面并没有新添加的内容，这是因为那个提交在分支<code>dev</code>上，但是<code>master</code>分支没有变。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330213808972.png"></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330213941825.png"></p><p>​使用命令<code>git merge dev</code>可以将<code>dev</code>分支的工作成果合并到当前的<code>master</code>分支上。</p><p>​<code>$ git merge dev</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330214222923.png"></p><p>​注意提示中的<code>Fast-forward</code>，其表示这次合并是“快进模式”，直接把<code>master</code>指针指向<code>dev</code>的当前提交，所以合并速度非常快。</p><p>​合并完成之后，就可以删除分支<code>dev</code></p><p>​<code>$ git branch -d dev</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330214626426.png"></p><p>​使用branch很快，也很安全，所以提倡使用分支来完成某个任务。</p><p>​注意，如果使用命令<code>git switch -c &lt;name&gt;</code>提示不是一个git命令，那么可能是本地git的版本有问题，使用命令<code>git --version</code>可以查看当前的git版本。</p><p>​<code>git --version</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330221434777.png"></p><p>​可以使用命令将git版本升级，无论是否安装git，都可以使用以下命令安装最新版本的git。</p><p>​<code>$ sudo add-apt-repository ppa:git-core/ppa</code></p><p>​<code>$ sudo apt update</code></p><p>​<code>$ sudo apt install git</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330222225349.png"></p><h3 id="3-分支冲突解决"><a href="#3-分支冲突解决" class="headerlink" title="3.分支冲突解决"></a>3.分支冲突解决</h3><p>​新建一个分支，进行冲冲突测试，创建一个分支<code>feature1</code>，并切换到分支，修改<code>readme.txt</code>内容，最后一行添加<code>Creating a new branch is quick AND simple.</code>，并在分支<code>feature1</code>上进行提交，再切换会<code>master</code>分支，会提示当前的<code>master</code>分支比远程的<code>master</code>分支要超前一个提交。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330222801601.png"></p><p>同时修改<code>master</code>分子里面的<code>readme.txt</code>文件，最后一行添加<code>Creating a new branch is quick &amp; simple.</code>。可以看到，<code>master</code>分支里面添加的内容和<code>feature1</code>分支里面添加内容不一致，也将<code>master</code>分支内容提交。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330223643971.png"></p><p>于是<code>master</code>分支和<code>feature1</code>分支都有了自己新的提交：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330223944465.png"></p><p>​在这种情况下，Git无法执行快速合并，只能尝试将各自修改合并，但是可能产生冲突。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330224139469.png"></p><p>​合并产生冲突，必须要解决冲突之后才能提交。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330224238595.png"></p><p>​可以直接查看待修改文件的内容进行修正，这里是<code>readme.txt</code>文件：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330224441136.png"></p><p>​<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>表示不同分支的内容。可以直接手动修改内容，然后提交，这里修改为</p><p><code>Creating a new branch is quick and simple</code>，合并的情况如下：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330224822991.png"></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330224921848.png"></p><p>​使用带参数的命令<code>git log</code>可以查看分支合并情况。</p><p>​<code>$ git log --graph --pretty=oneline --abbrev-commit</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330225225751.png"></p><p>​最后，再删除<code>feature1</code>分支。</p><p>​<code>$ git branch -d feature1</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330225401642.png"></p><h3 id="4-分支管理策略"><a href="#4-分支管理策略" class="headerlink" title="4.分支管理策略"></a>4.分支管理策略</h3><p>​Git通常会倾向于使用<code>Fast forward</code>的合并模式，但是这种模式下删除分支会丢掉分支信息。强行禁用<code>Fast forward</code>模式，Git会在merge时生成一个新的commit，这样就可以从分支历史上看出分支信息。</p><p>​以下为<code>--no-ff</code>方式的<code>git merge</code></p><p>​创建新的分支<code>dev</code>并且切换到分支<code>dev</code>，在分支<code>dev</code>修改<code>readme.txt</code>的内容然后进行提交，在切换会主<code>master</code>分支。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240331113854165.png"></p><p>这里提示分支领先‘origin/master’共四个提交时因为本地仓库没有提交更新到远程仓库。</p><p>​使用<code>--no-ff</code>参数来进行分支<code>dev</code>的合并，表示禁用<code>Fast forward</code>：</p><p>​<code>$ git merge --no-ff -m "merge with no-ff" dev</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240331114257986.png"></p><p>本次合并要创建一个新的<code>commit</code>，所以要加上<code>-m</code>参数，把<code>commit</code>的描述写进去。</p><p>​查看分支历史：</p><p>​<code>$ git log --graph --pretty=oneline --abbrev-commit</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240331115907594.png"></p><p>​<code>fast forward</code>模式的合并看不出曾经有合并，而加上<code>--no-ff</code>参数后就可以用普通模式合并，能看到历史分支。</p><h3 id="5-用于BUG的分支"><a href="#5-用于BUG的分支" class="headerlink" title="5.用于BUG的分支"></a>5.用于BUG的分支</h3><p>​当软件开发中遇到bug时，可以创建一个临时分支来进行修复，修复后在合并分支，然后删除临时分支。‘</p><p>​当遇到bug需要处理，但是当前工作区任务却并没有完成，则可以使用<code>git stash</code>命令可以将当前工作现场”储藏“起来，等后面恢复现场后继续工作，然后再创建分支进行bug处理。需要在哪个分支进行bug处理，就要在哪个分支创建上创建临时分支。</p><p>​1.创建并切换到分支<code>issue-101</code></p><p>​2.修复需要修改的文件，修改完成后添加提交到git</p><p>​3.切换到主分支master(main)</p><p>​4.使用非forward的方式进行分支合并</p><p>​5.删除分支<code>issue-101</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240331232650035.png"></p><p>​使用命令<code>git stash list</code>可以查看被保存的工作现场，可以使用两种方法进行恢复。一是使用命令<code>git stash apply</code>进行恢复，恢复后stash内容并不会删除，需要使用<code>git stash drop</code>来删除。二是使用命令<code>git stash pop</code>，恢复的同时把stash内容也删除了。</p><p>​如果除了主分支<code>master</code>外，在<code>dev</code>分支上也有同样的bug，怎么解决呢？解决办法有两种。</p><p>​操作一是在<code>dev</code>分支上进行之前同样的操作。</p><p>​更简单的操作二是把<code>b196443 fix bug 101</code>这个提交所做的修改“复制”到<code>dev</code>分支，使用命令<code>git cherry-pick</code>可以复制一个特定的提交到当前分支。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240331233022179.png"></p><p>​可以看到这里的提交就是分支<code>dev 2e26da0</code>，虽然两个提交改动相同，但是实际是和master不同的分支。</p><h3 id="6-新功能Feature分支"><a href="#6-新功能Feature分支" class="headerlink" title="6.新功能Feature分支"></a>6.新功能Feature分支</h3><p>​每当要添加一个新功能时，为了防止实验代码把主分支代码打乱，会新建一个feature分支，在上面开发完成后再进行合并，然后再删除feature分支。</p><p>​假设要开发一个代号为FishOS的功能。</p><p>​1.新建分支</p><p>​<code>$git switch -c feature-FishOS</code></p><p>​2.开发完成后添加提交</p><p>​<code>$ git add FishOS.cpp</code></p><p>​<code>$ git commit -m "add feature FishOS"</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413085011309.png"></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413084954056.png"></p><p>​3.切换回<code>dev</code>，准备合并</p><p>​<code>$git switch dev</code></p><p>​正常情况下，feature可以正常合并，删除。但是假设项目出了问题，新功能必须取消，而且还要删除这个新的分支，</p><p>​<code>$ git branch -d feature-FishOS</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413085520707.png"></p><p>​提示分支未合并，不能删除，但是可以强制删除</p><p>​<code>$ git branch -D feature-FishOS</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413085646363.png"></p><h3 id="7-多人合作"><a href="#7-多人合作" class="headerlink" title="7.多人合作"></a>7.多人合作</h3><p>​远程分支的克隆，就是本地的master分支和远程的master分支对应起来，远程默认仓库名称是origin。</p><p>​使用命令<code>git remote</code>或者<code>git remote -v</code>可以显示远程库信息</p><p>​使用命令<code>$ git push origin master</code>就可以把本地master分支上的所有本地提交推送到远程库对应的远程分支上，如果要推送其他分支，更改最后的本地分支名字：<code>$git push origin dev</code>进行推送即可</p><p>​分支推送的必要性：</p><p>​1.master分支是主分支，要时刻与远程同步</p><p>​2.dev分支是开发分支，团队所有成员需要在上面工作，所以也需要与远程同步</p><p>​3.其余的的bug和feature分支依据情况而定</p><p>​<strong>分支的抓取(fork)</strong></p><p>​使用另一个电脑（添加SSH key到github，<a href="#4.解决SSH无法使用的办法">教程前面有：Ctrl&nbsp;+&nbsp;左键点击</a>）或者同一个电脑的另一个目录下进行克隆：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413093911487.png"></p><p>​从别人的仓库克隆或者克隆别人仓库时，默认情况下只能看到本地的master分支</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413094402282.png"></p><p>​如果要进行远程开发，就必须要新建远程origin的dev分支到本地</p><p>​<code>$ git checkout -b dev origin/dev</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413101002880.png"></p><p>​<em><strong><u>注：这里出现了一个错误，在克隆时远程仓库并没有dev分支导致无法在新克隆的仓库中使用上述命令创建分支dev</u></strong></em></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413101250705.png"></p><p>​这里的解决方式是在新克隆的仓库（nofish@ubuntu:<del>/git_study/learngit$ ）里创建<code>dev</code>分支<code>git switch -c dev</code>,然后在dev分支里面做修改并且提交推送到远程仓库，这个时候远程仓库机会存在dev分支。然后再回到原始的仓库（nofish@ubuntu:</del>/learngit$ ），用<code>git pull</code>命令拉取远程仓库，拉取完成后使用<code>git branch</code>查看本地分支会发现也只有master分支，不存在dev分支，但是命令<code>git checkout -b dev origin/dev</code>已经可以使用。</p><pre><code> 解决分支问题后，就是要在分支上进行修改创建，</code></pre><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413102642243.png"></p><p>​其他人对远程仓库的dev分支进行推送之后，如果自己又对同样的文件做了修改，并且尝试推送</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413103451983.png"></p><p>​发现自己修改无法进行推送，这是因为别人的最新提交和自己的推送提交有冲突，解决办法就是，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再进行推送</p><p>​<code>$ git pull</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413104130825.png"></p><p>​发现<code>git pull</code>失败，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接</p><p>​<code>$ git branch --set-upstream-to=origin/dev dev</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413104428335.png"></p><p>​再进行<code>git pull</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413104609642.png"></p><p>​拉取成功但是合并有冲突，需要手动解决合并问题，如果没有设置合并方式，会先提示上图的冲突解决策略，这里选择的是<code>git config pull.rebase false</code>。然后再使用<code>git pull</code>命令进行拉取</p><p>​<code>$ git config pull.rebase false</code></p><p>​<code>$ git pull</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413105629008.png"></p><p>​这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的<a href="#3.分支冲突解决">分支冲突解决：Ctrl + 左键点击</a>完全一样。解决后，提交，再push：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413111816758.png"></p><p>​多人工作模式总结：</p><p>​1.先试用命令<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</p><p>​2.如果推送失败，就是远程分支比本地更新，先试图用<code>git pull</code>合并；</p><p>​3.合并产生冲突，需要解决冲突，再本地提交；</p><p>​4.没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</p><p>​注：如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><h2 id="五-常用命令集合"><a href="#五-常用命令集合" class="headerlink" title="五.常用命令集合"></a>五.常用命令集合</h2><p>​</p><table><thead><tr><th align="center">命令</th><th align="center">作用</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center"><code>git</code></td><td align="center">在linux系统上查看有没有安装Git</td><td align="center">sudo apt-get install git使用以上命令可以安装</td></tr><tr><td align="center"><code>git init</code></td><td align="center">通过git init命令把这个目录变成Git可以管理的仓库</td><td align="center"></td></tr><tr><td align="center"><code>git add &lt;file&gt;</code></td><td align="center">用命令git add告诉Git，把文件添加到仓库</td><td align="center">第一步使用git add添加</td></tr><tr><td align="center"><code>git commit -m &lt;message&gt;</code></td><td align="center">用命令git commit告诉Git，把文件提交到仓库</td><td align="center">第二步使用git commit提交</td></tr><tr><td align="center"><code>git push -u origin master</code></td><td align="center">将本地仓库提交推送到远程仓库</td><td align="center">加<code>-u</code>表示第一次提交时创建远程仓库</td></tr><tr><td align="center"><code>git status</code></td><td align="center">运行git status命令查看当前仓库状态</td><td align="center"></td></tr><tr><td align="center"><code>git diff &lt;file&gt;</code></td><td align="center">用git diff这个命令查看file文件的修改对比</td><td align="center">查看difference，显示的格式正是Unix通用的diff格式</td></tr><tr><td align="center"><code>git log</code></td><td align="center">git log命令显示从最近到最远的提交日志</td><td align="center">如果嫌输出信息太多，看得眼花缭乱的，可以试试加上–pretty=oneline参数</td></tr><tr><td align="center"><code>git reset --hard HEAD^</code></td><td align="center">版本回退到上一个版本</td><td align="center"></td></tr><tr><td align="center"><code>git reset --hard commit_id</code></td><td align="center">版本回退到指定版本</td><td align="center">版本号不必写全</td></tr><tr><td align="center"><code>git reflog</code></td><td align="center">记录每一次的命令</td><td align="center">即使电脑关电，也能查看之前的版本号</td></tr><tr><td align="center"><code>git checkout -- file</code></td><td align="center">撤销工作区的修改</td><td align="center">该撤销只能撤销回到最近一次<code>git commit</code>或者<code>git add</code>时的状态</td></tr><tr><td align="center"><code>git reset HEAD &lt;file&gt;</code></td><td align="center">把暂存区的修改撤掉，重新放回工作区</td><td align="center">其中<code>HEAD</code>表示最新的版本</td></tr><tr><td align="center"><code>git rm &lt;file&gt;</code></td><td align="center">从版本库删除该文件</td><td align="center">需要配合<code>git commit -m &lt;message&gt;</code>提交修改</td></tr><tr><td align="center"><code>git checkout -- &lt;file&gt;</code></td><td align="center">对误删除的文件进行恢复到最新版本</td><td align="center"></td></tr><tr><td align="center"><code>git remote add origin &lt;rep&gt;</code></td><td align="center">添加远程仓库</td><td align="center">需要远程仓库已创建</td></tr><tr><td align="center"><code>git remote rm &lt;name&gt;</code></td><td align="center">删除远程库</td><td align="center">该删除只是解除远程和本地的绑定关系，并不是物理上删除了远程库</td></tr><tr><td align="center"><code>git clone &lt;rep&gt;</code></td><td align="center">克隆一个仓库</td><td align="center"></td></tr><tr><td align="center"><code>git checkout -b &lt;name&gt;</code></td><td align="center">创建一个分支，并切换到该分支</td><td align="center"></td></tr><tr><td align="center"><code>git switch -c &lt;name&gt;</code></td><td align="center">创建一个分支，并切换到该分支</td><td align="center"></td></tr><tr><td align="center"><code>git merge &lt;name&gt;</code></td><td align="center">将分支<name>和主分支合并</name></td><td align="center">默认是Fast-forward的合并模式</td></tr><tr><td align="center"><code>git merge --no-ff -m &lt;message&gt;</code></td><td align="center">将分支<name>和主分支合并</name></td><td align="center">不使用Fast-forward的合并模式</td></tr><tr><td align="center"><code>git branch</code></td><td align="center">查看当前分支</td><td align="center">加上<code>-a</code>查看当前所有分支，包括远程仓库</td></tr><tr><td align="center"><code>git log --graph --pretty=oneline --abbrev-commit</code></td><td align="center">查看分支合并情况</td><td align="center">图形化界面</td></tr><tr><td align="center"><code>git branch -d &lt;name&gt;</code></td><td align="center">删除一个分支</td><td align="center"></td></tr></tbody></table><h2 id="六-相关学习"><a href="#六-相关学习" class="headerlink" title="六.相关学习"></a>六.相关学习</h2><p>​可视化学习网站<a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Branching</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言易错题集合（一）</title>
      <link href="/2024/04/07/di-yi-ci-ce-yan-cuo-ti-ji-he/"/>
      <url>/2024/04/07/di-yi-ci-ce-yan-cuo-ti-ji-he/</url>
      
        <content type="html"><![CDATA[<h1 id="第一次测验错题集合"><a href="#第一次测验错题集合" class="headerlink" title="第一次测验错题集合"></a>第一次测验错题集合</h1><h3 id="1-变量的声明和定义区别"><a href="#1-变量的声明和定义区别" class="headerlink" title="1.变量的声明和定义区别"></a>1.变量的声明和定义区别</h3><p>​变量的声明和变量的定义</p><p>​声明是告诉编译器变量的类型，名字等信息</p><p>​定义是声明加上运行时给变量分配内存空间</p><p>​定义是包含声明的，但不是所有的声明都是定义</p><p>​也就是说有一些声明，他只是编译作用，而不会在运行时分配内存</p><h3 id="2-C语言基本数据类型"><a href="#2-C语言基本数据类型" class="headerlink" title="2.C语言基本数据类型"></a>2.C语言基本数据类型</h3><p>​除了int自己，所有的整型实际上都要包含int，但可以省略</p><p>​short int(integer)</p><p>​long int</p><p>​long long int</p><p>​unsigned int</p><p>​由于unsigned int可以省略为unsigned</p><p>​所以也可以将它视为基本数据类型</p><h3 id="3-goto使用"><a href="#3-goto使用" class="headerlink" title="3.goto使用"></a>3.goto使用</h3><p>​goto在现代C/C++中，不要随意去使用</p><p>​如果要用，一般是以下两个场景：</p><p>​1.跳出外层循环</p><p>​2.错误处理</p><h3 id="4-运算符优先级"><a href="#4-运算符优先级" class="headerlink" title="4.运算符优先级"></a>4.运算符优先级</h3><p>​一元运算符的优先级总是比二元运算符优先级高</p><p>​二元运算符中，算术运算符优先级最高</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 易错集合 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
