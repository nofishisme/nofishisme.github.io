<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode_101题解</title>
      <link href="/2024/04/18/leetcode-101-ti-jie/"/>
      <url>/2024/04/18/leetcode-101-ti-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-101题解"><a href="#Leetcode-101题解" class="headerlink" title="Leetcode_101题解"></a>Leetcode_101题解</h1><h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><p>​<a href="https://leetcode.cn/problems/symmetric-tree/">对称二叉树</a></p><p>​给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</p><h3 id="2-题解思路"><a href="#2-题解思路" class="headerlink" title="2.题解思路"></a>2.题解思路</h3><p>​判断一个二叉树是否对称，等价于判断左右子树是否对称。判断两个子树相等或者对称可以分解为以下几步：</p><p>​(1).如果两个子树都为空指针，则它们相等或者对称。</p><p>​(2).如果两个子树只有一个为空指针，则他们不相等或者不对称</p><p>​(3).如果两个子树根节点值不相同，那么他们不相等或者对称</p><p>​(4).两个子树根节点值相同，进行递归处理</p><h3 id="3-题解代码"><a href="#3-题解代码" class="headerlink" title="3.题解代码"></a>3.题解代码</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution {</span><br><span class="line">public:</span><br><span class="line">    bool isSymmetric(TreeNode* root) {</span><br><span class="line">        return bothInOrder(root-&gt;left, root-&gt;right);</span><br><span class="line">    }</span><br><span class="line">    bool bothInOrder(TreeNode* lt, TreeNode* rt){</span><br><span class="line">        if(!lt &amp;&amp; !rt) {</span><br><span class="line">            return true;</span><br><span class="line">        }</span><br><span class="line">        else if(!lt || !rt) {</span><br><span class="line">            return false;</span><br><span class="line">        }</span><br><span class="line">        return lt-&gt;val == rt-&gt;val ? (bothInOrder(lt-&gt;left, rt-&gt;right) ? </span><br><span class="line">               bothInOrder(lt-&gt;right, rt-&gt;left) : false) : false;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言易错题集合（二）</title>
      <link href="/2024/04/16/di-er-ci-ce-yan-cuo-ti-ji-he/"/>
      <url>/2024/04/16/di-er-ci-ce-yan-cuo-ti-ji-he/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言易错题集合（二）"><a href="#C语言易错题集合（二）" class="headerlink" title="C语言易错题集合（二）"></a>C语言易错题集合（二）</h1><h3 id="1-字符串的赋值函数"><a href="#1-字符串的赋值函数" class="headerlink" title="1.字符串的赋值函数"></a>1.字符串的赋值函数</h3><p><img src="/2024/04/16/di-er-ci-ce-yan-cuo-ti-ji-he/image-20240416090722363-1713234671329-1.png" alt="第一题图"></p><p>程序最终会出现无定义的行为，因为<code>my_strcpy</code>函数返回的是一个局部变量，正确的做法应当是使用saved进行遍历复制，然后返回dest的值。</p><h3 id="2-三级指针"><a href="#2-三级指针" class="headerlink" title="2.三级指针"></a>2.三级指针</h3><p><img src="/2024/04/16/di-er-ci-ce-yan-cuo-ti-ji-he/image-20240416091005085-1713234671329-2.png" alt="第二题图"></p><p>这段代码，<code>test</code>函数接受一个<code>char***</code>的三级指针，即一个指向指针的指针的指针。在 <code>main</code> 函数中，<code>char *str</code> 是一个指向字符串常量的指针，然后通过 <code>char **ptr = &amp;str;</code> 将其地址传递给了 <code>test</code> 函数，最终 <code>test</code> 函数将一个新的字符串复制给了 <code>str</code> 指向的内存位置。因此，终端输出会是 <code>world</code>。</p><p><img src="/2024/04/16/di-er-ci-ce-yan-cuo-ti-ji-he/image-20240416093840314-1713234671329-3.png" alt="内存映射关系"></p><h3 id="3-值传递的描述"><a href="#3-值传递的描述" class="headerlink" title="3.值传递的描述"></a>3.值传递的描述</h3><p>​通过参数直接传递一个全局变量，利用传递的形参, 在函数体内部可以修改原始全局变量的值这个说法对吗？</p><p>​答：不太对。在 C 语言中，通过参数传递一个全局变量的时候，传递的是该全局变量的副本，而不是直接传递原始全局变量本身。在函数内部对这个参数进行修改，只会修改副本的值，不会影响原始全局变量的值。原始全局变量的值只有在函数内部显式地引用时才会被修改。</p><h3 id="4-数组的说法"><a href="#4-数组的说法" class="headerlink" title="4.数组的说法"></a>4.数组的说法</h3><p>​<code>int arr[10];</code> 如果声明在函数体外，那么这10个数组元素具有默认零值。这个说法对吗？</p><p>​答：对的，数组 <code>arr</code> 的指针会被存储在全局数据区，数组的元素在声明会被初始化为零。</p><h3 id="5-const修饰词相关"><a href="#5-const修饰词相关" class="headerlink" title="5.const修饰词相关"></a>5.const修饰词相关</h3><p>​const常量更像一个只读变量，它的取值必须编译时期确定，这个说法对吗？</p><p>​答：不全对。一旦使用const关键字定义了常量，就无法在程序的其他位置修改它的值。尝试这样做会导致编译错误。通常情况下来说，const常量在编译时被视为字面值常量，因此它们的值在编译时期就必须确定，这意味着不能在运行时期给const常量赋值。但在一些情况下，编译器可能会进行某种形式的优化，允许 const 常量在编译时期之前就确定其值。</p><h3 id="6-指针数组和数组指针"><a href="#6-指针数组和数组指针" class="headerlink" title="6.指针数组和数组指针"></a>6.指针数组和数组指针</h3><p>​数组作为参数传递时会退化成指向首元素的指针，二维数组传参就会退化为指向一维数组的指针（数组指针），这个说法对吗？</p><p>​答：答题来说可以算对，只是有一点要注意。当数组作为参数传递时，它确实会退化成指向首元素的指针。这意味着在函数内部，函数接收到的是数组首元素的地址，而不是整个数组的副本，这适用于一维数组和多维数组。但需要澄清二维数组传参时，传递的不是指向一维数组的指针，而是指向（二维）数组首元素的指针。</p><h3 id="7-局部变量"><a href="#7-局部变量" class="headerlink" title="7.局部变量"></a>7.局部变量</h3><p>​局部变量具有默认零值，即便没有手动初始化也可以直接使用，这个说法对吗？</p><p>​答：不正确。局部变量（即在函数内部声明的变量）如果没有被显式初始化，它们的值是不确定的（即未定义行为），而不是默认为零值。试图使用一个未初始化的局部变量，其值将是未定义的，可能是任意的。</p><h3 id="8-int-arr-3-a-p"><a href="#8-int-arr-3-a-p" class="headerlink" title="8.int arr[3], a, *p;"></a>8.<code>int arr[3], a, *p;</code></h3><p>​1).&amp;arr 表示整个数组的地址，类型为 int [3]，是一个指向长度为3的int数组指针？</p><p>​答：错误。<code>&amp;arr</code> 的类型是 <code>int (*)[3]</code>，表示一个指针，指向长度为3的 <code>int</code> 数组。而不是指向长度为3的 <code>int</code> 数组指针。</p><p>​2).p是一个int指针类型，若此声明语句位于函数外部，它是一个野指针?</p><p>​答：错误。<code>p</code> 如果位于函数外部声明，并且没有被初始化，它的值是未定义的，而不是野指针。野指针通常是指未初始化或者指向未知内存区域的指针。未初始化的指针在C语言中具有随机的值，这可能会导致未定义的行为。</p><h3 id="9-空指针"><a href="#9-空指针" class="headerlink" title="9.空指针"></a>9.空指针</h3><p>​操作空指针一定会导致程序报错崩溃？</p><p>​答：错误。操作空指针不一定会导致程序报错或崩溃。在 C 语言中，对空指针进行解引用操作或者访问其指向的内存地址会导致未定义行为。这意味着程序的行为是不确定的，可能会导致崩溃，也可能不会。</p><h3 id="10-main函数命令行"><a href="#10-main函数命令行" class="headerlink" title="10.main函数命令行"></a>10.main函数命令行</h3><p>​对于main函数命令行，如果 argc 的值为 0，那么 argv[0] 将是一个空指针？</p><p>​答：错误。果 <code>argc</code> 的值为 0，表示没有传递任何命令行参数给程序，此时 <code>argv</code> 应该包含一个指针，指向程序的名称（通常是可执行文件的路径），而不是空指针。</p><h3 id="11-C语言结构体"><a href="#11-C语言结构体" class="headerlink" title="11.C语言结构体"></a>11.C语言结构体</h3><p>​1).结构体类型可以进行自我嵌套，即用自身对象作为自身的成员？</p><p>​答：错误。在 C 语言中，不能直接嵌套自身结构体。这样的嵌套会导致结构体的大小无限增长，编译器无法确定结构体的大小，因此是不允许的。</p><p>​2).结构体对象的初始化无论格式和最终效果都类似数组的初始化，但不同的是未明确初始化赋值的成员将具有随机值？</p><p>​答：错误。结构体对象的初始化确实类似于数组的初始化，但与数组不同的是，结构体对象的成员如果没有明确初始化，则其值将取决于该成员的数据类型。对于基本数据类型，未初始化的成员将具有未定义的值，可能是随机值；对于指针类型，未初始化的指针成员将是空指针（即指向 NULL）。</p><h3 id="12-内存分配malloc和calloc"><a href="#12-内存分配malloc和calloc" class="headerlink" title="12.内存分配malloc和calloc"></a>12.内存分配malloc和calloc</h3><p>​malloc 和 calloc的返回值可以直接用int arr[] 类似的声明直接接收？</p><p>​答：错误。<code>malloc</code> 和 <code>calloc</code> 返回的是指向分配内存起始位置的指针，而不是数组本身。这些函数返回的是 <code>void *</code> 类型的指针，因此不能直接用 <code>int arr[]</code> 这样的声明来接收它们的返回值。</p><h3 id="13-函数指针和qsort"><a href="#13-函数指针和qsort" class="headerlink" title="13.函数指针和qsort"></a>13.函数指针和qsort</h3><p>​1).函数指针可以指向任何函数，不论其参数数量和类型？</p><p>​答：错误。在 C 中，函数指针的类型必须与所指向的函数的类型相匹配。这意味着函数指针的参数数量和类型必须与所指向的函数的参数数量和类型完全一致，否则会导致类型不匹配的错误。</p><p>​2).我们手动实现的比较规则函数，返回值类型必须是int，形参也是固定为(const void* a, const void* b)，包括a和b形参名也是固定的？</p><p>​答：错误。虽然在许多情况下，比较规则函数的返回类型是 int，并且形参通常为 <code>(const void* a, const void* b)</code>，但是函数的返回类型和形参名称并不是固定的。你可以根据需要选择合适的名称，只需保持形参的类型为 <code>const void*</code> 即可。形参的类型为 <code>const void*</code> 是因为这样可以让比较函数适用于不同类型的数据，但实际上它们可能指向任何类型的数据。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 易错集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+Hexo插入图片网页端无法显示</title>
      <link href="/2024/04/14/typora-hexo-cha-ru-tu-pian-wang-ye-duan-wu-fa-xian-shi/"/>
      <url>/2024/04/14/typora-hexo-cha-ru-tu-pian-wang-ye-duan-wu-fa-xian-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora-Hexo插入图片网页端无法显示"><a href="#Typora-Hexo插入图片网页端无法显示" class="headerlink" title="Typora+Hexo插入图片网页端无法显示"></a>Typora+Hexo插入图片网页端无法显示</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>​使用Typora编写的文章，使用Hexo部署时图片链接类似<code>update link as:--&gt;/.io//image-20240329223636385.png</code>，而插入的图片在Hexo生成的网页端也无法正常显示，只是显示一个类似如下的图片标题</p><p><img src="/2024/04/14/typora-hexo-cha-ru-tu-pian-wang-ye-duan-wu-fa-xian-shi/image-20240414160536486.png" alt="图片无法显示"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>这是Hexo软件部署的一个bug，域名是xxx.io的情况下，图片路径会从原本/xxx.jpg变成 /.io/xxx.jpg 。文件<code>博客目录\node_modules\hexo-asset-image\index.js</code>中第26行是<code>link = link.substring(beginPos, endPos) + '/' + appendLink</code>，当endPos小于beginPos的时候，link会往回取字符串.io 导致img url 多了/.io ，从而获取不到正确的图片路径</p><p><img src="/2024/04/14/typora-hexo-cha-ru-tu-pian-wang-ye-duan-wu-fa-xian-shi/image-20240414161041619.png" alt="生成错误路径"></p><p>将文件<code>博客目录\node_modules\hexo-asset-image\index.js</code>中第24行的<code>var endPos = link.lastIndexOf('.')</code>修改为<code>var endPos = link.length-1</code>即可解决，生成正确的图片路径，并且可以在网页端正常显示</p><p><img src="/2024/04/14/typora-hexo-cha-ru-tu-pian-wang-ye-duan-wu-fa-xian-shi/image-20240414161906791.png" alt="生成正确路径"></p><p><img src="/2024/04/14/typora-hexo-cha-ru-tu-pian-wang-ye-duan-wu-fa-xian-shi/image-20240414161627247.png" alt="正常显示图片"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Issue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github学习笔记--从零开始学习</title>
      <link href="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/"/>
      <url>/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Github-学习笔记——从零开始学习"><a href="#Github-学习笔记——从零开始学习" class="headerlink" title="Github 学习笔记——从零开始学习"></a>Github 学习笔记——从零开始学习</h1><h2 id="一-Git简介"><a href="#一-Git简介" class="headerlink" title="一.Git简介"></a>一.Git简介</h2><h3 id="1-什么是Github"><a href="#1-什么是Github" class="headerlink" title="1.什么是Github"></a>1.什么是Github</h3><p>​Git是目前世界上最先进的分布式版本控制系统，所谓的版本控制系统简单来说就是一个开发软件他可能经过多次的修改，版本控制系统会记录软件版本修改的操作，以便达到对软件版本进行管理的目的</p><h3 id="2-Github-的开发语言"><a href="#2-Github-的开发语言" class="headerlink" title="2.Github 的开发语言"></a>2.Github 的开发语言</h3><p>​Git是Linus（Linux创始人）用C语言开发的。</p><h3 id="3-集中式和分布式的区别"><a href="#3-集中式和分布式的区别" class="headerlink" title="3.集中式和分布式的区别"></a>3.集中式和分布式的区别</h3><p>​集中式版本控制系统，版本库是存放在中央服务器的，需要进行任务工作，必须要从中央服务器取得最新的版本，然后才能进行任务操作，任务完成之后，在将完成好的工作推送给中央服务器。特点就是集中管理存储，需要联网，一旦中央服务器坏的，工作任务就丢失了。</p><p>​分布式版本控制系统，没有所谓的中央服务器，每个人的电脑上都是一个完整的版本库，个人电脑的损坏并不影响整个任务，依旧可以从其他人那里拿到该任务。分布式版本的多人协作就是不同的人对任务进行修改了之后，互相将修改的任务推送给对方，就可以合并修改。分布式版本控制系统的服务器只起到一个中转站的作用，即使服务器损坏，也只是不能通讯，并不会造成丢失。</p><h3 id="4-Github的安装"><a href="#4-Github的安装" class="headerlink" title="4.Github的安装"></a>4.Github的安装</h3><p>​这里只说Linux系统的使用，在Ubuntu Linux系统，使用<code>git</code>命令就能查看系统是否安装Git：</p><p>如果没有安装Git，使用<code>sudo apt-get install git</code>命令进行安装。</p><h2 id="二-Github-的使用（常用命令）"><a href="#二-Github-的使用（常用命令）" class="headerlink" title="二.Github 的使用（常用命令）"></a>二.Github 的使用（常用命令）</h2><h3 id="1-创建版本库"><a href="#1-创建版本库" class="headerlink" title="1.创建版本库"></a>1.创建版本库</h3><p>​使用一个合适的文件夹，可以自己创建一个空目录：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir learngit</span><br><span class="line">$ cd learngit</span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326010830274.png"></p><p>通过<code>git init</code>命令把目录变成Git管理的仓库。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326011606475-1713079787321-1.png"></p><p>这个.git里面的文件不要随意修改。请谨慎的在现有文件加上创建Git仓库，以免造成不必要的麻烦。</p><p>​编写一个文件：<code>vim readme.txt</code>，内容如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></tbody></table></figure><p>​第一步使用<code>git add</code>命令将文件添加到仓库</p><p>​<code>$ git add readme.txt</code></p><p>​第二步使用<code>git commit</code>将文件提交到仓库</p><p>​<code>$ git commit -m "wrote a readme file"</code></p><p>-m 后面的双引号内容为解释信息，可以随意写，但是最好是有意义的文字，可以解释该次提交内容。这里为什么提交内容需要两步呢？解释就是第一步的add命令只是将需要提交的文件放入暂存区，并没有真正的提交，可以随时撤回，真正需要提交时，才使用git commit命令进行提交。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m "add 3 files."</span><br></pre></td></tr></tbody></table></figure><h3 id="2-Git状态查看和修改"><a href="#2-Git状态查看和修改" class="headerlink" title="2.Git状态查看和修改"></a>2.Git状态查看和修改</h3><p>​使用<code>git status</code>命令可以查看当前状态</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326014147928-1713080149346-4.png"></p><p>​修改文件后，使用<code>git diff</code>命令可以查看对比文件修改前后的差别：</p><p>​<code>$ git diff readme.txt</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326014432507.png"></p><p>​然后再使用add和commit命令可对修改后的内容进行提交</p><h3 id="3-版本的回退"><a href="#3-版本的回退" class="headerlink" title="3.版本的回退"></a>3.版本的回退</h3><p>​使用<code>git log</code>命令可以查看修改的内容和时间节点：</p><p>​<code>$ git log</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326014751283.png"></p><p>​在命令后面加上<code>--pretty=oneline</code>参数可以减少信息量：</p><p>​<code>$ git log --pretty=oneline</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326015010723.png"></p><p>​在Git中使用<code>HEAD</code>表示当前版本，上一个版本是<code>HEAD^</code>，上上一个版本是<code>HEAD^^</code>，当版本数目过多时，比如前100个版本就是<code>HEAD~100</code>。</p><p>​使用<code>git reset</code>命令进行版本回退</p><p>​<code>$ git reset --hard HEAD^</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326015434060.png"></p><p>查看readme.txt内容，版本确实会被还原。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326015605816.png"></p><p>​此时查看版本历史</p><p>​<code>$ git log</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326015719225.png"></p><p>之前的最新版本已经没有了。</p><p>​也可以使用版本号回到指定的版本<code>git reset --hard commit_id</code>，版本号不必写全，Git会自动联想，只要写开头一部分即可。比如再回到之前的最新版本：</p><p>​<code>$ git reset --hard 8ad2d</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326015944370.png"></p><p>查看readme.txt内容，版本确实又回到了最新</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326020038869.png"></p><p>​最后使用<code>git reflog</code>可以记录每一次的命令，即使电脑关电，也能查看之前的版本号</p><p>​<code>$ git reflog</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326020330095.png"></p><p>然后根据版本号进行指定的版本回退。</p><h3 id="4-细说工作区和暂存区"><a href="#4-细说工作区和暂存区" class="headerlink" title="4.细说工作区和暂存区"></a>4.细说工作区和暂存区</h3><p>​工作区：电脑里面能看到的目录，比如前面的learngit文件夹就是一个工作区</p><p>​版本库：工作区的隐藏目录<code>.git</code>，这个文件夹是Git的版本库。暂存区就是在版本库里面，称为stage（index），本测试用系统Git暂存区实际是index。还有一个自动创建的第一个分支<code>master</code>，还有指向<code>master</code>的指针叫做<code>HEAD</code>。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326185145666.png"></p><p>​Git中将文件像Git版本库添加时，分两步执行：第一步使用<code>git add</code>将文件修改添加到暂存区；第二步使用<code>git commit</code>提交更改，实际就是把暂存区的所以内容提交到当前分支。总的来说，就是把需要提交的文件修改通通放大暂存区，然后一次性提交暂存区的所有修改。</p><p>​修改readme.txt和添加LICENSE文件后，使用<code>git status</code>查看状态：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326185328952.png"></p><p>​使用<code>git add</code>添加到暂存区：</p><p>​<code>$ git add readme.txt LICENSE</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326185420310.png"></p><p>​使用vim 编辑器查看index文件<code>vim index</code>可以看到暂存区内容：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326185623463.png"></p><p>​HEAD内容为：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326185714299.png"></p><p>​执行<code>git commit</code>命令可以把暂存区所有修改提交到分支master：</p><p>​<code>$ git commit -m "understand how stage works"</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326190141435.png"></p><p>​此时再查看工作区状态，工作区变得很干净：</p><p>​<code>git status</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326190315704.png"></p><p>​再查看暂存区index里面的内容，发现没有stage相关的任何内容：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326190428171.png"></p><h3 id="5-修改的管理"><a href="#5-修改的管理" class="headerlink" title="5.修改的管理"></a>5.修改的管理</h3><p>​Git跟踪管理的不是文件，而是修改。所谓的修改，就是对某个文件的增删改查，Git就是对这个修改进行记录。</p><p>​进行实验，继续对readme.txt进行修改，增加一行内容<code>Git tracks changes.</code>：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326191108016.png"></p><p>​进行添加：</p><p>​<code>$ git add readme.txt</code></p><p>​<code>$ gut status</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326191809750.png"></p><p>​继续修改readme.txt，增加·<code>of files.</code>：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326192009764.png"></p><p>​直接提交：</p><p>​<code>$ git commit -m "git tracks changes"</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326192643506.png"></p><p>​查看状态：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326220604915.png"></p><p>可以看到，第二次的修改其实是没有被提交的，这是因为第二次的修改并没有使用<code>git add</code>命令，只有第一次的修改使用了该命令，修改被放入暂存区，准备提交，第二次修改没有放入暂存区，没有被提交，<code>git commit</code>只负责把暂存区的修改进行提交。</p><h3 id="6-撤销修改"><a href="#6-撤销修改" class="headerlink" title="6.撤销修改"></a>6.撤销修改</h3><p>​对readme.txt进行修改，加入一个错误行，内容为<code>My stupid boss still prefers SVN</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326221514267.png"></p><p>​查看使用<code>git status</code></p><p>​使用<code>git checkout -- file</code>可以丢弃工作区的修改，即把file文件在工作区的修改全部撤销。注意，该撤销只能撤销回到最近一次<code>git commit</code>或者<code>git add</code>时的状态</p><p>​<code>git checkout -- readme.txt</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326222155921.png"></p><p>​</p><p>​注意，这里的命令里面的<code>--</code>不能省略，否则命令含义会发生变化。</p><p>​除了使用<code>git checkout -- file</code>之外，还可以使用命令<code>git reset HEAD &lt;file&gt;</code>来把暂存区的修改撤掉，重新放回工作区，其中<code>HEAD</code>表示最新的版本。</p><p>​如果已经将版本提交到版本库，那么就可以使用版本回退功能回退到上一个版本。</p><h3 id="7-文件的删除"><a href="#7-文件的删除" class="headerlink" title="7.文件的删除"></a>7.文件的删除</h3><p>​文件删除也是一种修改，通常有两种选择从版本库删除该文件。</p><p>​一种就是使用命令<code>git rm</code>并且<code>git commit</code></p><p>​<code>$ git rm test.txt</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326224626224.png"></p><p>​<code>$ git commit -m "remove test.txt"</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240326224820764.png"></p><p>​另一种是删除错了，需要对误删除的文件进行恢复到最新版本</p><p>​<code>git checkout -- test.txt</code></p><p>​<code>git checkout</code>的实际操作就是用版本库里面的版本替换工作区里面的版本，无论工作区是删除或者修改，都可以一键还原。</p><h2 id="三-Github远程仓库"><a href="#三-Github远程仓库" class="headerlink" title="三.Github远程仓库"></a>三.Github远程仓库</h2><h3 id="1-添加远程仓库"><a href="#1-添加远程仓库" class="headerlink" title="1.添加远程仓库"></a>1.添加远程仓库</h3><p>​之前的操作是基于本地的Git仓库，需要在Github创建一个远程仓库，并且让两个仓库进行远程同步，远程仓库的可以当做备份也能够进行共享，进行协同开发。</p><p>​想要创建远程仓库，首先需要登录Github，使用Creat a new repository，创建一个新仓库。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329161257584.png"></p><p>创建好的新仓库后，会提示使用这个仓库克隆新的仓库，或者把已有的本地仓库和它相关联，之后把本地仓库内容推送到Github。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329162129516.png"></p><p>​使用<code>git remote add origin git@github.com:nofishisme/learngit.git</code> 添加远程仓库，将本地仓库和远程仓库关联，远程仓库名字默认是<code>origin</code>，可以进行修改，但是一般不建议。</p><p>​然后使用<code>git push -u origin master</code>将本地库的内容推送到远程库上面去。最新2024年3/29进行操作，出现了错误，存在以下提示：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329170140417.png"></p><p>可以使用https的方式解决，将.git/config里面url后的内容改成https的形式。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329170530194.png"></p><p>改成</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329170609688.png"></p><p>改完之后直接使用<code>git push -u origin master</code>会提示输入账号密码，但是最后又报错说该方式已经无法使用，需要继续更换方式。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329171202848.png"></p><p>​解决办法使用生成令牌token，具体教程参考<a href="https://blog.csdn.net/yjw123456/article/details/119696726">【突发】解决remote: Support for password authentication was removed on August 13, 2021. Please use a perso-CSDN博客</a>，其核心就是将生成的令牌号与之前url 后的链接相结合，url后的链接变为<code>https://&lt;your_token&gt;@github.com/&lt;USERNAME&gt;/&lt;REPO&gt;.git</code>，其中<your_token>用令牌码替换，<username>使用用户名替换，<repo>用项目名字替换，最终结果为如下：</repo></username></your_token></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240409151326400.png"></p><p>又出现问题，截图如下：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240409151449288.png"></p><p>解决办法是查看git是否使用代理。后发现是因为挂了代理出现了问题，关闭掉代理后可正常提交。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329174831106.png"></p><p>​终于，艰难操作之后，将本地库的内容推送到了远程，将本地库内容推送到远程，使用git push命令，实际上是把当前分支master推送到远程。</p><p>​<strong>总结，关联一个远程库，有效的做法是使用命令以下命令：</strong></p><p>​<strong><code>git remote add origin https://&lt;your_token&gt;@github.com/&lt;USERNAME&gt;/&lt;REPO&gt;.git</code></strong></p><p><strong>其中的token需要自己在Git上申请。</strong></p><p>​远程库是空的，第一次推送<code>master</code>分支时，加上<code>-u</code>参数，Git会同时把本地的<code>master</code>分支内容推送远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，以后推送和拉取就能简化命令。</p><p>​后续，本地的提交，都可以通过<code>git push origin master</code>将本地<code>master</code>分支的最新修改推送到Github。</p><h3 id="2-删除远程库"><a href="#2-删除远程库" class="headerlink" title="2.删除远程库"></a>2.删除远程库</h3><p>​使用<code>git remote rm &lt;name&gt;</code>命令可以删除远程库，删除前，使用<code>git remote -v</code>查看远程库信息。</p><p>​该删除只是解除远程和本地的绑定关系，并不是物理上删除了远程库，远程库本身没有任何改动。真正的删除远程库，需要登录到Github进行删除。</p><p>​补充（2024/4/4）：语句命令<code>find . -name ".git" | xargs rm -Rf</code>可以解除本地文件夹的仓库身份</p><h3 id="3-远程库克隆"><a href="#3-远程库克隆" class="headerlink" title="3.远程库克隆"></a>3.远程库克隆</h3><p>​前面是先创建本地库，再关联远程库，但是最好的方式就是先创建远程库，然后从远程库进行克隆。</p><p>​新建一个仓库，取名为gitskills，勾选<code>Initialize this repository with a README</code>，Github就会自动创建一个README.md文件。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329223013705.png"></p><p>​使用命名<code>git clone</code>克隆一个本地库</p><p>​<code>$ git clone https://github.com/nofishisme/gitskills.git</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240329223636385.png"></p><p>​<font color="red">在这里使用命令<code>git clone git@github.com:nofishisme/gitskills.git</code>还是会报错，提示无法识别远程仓库，后续提供解决使用SSH的解决办法。</font></p><h3 id="4-解决SSH无法使用的办法"><a href="#4-解决SSH无法使用的办法" class="headerlink" title="4.解决SSH无法使用的办法"></a>4.解决SSH无法使用的办法</h3><p>​从一开始，使用SSH相关的命令，都会提示出错：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330163607318.png"></p><p>显示无法读取到远程仓库，这是因为没有使用SSH秘钥，需要对Github配置SSH秘钥连接。</p><p>​1.打开终端；</p><p>​2.输入命令生成密钥<code>ssh-keygen -t rsa -C "Your_email@example.com"</code></p><p>​3.输入您要保存密钥文件的路径和名称，或者直接敲击回车键选择默认值，例如：/home/YourName/.ssh/id_rsa；</p><p>​4.在弹出的窗口中输入密码，或者直接敲击回车键选择不设置密码；</p><p>​5.成功生成SSH Key 会提示<code>The key's randomart image is:</code>，并显示一个图形，然后得到一个公共密钥（id_rsa.pub）和一个私有密钥（id_rsa）</p><p>​这时已经成功地生成了 SSH 密钥对。公钥是要提供给远程服务器的，私钥则要保留在本地，并加以保护。另外，如果您想要让 SSH 代理管理您的密钥，您还需要在本地配置 SSH 代理。</p><p>​Github添加SSH秘钥，找到settings，SSH and GPG keys</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240406190742881.png"></p><h2 id="四-Git分支管理"><a href="#四-Git分支管理" class="headerlink" title="四.Git分支管理"></a>四.Git分支管理</h2><h3 id="1-分支管理"><a href="#1-分支管理" class="headerlink" title="1.分支管理"></a>1.分支管理</h3><p>​分支管理就是在原来分支上提取一个分支，该分支不对原分支造成影响，再对提取的分支进行操作后，再与原来的分支进行合并，这样的分支功能既安全又不会影响别人的正常工作。</p><h3 id="2-创建和合并分支"><a href="#2-创建和合并分支" class="headerlink" title="2.创建和合并分支"></a>2.创建和合并分支</h3><p>​每次提交，Git就把它们串成一条时间线，这条时间线就是一个分支。最开始，只有一条时间线，被称之为主分支，也就是<code>master</code>分支。<code>HEAD</code>并不是指向提交而是指向<code>master</code>，而<font color="red"><code>master</code>是指向提交的</font>，也就是说，<font color="red"><code>HEAD</code>指向当前分支</font>。</p><p>​<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330210804245.png"></p><p>​每一次提交，<code>master</code>分支都会向前移动一步，随着不断的提交，<code>master</code>分支会越来越长。</p><p>​可以创建一个新的分支，取名叫<code>dev</code>，Git会新建一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330211003451.png"></p><p>​新增了<code>dev</code>分支后，后续的工作区的修改就是针对<code>dev</code>分支了，每产生一次新的提交，<code>dev</code>指针就往前移动一步，但是<code>master</code>指针不变。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330211301479.png"></p><p>​合并分支最简单的方法就是直接把<code>master</code>指向<code>dev</code>的当前提交，就能完成合并。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330211538039.png"></p><p>​合并完成之后，也可以直接删除<code>dev</code>分支，删掉后就剩下<code>master</code>一条分支。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330211723712.png"></p><p>​首先，创建<code>dev</code>分支并切换到<code>dev</code>分支，其中<code>-b</code>参数表示创建并切换：</p><p>​<code>$ git checkout -b dev</code>或者<code>$ git switch -c dev</code></p><p>或者</p><p>​<code>$ git branch dev</code></p><p>​<code>$ git checkout dev</code>或者<code>$ git switch dev</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330212728803.png"></p><p>可以换使用<code>git branch</code>命令查看当前分支</p><p>​<code>$ git branch</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330213110302.png"></p><p>可以看见，当前分支就是<code>dev</code>，前面会加上<code>*</code>号。</p><p>​在<code>dev</code>分支上对<code>readme.txt</code>进行修改，新增一行<code>Creating a new branch is quick.</code>，并进行提交。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330213403992.png"></p><p>完成<code>dev</code>分支工作后，使用命令<code>git checkout master</code>切回主分支。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330213549904.png"></p><p>切换为主分支后发现<code>readme.txt</code>里面并没有新添加的内容，这是因为那个提交在分支<code>dev</code>上，但是<code>master</code>分支没有变。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330213808972.png"></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330213941825.png"></p><p>​使用命令<code>git merge dev</code>可以将<code>dev</code>分支的工作成果合并到当前的<code>master</code>分支上。</p><p>​<code>$ git merge dev</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330214222923.png"></p><p>​注意提示中的<code>Fast-forward</code>，其表示这次合并是“快进模式”，直接把<code>master</code>指针指向<code>dev</code>的当前提交，所以合并速度非常快。</p><p>​合并完成之后，就可以删除分支<code>dev</code></p><p>​<code>$ git branch -d dev</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330214626426.png"></p><p>​使用branch很快，也很安全，所以提倡使用分支来完成某个任务。</p><p>​注意，如果使用命令<code>git switch -c &lt;name&gt;</code>提示不是一个git命令，那么可能是本地git的版本有问题，使用命令<code>git --version</code>可以查看当前的git版本。</p><p>​<code>git --version</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330221434777.png"></p><p>​可以使用命令将git版本升级，无论是否安装git，都可以使用以下命令安装最新版本的git。</p><p>​<code>$ sudo add-apt-repository ppa:git-core/ppa</code></p><p>​<code>$ sudo apt update</code></p><p>​<code>$ sudo apt install git</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330222225349.png"></p><h3 id="3-分支冲突解决"><a href="#3-分支冲突解决" class="headerlink" title="3.分支冲突解决"></a>3.分支冲突解决</h3><p>​新建一个分支，进行冲冲突测试，创建一个分支<code>feature1</code>，并切换到分支，修改<code>readme.txt</code>内容，最后一行添加<code>Creating a new branch is quick AND simple.</code>，并在分支<code>feature1</code>上进行提交，再切换会<code>master</code>分支，会提示当前的<code>master</code>分支比远程的<code>master</code>分支要超前一个提交。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330222801601.png"></p><p>同时修改<code>master</code>分子里面的<code>readme.txt</code>文件，最后一行添加<code>Creating a new branch is quick &amp; simple.</code>。可以看到，<code>master</code>分支里面添加的内容和<code>feature1</code>分支里面添加内容不一致，也将<code>master</code>分支内容提交。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330223643971.png"></p><p>于是<code>master</code>分支和<code>feature1</code>分支都有了自己新的提交：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330223944465.png"></p><p>​在这种情况下，Git无法执行快速合并，只能尝试将各自修改合并，但是可能产生冲突。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330224139469.png"></p><p>​合并产生冲突，必须要解决冲突之后才能提交。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330224238595.png"></p><p>​可以直接查看待修改文件的内容进行修正，这里是<code>readme.txt</code>文件：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330224441136.png"></p><p>​<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>表示不同分支的内容。可以直接手动修改内容，然后提交，这里修改为</p><p><code>Creating a new branch is quick and simple</code>，合并的情况如下：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330224822991.png"></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330224921848.png"></p><p>​使用带参数的命令<code>git log</code>可以查看分支合并情况。</p><p>​<code>$ git log --graph --pretty=oneline --abbrev-commit</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330225225751.png"></p><p>​最后，再删除<code>feature1</code>分支。</p><p>​<code>$ git branch -d feature1</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240330225401642.png"></p><h3 id="4-分支管理策略"><a href="#4-分支管理策略" class="headerlink" title="4.分支管理策略"></a>4.分支管理策略</h3><p>​Git通常会倾向于使用<code>Fast forward</code>的合并模式，但是这种模式下删除分支会丢掉分支信息。强行禁用<code>Fast forward</code>模式，Git会在merge时生成一个新的commit，这样就可以从分支历史上看出分支信息。</p><p>​以下为<code>--no-ff</code>方式的<code>git merge</code></p><p>​创建新的分支<code>dev</code>并且切换到分支<code>dev</code>，在分支<code>dev</code>修改<code>readme.txt</code>的内容然后进行提交，在切换会主<code>master</code>分支。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240331113854165.png"></p><p>这里提示分支领先‘origin/master’共四个提交时因为本地仓库没有提交更新到远程仓库。</p><p>​使用<code>--no-ff</code>参数来进行分支<code>dev</code>的合并，表示禁用<code>Fast forward</code>：</p><p>​<code>$ git merge --no-ff -m "merge with no-ff" dev</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240331114257986.png"></p><p>本次合并要创建一个新的<code>commit</code>，所以要加上<code>-m</code>参数，把<code>commit</code>的描述写进去。</p><p>​查看分支历史：</p><p>​<code>$ git log --graph --pretty=oneline --abbrev-commit</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240331115907594.png"></p><p>​<code>fast forward</code>模式的合并看不出曾经有合并，而加上<code>--no-ff</code>参数后就可以用普通模式合并，能看到历史分支。</p><h3 id="5-用于BUG的分支"><a href="#5-用于BUG的分支" class="headerlink" title="5.用于BUG的分支"></a>5.用于BUG的分支</h3><p>​当软件开发中遇到bug时，可以创建一个临时分支来进行修复，修复后在合并分支，然后删除临时分支。‘</p><p>​当遇到bug需要处理，但是当前工作区任务却并没有完成，则可以使用<code>git stash</code>命令可以将当前工作现场”储藏“起来，等后面恢复现场后继续工作，然后再创建分支进行bug处理。需要在哪个分支进行bug处理，就要在哪个分支创建上创建临时分支。</p><p>​1.创建并切换到分支<code>issue-101</code></p><p>​2.修复需要修改的文件，修改完成后添加提交到git</p><p>​3.切换到主分支master(main)</p><p>​4.使用非forward的方式进行分支合并</p><p>​5.删除分支<code>issue-101</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240331232650035.png"></p><p>​使用命令<code>git stash list</code>可以查看被保存的工作现场，可以使用两种方法进行恢复。一是使用命令<code>git stash apply</code>进行恢复，恢复后stash内容并不会删除，需要使用<code>git stash drop</code>来删除。二是使用命令<code>git stash pop</code>，恢复的同时把stash内容也删除了。</p><p>​如果除了主分支<code>master</code>外，在<code>dev</code>分支上也有同样的bug，怎么解决呢？解决办法有两种。</p><p>​操作一是在<code>dev</code>分支上进行之前同样的操作。</p><p>​更简单的操作二是把<code>b196443 fix bug 101</code>这个提交所做的修改“复制”到<code>dev</code>分支，使用命令<code>git cherry-pick</code>可以复制一个特定的提交到当前分支。</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240331233022179.png"></p><p>​可以看到这里的提交就是分支<code>dev 2e26da0</code>，虽然两个提交改动相同，但是实际是和master不同的分支。</p><h3 id="6-新功能Feature分支"><a href="#6-新功能Feature分支" class="headerlink" title="6.新功能Feature分支"></a>6.新功能Feature分支</h3><p>​每当要添加一个新功能时，为了防止实验代码把主分支代码打乱，会新建一个feature分支，在上面开发完成后再进行合并，然后再删除feature分支。</p><p>​假设要开发一个代号为FishOS的功能。</p><p>​1.新建分支</p><p>​<code>$git switch -c feature-FishOS</code></p><p>​2.开发完成后添加提交</p><p>​<code>$ git add FishOS.cpp</code></p><p>​<code>$ git commit -m "add feature FishOS"</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413085011309.png"></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413084954056.png"></p><p>​3.切换回<code>dev</code>，准备合并</p><p>​<code>$git switch dev</code></p><p>​正常情况下，feature可以正常合并，删除。但是假设项目出了问题，新功能必须取消，而且还要删除这个新的分支，</p><p>​<code>$ git branch -d feature-FishOS</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413085520707.png"></p><p>​提示分支未合并，不能删除，但是可以强制删除</p><p>​<code>$ git branch -D feature-FishOS</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413085646363.png"></p><h3 id="7-多人合作"><a href="#7-多人合作" class="headerlink" title="7.多人合作"></a>7.多人合作</h3><p>​远程分支的克隆，就是本地的master分支和远程的master分支对应起来，远程默认仓库名称是origin。</p><p>​使用命令<code>git remote</code>或者<code>git remote -v</code>可以显示远程库信息</p><p>​使用命令<code>$ git push origin master</code>就可以把本地master分支上的所有本地提交推送到远程库对应的远程分支上，如果要推送其他分支，更改最后的本地分支名字：<code>$git push origin dev</code>进行推送即可</p><p>​分支推送的必要性：</p><p>​1.master分支是主分支，要时刻与远程同步</p><p>​2.dev分支是开发分支，团队所有成员需要在上面工作，所以也需要与远程同步</p><p>​3.其余的的bug和feature分支依据情况而定</p><p>​<strong>分支的抓取(fork)</strong></p><p>​使用另一个电脑（添加SSH key到github，<a href="#4.解决SSH无法使用的办法">教程前面有：Ctrl&nbsp;+&nbsp;左键点击</a>）或者同一个电脑的另一个目录下进行克隆：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413093911487.png"></p><p>​从别人的仓库克隆或者克隆别人仓库时，默认情况下只能看到本地的master分支</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413094402282.png"></p><p>​如果要进行远程开发，就必须要新建远程origin的dev分支到本地</p><p>​<code>$ git checkout -b dev origin/dev</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413101002880.png"></p><p>​<em><strong><u>注：这里出现了一个错误，在克隆时远程仓库并没有dev分支导致无法在新克隆的仓库中使用上述命令创建分支dev</u></strong></em></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413101250705.png"></p><p>​这里的解决方式是在新克隆的仓库（nofish@ubuntu:<del>/git_study/learngit$ ）里创建<code>dev</code>分支<code>git switch -c dev</code>,然后在dev分支里面做修改并且提交推送到远程仓库，这个时候远程仓库机会存在dev分支。然后再回到原始的仓库（nofish@ubuntu:</del>/learngit$ ），用<code>git pull</code>命令拉取远程仓库，拉取完成后使用<code>git branch</code>查看本地分支会发现也只有master分支，不存在dev分支，但是命令<code>git checkout -b dev origin/dev</code>已经可以使用。</p><pre><code> 解决分支问题后，就是要在分支上进行修改创建，</code></pre><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413102642243.png"></p><p>​其他人对远程仓库的dev分支进行推送之后，如果自己又对同样的文件做了修改，并且尝试推送</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413103451983.png"></p><p>​发现自己修改无法进行推送，这是因为别人的最新提交和自己的推送提交有冲突，解决办法就是，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再进行推送</p><p>​<code>$ git pull</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413104130825.png"></p><p>​发现<code>git pull</code>失败，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接</p><p>​<code>$ git branch --set-upstream-to=origin/dev dev</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413104428335.png"></p><p>​再进行<code>git pull</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413104609642.png"></p><p>​拉取成功但是合并有冲突，需要手动解决合并问题，如果没有设置合并方式，会先提示上图的冲突解决策略，这里选择的是<code>git config pull.rebase false</code>。然后再使用<code>git pull</code>命令进行拉取</p><p>​<code>$ git config pull.rebase false</code></p><p>​<code>$ git pull</code></p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413105629008.png"></p><p>​这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的<a href="#3.分支冲突解决">分支冲突解决：Ctrl + 左键点击</a>完全一样。解决后，提交，再push：</p><p><img src="/2024/04/14/github-xue-xi-bi-ji-cong-ling-kai-shi-xue-xi/image-20240413111816758.png"></p><p>​多人工作模式总结：</p><p>​1.先试用命令<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</p><p>​2.如果推送失败，就是远程分支比本地更新，先试图用<code>git pull</code>合并；</p><p>​3.合并产生冲突，需要解决冲突，再本地提交；</p><p>​4.没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</p><p>​注：如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><h2 id="五-常用命令集合"><a href="#五-常用命令集合" class="headerlink" title="五.常用命令集合"></a>五.常用命令集合</h2><p>​</p><table><thead><tr><th align="center">命令</th><th align="center">作用</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center"><code>git</code></td><td align="center">在linux系统上查看有没有安装Git</td><td align="center">sudo apt-get install git使用以上命令可以安装</td></tr><tr><td align="center"><code>git init</code></td><td align="center">通过git init命令把这个目录变成Git可以管理的仓库</td><td align="center"></td></tr><tr><td align="center"><code>git add &lt;file&gt;</code></td><td align="center">用命令git add告诉Git，把文件添加到仓库</td><td align="center">第一步使用git add添加</td></tr><tr><td align="center"><code>git commit -m &lt;message&gt;</code></td><td align="center">用命令git commit告诉Git，把文件提交到仓库</td><td align="center">第二步使用git commit提交</td></tr><tr><td align="center"><code>git push -u origin master</code></td><td align="center">将本地仓库提交推送到远程仓库</td><td align="center">加<code>-u</code>表示第一次提交时创建远程仓库</td></tr><tr><td align="center"><code>git status</code></td><td align="center">运行git status命令查看当前仓库状态</td><td align="center"></td></tr><tr><td align="center"><code>git diff &lt;file&gt;</code></td><td align="center">用git diff这个命令查看file文件的修改对比</td><td align="center">查看difference，显示的格式正是Unix通用的diff格式</td></tr><tr><td align="center"><code>git log</code></td><td align="center">git log命令显示从最近到最远的提交日志</td><td align="center">如果嫌输出信息太多，看得眼花缭乱的，可以试试加上–pretty=oneline参数</td></tr><tr><td align="center"><code>git reset --hard HEAD^</code></td><td align="center">版本回退到上一个版本</td><td align="center"></td></tr><tr><td align="center"><code>git reset --hard commit_id</code></td><td align="center">版本回退到指定版本</td><td align="center">版本号不必写全</td></tr><tr><td align="center"><code>git reflog</code></td><td align="center">记录每一次的命令</td><td align="center">即使电脑关电，也能查看之前的版本号</td></tr><tr><td align="center"><code>git checkout -- file</code></td><td align="center">撤销工作区的修改</td><td align="center">该撤销只能撤销回到最近一次<code>git commit</code>或者<code>git add</code>时的状态</td></tr><tr><td align="center"><code>git reset HEAD &lt;file&gt;</code></td><td align="center">把暂存区的修改撤掉，重新放回工作区</td><td align="center">其中<code>HEAD</code>表示最新的版本</td></tr><tr><td align="center"><code>git rm &lt;file&gt;</code></td><td align="center">从版本库删除该文件</td><td align="center">需要配合<code>git commit -m &lt;message&gt;</code>提交修改</td></tr><tr><td align="center"><code>git checkout -- &lt;file&gt;</code></td><td align="center">对误删除的文件进行恢复到最新版本</td><td align="center"></td></tr><tr><td align="center"><code>git remote add origin &lt;rep&gt;</code></td><td align="center">添加远程仓库</td><td align="center">需要远程仓库已创建</td></tr><tr><td align="center"><code>git remote rm &lt;name&gt;</code></td><td align="center">删除远程库</td><td align="center">该删除只是解除远程和本地的绑定关系，并不是物理上删除了远程库</td></tr><tr><td align="center"><code>git clone &lt;rep&gt;</code></td><td align="center">克隆一个仓库</td><td align="center"></td></tr><tr><td align="center"><code>git checkout -b &lt;name&gt;</code></td><td align="center">创建一个分支，并切换到该分支</td><td align="center"></td></tr><tr><td align="center"><code>git switch -c &lt;name&gt;</code></td><td align="center">创建一个分支，并切换到该分支</td><td align="center"></td></tr><tr><td align="center"><code>git merge &lt;name&gt;</code></td><td align="center">将分支<name>和主分支合并</name></td><td align="center">默认是Fast-forward的合并模式</td></tr><tr><td align="center"><code>git merge --no-ff -m &lt;message&gt;</code></td><td align="center">将分支<name>和主分支合并</name></td><td align="center">不使用Fast-forward的合并模式</td></tr><tr><td align="center"><code>git branch</code></td><td align="center">查看当前分支</td><td align="center">加上<code>-a</code>查看当前所有分支，包括远程仓库</td></tr><tr><td align="center"><code>git log --graph --pretty=oneline --abbrev-commit</code></td><td align="center">查看分支合并情况</td><td align="center">图形化界面</td></tr><tr><td align="center"><code>git branch -d &lt;name&gt;</code></td><td align="center">删除一个分支</td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言易错题集合（一）</title>
      <link href="/2024/04/07/di-yi-ci-ce-yan-cuo-ti-ji-he/"/>
      <url>/2024/04/07/di-yi-ci-ce-yan-cuo-ti-ji-he/</url>
      
        <content type="html"><![CDATA[<h1 id="第一次测验错题集合"><a href="#第一次测验错题集合" class="headerlink" title="第一次测验错题集合"></a>第一次测验错题集合</h1><h3 id="1-变量的声明和定义区别"><a href="#1-变量的声明和定义区别" class="headerlink" title="1.变量的声明和定义区别"></a>1.变量的声明和定义区别</h3><p>​变量的声明和变量的定义</p><p>​声明是告诉编译器变量的类型，名字等信息</p><p>​定义是声明加上运行时给变量分配内存空间</p><p>​定义是包含声明的，但不是所有的声明都是定义</p><p>​也就是说有一些声明，他只是编译作用，而不会在运行时分配内存</p><h3 id="2-C语言基本数据类型"><a href="#2-C语言基本数据类型" class="headerlink" title="2.C语言基本数据类型"></a>2.C语言基本数据类型</h3><p>​除了int自己，所有的整型实际上都要包含int，但可以省略</p><p>​short int(integer)</p><p>​long int</p><p>​long long int</p><p>​unsigned int</p><p>​由于unsigned int可以省略为unsigned</p><p>​所以也可以将它视为基本数据类型</p><h3 id="3-goto使用"><a href="#3-goto使用" class="headerlink" title="3.goto使用"></a>3.goto使用</h3><p>​goto在现代C/C++中，不要随意去使用</p><p>​如果要用，一般是以下两个场景：</p><p>​1.跳出外层循环</p><p>​2.错误处理</p><h3 id="4-运算符优先级"><a href="#4-运算符优先级" class="headerlink" title="4.运算符优先级"></a>4.运算符优先级</h3><p>​一元运算符的优先级总是比二元运算符优先级高</p><p>​二元运算符中，算术运算符优先级最高</p>]]></content>
      
      
      
        <tags>
            
            <tag> 易错集合 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
